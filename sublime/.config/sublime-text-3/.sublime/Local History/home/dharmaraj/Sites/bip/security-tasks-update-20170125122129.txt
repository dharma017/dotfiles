Project BIP

Security — Task list report


DATABASE RELATED


1. Check that all columns has the appropriate data type to avoid faulty data

=> Checked all table structure and data and fixed table structure accordingly.
=> Also , the server validation for form will also handle faulty data during table insertion.

2. Make sure passwords are stored in Hash and with row unique salt

To make sure password stored in hash with unique row salt.
	i) We are using CRYPT_BLOWFISH algorithm to create the hash for password
	ii) The random salt will be generated by password_hash() for each password hashed

Note:
	i) The password hashed can't be decrypted as this hashing method implies one-way password hashing.
	ii) During new server migration, existing password are decoded using old decryption tool,
	then, the decoded password are rehashed for all users with new hashing algorithm.
	So, same password can be used for login purpose.
	iii) The password hashing fixed for app version too.

Reference:
http://php.net/manual/en/function.password-hash.php

3. Encrypt the following data in database
a. Name
b. Phone nr
c. E-mail
d. Comments and messages

=> We have used the Encryption Library provided by Codeigniter
https://codeigniter.com/user_guide/libraries/encryption.html#using-the-encryption-library

The encryption and decryption process performed for following user parameters
a. Name
b. Phone nr
c. E-mail
d. Comments and messages

As these parameters are used in BIP system in most of the modules along with app, this update affects whole bip system.

In user table when user created/edited, encrypted data saved. Same for comment and messages in Message and
Worksheet module when someone fill up message/comment, encrypted data save in database.

Then, the encrypted data are decrypted while showing in mail, worksheet,comment,steps, app etc

Since , the existing contents (name,email,comments,messages etc ) are not encrypted, a php script written to handle
encryption for these contents.

4. Improve the script that replaces real users with test users
a. Password
b. Phone
c. E-mail
d. Comments and messages

=> This is done previously for live database, which will not work for new server.
Need to update script at last when security tasks are deployed to production ( new vpn server )

We can implement Faker library to replace real data with fake data to improve test scripts
[https://packagist.org/packages/fzaninotto/faker][https://packagist.org/packages/fzaninotto/faker]

5. Configure a special user with limited access only for the active DB
=> New mysql user created with limited database access only.

Commands used:-

GRANT SELECT, INSERT, UPDATE,ALTER,ALTER ROUTINE,CREATE,CREATE ROUTINE,CREATE TEMPORARY TABLES ON bip.* TO 'bip_dbuser'@'localhost';
GRANT EXECUTE ON bip.* TO 'bip_dbuser'@'localhost';
GRANT DELETE ON bip.* TO 'bip_dbuser'@'localhost';

6. Configure DB for local access only (can access only via a VPN)
=> Not using third party tools to accress DB. We use PHPMyadmin.

7. Allow PHPMyadmin only via local access (VPN)
=> The phpmyadmin only works in VPN.
https://k8bip01.ki.se/

When vpn not connected, it show Redhat information page.

8. Use index and constraints to speed up db and avoid duplicates where they are not allowed.
Indexing performed for all large tables for necessary columns.
Duplicate indexes are removed by analyzing all the tables.

To find and remove duplicate indexes, we use tools like
https://www.percona.com/doc/percona-toolkit/2.1/pt-duplicate-key-checker.html
https://dev.mysql.com/doc/mysql-utilities/1.5/en/mysqlindexcheck.html

9. Configure foreign keys with reference integrity to avoid faulty data
=> The foreign keys configured with reference integrity to avoid faulty data to necessary tables.
Example:
When difficulty is deleted, all stages, steps, and other related stuffs need to be deleted. The deletion process was
terrible.
On configuring foreign referential integrity, no faulty data will be left and speed up deletion process too.

This tasks also resolves
https://websearchpro.teamwork.com/#tasks/8687193

To look duplicate foreign keys, this tool is used too.
https://www.percona.com/doc/percona-toolkit/2.1/pt-duplicate-key-checker.html


WEBB RELATED


10. Check all queries to DB for SQL injection vulnerabilities
=> Previously the sql code written in BIP system were regular queries which was not good security practice.
The most of sql code were reqular queries, some new modules had been handled some are not.

Now, Query binding implemented for every sql query in BIP System.

The benefit of using binds is that the values are automatically escaped, producing safer queries. You don’t have to
remember to manually escape data; the engine does it automatically for you.

Also, sql injection prevented in server validation too which will handle injected code during form submit.

Reference for  Query bindings
https://www.codeigniter.com/userguide3/database/queries.html#query-bindings

11. Make both client and server validation for data in querystrings and forms
=> Validation steps:

A form is displayed.

You fill it in and submit it.

If you submitted something invalid, or perhaps missed a required item, the form is redisplayed containing your data
along with an error message describing the problem.

This process continues until you have submitted a valid form.

On the receiving end, the script must:
Check for required data.
Verify that the data is of the correct type, and meets the correct criteria.

For example, if a username is submitted it must be validated to contain only permitted characters. It must be of a
minimum length, and not exceed a maximum length. The username can’t be someone else’s existing username, or
perhaps even a reserved word. Etc.

Sanitize the data for security.

Pre-format the data if needed (Does the data need to be trimmed? HTML encoded? Etc.)

Prep the data for insertion in the database.

Note:-
	i) Client Validation : https://jqueryvalidation.org/
	ii) Server validation : https://codeigniter.com/user_guide/libraries/form_validation.html

11. Validate all places where we have user input fields to prevent script injections
=> This task is related to
https://websearchpro.teamwork.com/#tasks/7214617

We have prevented sql injections during form validation too.

Sanitize the data for security using xss_clean method in every form found in BIP system
Verify that the data is of the correct type, and meets the correct criteria

Note: All three login forms in BIP platform checked and fixed for sql injection in live server some months back.

12. Configure SSL to get an A grade
https://www.ssllabs.com/ssltest/analyze.html
=>SSL not verified in new VPN server.

13. Setup pingdom!
=> Not configured.

14. Set up an error log file and notify admin of all errors
=> Error log file is created per day to track the errors.

The notification part is covered in below task.
https://websearchpro.teamwork.com/#tasks/7214582

15. Configure a user friendly error page that does not share any sensitive data to the user
=> In live server, we have disable error message, which wil prevent showing sensitive data to the user.

For new VPN server

The friendly error page has been created. Whenever the error is encountered, the page will be redirected error page,
where users can fill up the form to send log report with additional message. The latest log file will be included by default
in the mail too.
The error notification field has been added in Superadmin add/edit page, where they can toggle on/off error notification.

 WEBSERVICE

16.Run via HTTPS
=> The bip project is already configured to run via https.
The web and app both are configured to interact via https protocol.
SSL certificate not verified as new server is still in testing phase with test url.

17. Require an approved authentication header for communication with webservice. (the app must authenticate
before accessing the webservice to write or read data)
=> The webservice authentication has been implemented on basis of JSON Web Tokens to secure api.
https://jwt.io/

Implemented for both web and app section during webservice interaction.

18. Encrypt phone data in the mobile
=> The comments by patients via mobile app is encrypted when inserting to database in web platform.

For app part, to create and access encrypted database, we are using cordova plugin
https://github.com/litehelpers/Cordova-sqlcipher-adapter


 ROUTINES


19. Scheduled updates

=> Most of the time, we are updating to live site only on Sunday for new features and support tasks.
Incase of urgency, we do at the same day when we fix.

Needed discussion for how new VPN server to deployed for issues types. ( hotfix/feature/support/bugfix )

20. Acceptance testing in stage environment
=> Needed discussion

21. Automate tests of basic critical flows
=> Needed discussion

22. Automate deployment to avoid human errors
=> Deployment steps

	i. Push the data to Gitlab ( currently stage-v5 branch )
	ii. Use deployment tool for php, https://deployer.org/
	In current bip project with stage-v5 branch, run command to push to vpn server.
	dep deploy
	iii. Then, in server, run command using bjosod user.
	/drift/scripts/deploy-bip-to-production.bash

23. Define what to always test before and after deployment
=> Need discussion

24. Use structured version handling so we can always know in which build we have a certain problem
=> The versioning implemented using the branching strategy, so that not verified tasks ( in dev server ) are mistakenly
sent to live site.

Git branching:

live site: [production] branch
new vpn server: [stage-v5] branch

25. Backup to a separate server
=> The new server will handle backup for whole project with database..

Note: Database backup in New VPN server: /drift/exports/mariadb/

26. Use encrypted backup
=> The new server will handle backup.


 SERVER RELATED


27. Change to a Dedicated server with managed hosting (for example donator.se or glesys.se)
=> Cisco VPN
http://ki.se/start

28. Close all ports in firewall so that only the ones we need are open for public access.
=> Only ports opened that we needed for rsync,scp etc.

29. Setup a VPN to access the server
=> Use Cisco any connect VPN

30. Configure the webserver to use a separate user that only can access the webb-folder
=> bjosod user , with limited server command only.

31. Configure read and write access for each folder to ensure we only have the access needed
=> Only apache user can write to project folder, while bjosod user has read access only to project.

32. Configure the webserver to be anonymous and allow minimum possible:
http://httpd.apache.org/docs/2.4/misc/security_tips.html
=> Need discussion

33. Install mod_security and configure it to stop common threats
=> Done , according to support

34. Setup a separate staging server
=> The new server will keep snapshots, so that will be enough.

35. Configure SPF records for e-mail sending
=> Need discussion

36. Configure the domain for DNSSEC
=> Need discussion

Security Task Left:

Configure SSL to get an A grade
Setup pingdom!
Scheduled updates
Acceptance testing in stage environment
Automate tests of basic critical flows
Define what to always test before and after deployment
Configure the webserver to be anonymous and allow minimum possible:
Backup to a separate server
Use encrypted backup ( incase of separate server )
Setup a separate staging server
Configure SPF records for e-mail sending
Configure the domain for DNSSEC
