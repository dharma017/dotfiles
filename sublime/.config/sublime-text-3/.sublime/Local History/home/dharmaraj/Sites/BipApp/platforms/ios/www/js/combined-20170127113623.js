/*! jQuery v1.9.1 | (c) 2005, 2012 jQuery Foundation, Inc. | jquery.org/license
//@ sourceMappingURL=jquery.min.map
*/(function(e,t){var n,r,i=typeof t,o=e.document,a=e.location,s=e.jQuery,u=e.$,l={},c=[],p="1.9.1",f=c.concat,d=c.push,h=c.slice,g=c.indexOf,m=l.toString,y=l.hasOwnProperty,v=p.trim,b=function(e,t){return new b.fn.init(e,t,r)},x=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,w=/\S+/g,T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,N=/^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,k=/^[\],:{}\s]*$/,E=/(?:^|:|,)(?:\s*\[)+/g,S=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,A=/"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,j=/^-ms-/,D=/-([\da-z])/gi,L=function(e,t){return t.toUpperCase()},H=function(e){(o.addEventListener||"load"===e.type||"complete"===o.readyState)&&(q(),b.ready())},q=function(){o.addEventListener?(o.removeEventListener("DOMContentLoaded",H,!1),e.removeEventListener("load",H,!1)):(o.detachEvent("onreadystatechange",H),e.detachEvent("onload",H))};b.fn=b.prototype={jquery:p,constructor:b,init:function(e,n,r){var i,a;if(!e)return this;if("string"==typeof e){if(i="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:N.exec(e),!i||!i[1]&&n)return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e);if(i[1]){if(n=n instanceof b?n[0]:n,b.merge(this,b.parseHTML(i[1],n&&n.nodeType?n.ownerDocument||n:o,!0)),C.test(i[1])&&b.isPlainObject(n))for(i in n)b.isFunction(this[i])?this[i](n[i]):this.attr(i,n[i]);return this}if(a=o.getElementById(i[2]),a&&a.parentNode){if(a.id!==i[2])return r.find(e);this.length=1,this[0]=a}return this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):b.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),b.makeArray(e,this))},selector:"",length:0,size:function(){return this.length},toArray:function(){return h.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=b.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return b.each(this,e,t)},ready:function(e){return b.ready.promise().done(e),this},slice:function(){return this.pushStack(h.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(b.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:d,sort:[].sort,splice:[].splice},b.fn.init.prototype=b.fn,b.extend=b.fn.extend=function(){var e,n,r,i,o,a,s=arguments[0]||{},u=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[1]||{},u=2),"object"==typeof s||b.isFunction(s)||(s={}),l===u&&(s=this,--u);l>u;u++)if(null!=(o=arguments[u]))for(i in o)e=s[i],r=o[i],s!==r&&(c&&r&&(b.isPlainObject(r)||(n=b.isArray(r)))?(n?(n=!1,a=e&&b.isArray(e)?e:[]):a=e&&b.isPlainObject(e)?e:{},s[i]=b.extend(c,a,r)):r!==t&&(s[i]=r));return s},b.extend({noConflict:function(t){return e.$===b&&(e.$=u),t&&e.jQuery===b&&(e.jQuery=s),b},isReady:!1,readyWait:1,holdReady:function(e){e?b.readyWait++:b.ready(!0)},ready:function(e){if(e===!0?!--b.readyWait:!b.isReady){if(!o.body)return setTimeout(b.ready);b.isReady=!0,e!==!0&&--b.readyWait>0||(n.resolveWith(o,[b]),b.fn.trigger&&b(o).trigger("ready").off("ready"))}},isFunction:function(e){return"function"===b.type(e)},isArray:Array.isArray||function(e){return"array"===b.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[m.call(e)]||"object":typeof e},isPlainObject:function(e){if(!e||"object"!==b.type(e)||e.nodeType||b.isWindow(e))return!1;try{if(e.constructor&&!y.call(e,"constructor")&&!y.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}var r;for(r in e);return r===t||y.call(e,r)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||o;var r=C.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=b.buildFragment([e],t,i),i&&b(i).remove(),b.merge([],r.childNodes))},parseJSON:function(n){return e.JSON&&e.JSON.parse?e.JSON.parse(n):null===n?n:"string"==typeof n&&(n=b.trim(n),n&&k.test(n.replace(S,"@").replace(A,"]").replace(E,"")))?Function("return "+n)():(b.error("Invalid JSON: "+n),t)},parseXML:function(n){var r,i;if(!n||"string"!=typeof n)return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,"text/xml")):(r=new ActiveXObject("Microsoft.XMLDOM"),r.async="false",r.loadXML(n))}catch(o){r=t}return r&&r.documentElement&&!r.getElementsByTagName("parsererror").length||b.error("Invalid XML: "+n),r},noop:function(){},globalEval:function(t){t&&b.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(j,"ms-").replace(D,L)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,a=M(e);if(n){if(a){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(a){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:v&&!v.call("\ufeff\u00a0")?function(e){return null==e?"":v.call(e)}:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(M(Object(e))?b.merge(n,"string"==typeof e?[e]:e):d.call(n,e)),n},inArray:function(e,t,n){var r;if(t){if(g)return g.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,o=0;if("number"==typeof r)for(;r>o;o++)e[i++]=n[o];else while(n[o]!==t)e[i++]=n[o++];return e.length=i,e},grep:function(e,t,n){var r,i=[],o=0,a=e.length;for(n=!!n;a>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,a=M(e),s=[];if(a)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(s[s.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(s[s.length]=r);return f.apply([],s)},guid:1,proxy:function(e,n){var r,i,o;return"string"==typeof n&&(o=e[n],n=e,e=o),b.isFunction(e)?(r=h.call(arguments,2),i=function(){return e.apply(n||this,r.concat(h.call(arguments)))},i.guid=e.guid=e.guid||b.guid++,i):t},access:function(e,n,r,i,o,a,s){var u=0,l=e.length,c=null==r;if("object"===b.type(r)){o=!0;for(u in r)b.access(e,n,u,r[u],!0,a,s)}else if(i!==t&&(o=!0,b.isFunction(i)||(s=!0),c&&(s?(n.call(e,i),n=null):(c=n,n=function(e,t,n){return c.call(b(e),n)})),n))for(;l>u;u++)n(e[u],r,s?i:i.call(e[u],u,n(e[u],r)));return o?e:c?n.call(e):l?n(e[0],r):a},now:function(){return(new Date).getTime()}}),b.ready.promise=function(t){if(!n)if(n=b.Deferred(),"complete"===o.readyState)setTimeout(b.ready);else if(o.addEventListener)o.addEventListener("DOMContentLoaded",H,!1),e.addEventListener("load",H,!1);else{o.attachEvent("onreadystatechange",H),e.attachEvent("onload",H);var r=!1;try{r=null==e.frameElement&&o.documentElement}catch(i){}r&&r.doScroll&&function a(){if(!b.isReady){try{r.doScroll("left")}catch(e){return setTimeout(a,50)}q(),b.ready()}}()}return n.promise(t)},b.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){l["[object "+t+"]"]=t.toLowerCase()});function M(e){var t=e.length,n=b.type(e);return b.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||"function"!==n&&(0===t||"number"==typeof t&&t>0&&t-1 in e)}r=b(o);var _={};function F(e){var t=_[e]={};return b.each(e.match(w)||[],function(e,n){t[n]=!0}),t}b.Callbacks=function(e){e="string"==typeof e?_[e]||F(e):b.extend({},e);var n,r,i,o,a,s,u=[],l=!e.once&&[],c=function(t){for(r=e.memory&&t,i=!0,a=s||0,s=0,o=u.length,n=!0;u&&o>a;a++)if(u[a].apply(t[0],t[1])===!1&&e.stopOnFalse){r=!1;break}n=!1,u&&(l?l.length&&c(l.shift()):r?u=[]:p.disable())},p={add:function(){if(u){var t=u.length;(function i(t){b.each(t,function(t,n){var r=b.type(n);"function"===r?e.unique&&p.has(n)||u.push(n):n&&n.length&&"string"!==r&&i(n)})})(arguments),n?o=u.length:r&&(s=t,c(r))}return this},remove:function(){return u&&b.each(arguments,function(e,t){var r;while((r=b.inArray(t,u,r))>-1)u.splice(r,1),n&&(o>=r&&o--,a>=r&&a--)}),this},has:function(e){return e?b.inArray(e,u)>-1:!(!u||!u.length)},empty:function(){return u=[],this},disable:function(){return u=l=r=t,this},disabled:function(){return!u},lock:function(){return l=t,r||p.disable(),this},locked:function(){return!l},fireWith:function(e,t){return t=t||[],t=[e,t.slice?t.slice():t],!u||i&&!l||(n?l.push(t):c(t)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!i}};return p},b.extend({Deferred:function(e){var t=[["resolve","done",b.Callbacks("once memory"),"resolved"],["reject","fail",b.Callbacks("once memory"),"rejected"],["notify","progress",b.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return b.Deferred(function(n){b.each(t,function(t,o){var a=o[0],s=b.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&b.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[a+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?b.extend(e,r):r}},i={};return r.pipe=r.then,b.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=h.call(arguments),r=n.length,i=1!==r||e&&b.isFunction(e.promise)?r:0,o=1===i?e:b.Deferred(),a=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?h.call(arguments):r,n===s?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},s,u,l;if(r>1)for(s=Array(r),u=Array(r),l=Array(r);r>t;t++)n[t]&&b.isFunction(n[t].promise)?n[t].promise().done(a(t,l,n)).fail(o.reject).progress(a(t,u,s)):--i;return i||o.resolveWith(l,n),o.promise()}}),b.support=function(){var t,n,r,a,s,u,l,c,p,f,d=o.createElement("div");if(d.setAttribute("className","t"),d.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",n=d.getElementsByTagName("*"),r=d.getElementsByTagName("a")[0],!n||!r||!n.length)return{};s=o.createElement("select"),l=s.appendChild(o.createElement("option")),a=d.getElementsByTagName("input")[0],r.style.cssText="top:1px;float:left;opacity:.5",t={getSetAttribute:"t"!==d.className,leadingWhitespace:3===d.firstChild.nodeType,tbody:!d.getElementsByTagName("tbody").length,htmlSerialize:!!d.getElementsByTagName("link").length,style:/top/.test(r.getAttribute("style")),hrefNormalized:"/a"===r.getAttribute("href"),opacity:/^0.5/.test(r.style.opacity),cssFloat:!!r.style.cssFloat,checkOn:!!a.value,optSelected:l.selected,enctype:!!o.createElement("form").enctype,html5Clone:"<:nav></:nav>"!==o.createElement("nav").cloneNode(!0).outerHTML,boxModel:"CSS1Compat"===o.compatMode,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},a.checked=!0,t.noCloneChecked=a.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!l.disabled;try{delete d.test}catch(h){t.deleteExpando=!1}a=o.createElement("input"),a.setAttribute("value",""),t.input=""===a.getAttribute("value"),a.value="t",a.setAttribute("type","radio"),t.radioValue="t"===a.value,a.setAttribute("checked","t"),a.setAttribute("name","t"),u=o.createDocumentFragment(),u.appendChild(a),t.appendChecked=a.checked,t.checkClone=u.cloneNode(!0).cloneNode(!0).lastChild.checked,d.attachEvent&&(d.attachEvent("onclick",function(){t.noCloneEvent=!1}),d.cloneNode(!0).click());for(f in{submit:!0,change:!0,focusin:!0})d.setAttribute(c="on"+f,"t"),t[f+"Bubbles"]=c in e||d.attributes[c].expando===!1;return d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",t.clearCloneStyle="content-box"===d.style.backgroundClip,b(function(){var n,r,a,s="padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",u=o.getElementsByTagName("body")[0];u&&(n=o.createElement("div"),n.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",u.appendChild(n).appendChild(d),d.innerHTML="<table><tr><td></td><td>t</td></tr></table>",a=d.getElementsByTagName("td"),a[0].style.cssText="padding:0;margin:0;border:0;display:none",p=0===a[0].offsetHeight,a[0].style.display="",a[1].style.display="none",t.reliableHiddenOffsets=p&&0===a[0].offsetHeight,d.innerHTML="",d.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",t.boxSizing=4===d.offsetWidth,t.doesNotIncludeMarginInBodyOffset=1!==u.offsetTop,e.getComputedStyle&&(t.pixelPosition="1%"!==(e.getComputedStyle(d,null)||{}).top,t.boxSizingReliable="4px"===(e.getComputedStyle(d,null)||{width:"4px"}).width,r=d.appendChild(o.createElement("div")),r.style.cssText=d.style.cssText=s,r.style.marginRight=r.style.width="0",d.style.width="1px",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),typeof d.style.zoom!==i&&(d.innerHTML="",d.style.cssText=s+"width:1px;padding:1px;display:inline;zoom:1",t.inlineBlockNeedsLayout=3===d.offsetWidth,d.style.display="block",d.innerHTML="<div></div>",d.firstChild.style.width="5px",t.shrinkWrapBlocks=3!==d.offsetWidth,t.inlineBlockNeedsLayout&&(u.style.zoom=1)),u.removeChild(n),n=d=a=r=null)}),n=s=u=l=r=a=null,t}();var O=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,B=/([A-Z])/g;function P(e,n,r,i){if(b.acceptData(e)){var o,a,s=b.expando,u="string"==typeof n,l=e.nodeType,p=l?b.cache:e,f=l?e[s]:e[s]&&s;if(f&&p[f]&&(i||p[f].data)||!u||r!==t)return f||(l?e[s]=f=c.pop()||b.guid++:f=s),p[f]||(p[f]={},l||(p[f].toJSON=b.noop)),("object"==typeof n||"function"==typeof n)&&(i?p[f]=b.extend(p[f],n):p[f].data=b.extend(p[f].data,n)),o=p[f],i||(o.data||(o.data={}),o=o.data),r!==t&&(o[b.camelCase(n)]=r),u?(a=o[n],null==a&&(a=o[b.camelCase(n)])):a=o,a}}function R(e,t,n){if(b.acceptData(e)){var r,i,o,a=e.nodeType,s=a?b.cache:e,u=a?e[b.expando]:b.expando;if(s[u]){if(t&&(o=n?s[u]:s[u].data)){b.isArray(t)?t=t.concat(b.map(t,b.camelCase)):t in o?t=[t]:(t=b.camelCase(t),t=t in o?[t]:t.split(" "));for(r=0,i=t.length;i>r;r++)delete o[t[r]];if(!(n?$:b.isEmptyObject)(o))return}(n||(delete s[u].data,$(s[u])))&&(a?b.cleanData([e],!0):b.support.deleteExpando||s!=s.window?delete s[u]:s[u]=null)}}}b.extend({cache:{},expando:"jQuery"+(p+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(e){return e=e.nodeType?b.cache[e[b.expando]]:e[b.expando],!!e&&!$(e)},data:function(e,t,n){return P(e,t,n)},removeData:function(e,t){return R(e,t)},_data:function(e,t,n){return P(e,t,n,!0)},_removeData:function(e,t){return R(e,t,!0)},acceptData:function(e){if(e.nodeType&&1!==e.nodeType&&9!==e.nodeType)return!1;var t=e.nodeName&&b.noData[e.nodeName.toLowerCase()];return!t||t!==!0&&e.getAttribute("classid")===t}}),b.fn.extend({data:function(e,n){var r,i,o=this[0],a=0,s=null;if(e===t){if(this.length&&(s=b.data(o),1===o.nodeType&&!b._data(o,"parsedAttrs"))){for(r=o.attributes;r.length>a;a++)i=r[a].name,i.indexOf("data-")||(i=b.camelCase(i.slice(5)),W(o,i,s[i]));b._data(o,"parsedAttrs",!0)}return s}return"object"==typeof e?this.each(function(){b.data(this,e)}):b.access(this,function(n){return n===t?o?W(o,e,b.data(o,e)):null:(this.each(function(){b.data(this,e,n)}),t)},null,n,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){b.removeData(this,e)})}});function W(e,n,r){if(r===t&&1===e.nodeType){var i="data-"+n.replace(B,"-$1").toLowerCase();if(r=e.getAttribute(i),"string"==typeof r){try{r="true"===r?!0:"false"===r?!1:"null"===r?null:+r+""===r?+r:O.test(r)?b.parseJSON(r):r}catch(o){}b.data(e,n,r)}else r=t}return r}function $(e){var t;for(t in e)if(("data"!==t||!b.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}b.extend({queue:function(e,n,r){var i;return e?(n=(n||"fx")+"queue",i=b._data(e,n),r&&(!i||b.isArray(r)?i=b._data(e,n,b.makeArray(r)):i.push(r)),i||[]):t},dequeue:function(e,t){t=t||"fx";var n=b.queue(e,t),r=n.length,i=n.shift(),o=b._queueHooks(e,t),a=function(){b.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),o.cur=i,i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return b._data(e,n)||b._data(e,n,{empty:b.Callbacks("once memory").add(function(){b._removeData(e,t+"queue"),b._removeData(e,n)})})}}),b.fn.extend({queue:function(e,n){var r=2;return"string"!=typeof e&&(n=e,e="fx",r--),r>arguments.length?b.queue(this[0],e):n===t?this:this.each(function(){var t=b.queue(this,e,n);b._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&b.dequeue(this,e)})},dequeue:function(e){return this.each(function(){b.dequeue(this,e)})},delay:function(e,t){return e=b.fx?b.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,n){var r,i=1,o=b.Deferred(),a=this,s=this.length,u=function(){--i||o.resolveWith(a,[a])};"string"!=typeof e&&(n=e,e=t),e=e||"fx";while(s--)r=b._data(a[s],e+"queueHooks"),r&&r.empty&&(i++,r.empty.add(u));return u(),o.promise(n)}});var I,z,X=/[\t\r\n]/g,U=/\r/g,V=/^(?:input|select|textarea|button|object)$/i,Y=/^(?:a|area)$/i,J=/^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,G=/^(?:checked|selected)$/i,Q=b.support.getSetAttribute,K=b.support.input;b.fn.extend({attr:function(e,t){return b.access(this,b.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){b.removeAttr(this,e)})},prop:function(e,t){return b.access(this,b.prop,e,t,arguments.length>1)},removeProp:function(e){return e=b.propFix[e]||e,this.each(function(){try{this[e]=t,delete this[e]}catch(n){}})},addClass:function(e){var t,n,r,i,o,a=0,s=this.length,u="string"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).addClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(w)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(X," "):" ")){o=0;while(i=t[o++])0>r.indexOf(" "+i+" ")&&(r+=i+" ");n.className=b.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,a=0,s=this.length,u=0===arguments.length||"string"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).removeClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(w)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(X," "):"")){o=0;while(i=t[o++])while(r.indexOf(" "+i+" ")>=0)r=r.replace(" "+i+" "," ");n.className=e?b.trim(r):""}return this},toggleClass:function(e,t){var n=typeof e,r="boolean"==typeof t;return b.isFunction(e)?this.each(function(n){b(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n){var o,a=0,s=b(this),u=t,l=e.match(w)||[];while(o=l[a++])u=r?u:!s.hasClass(o),s[u?"addClass":"removeClass"](o)}else(n===i||"boolean"===n)&&(this.className&&b._data(this,"__className__",this.className),this.className=this.className||e===!1?"":b._data(this,"__className__")||"")})},hasClass:function(e){var t=" "+e+" ",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(X," ").indexOf(t)>=0)return!0;return!1},val:function(e){var n,r,i,o=this[0];{if(arguments.length)return i=b.isFunction(e),this.each(function(n){var o,a=b(this);1===this.nodeType&&(o=i?e.call(this,n,a.val()):e,null==o?o="":"number"==typeof o?o+="":b.isArray(o)&&(o=b.map(o,function(e){return null==e?"":e+""})),r=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()],r&&"set"in r&&r.set(this,o,"value")!==t||(this.value=o))});if(o)return r=b.valHooks[o.type]||b.valHooks[o.nodeName.toLowerCase()],r&&"get"in r&&(n=r.get(o,"value"))!==t?n:(n=o.value,"string"==typeof n?n.replace(U,""):null==n?"":n)}}}),b.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,u=0>i?s:o?i:0;for(;s>u;u++)if(n=r[u],!(!n.selected&&u!==i||(b.support.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&b.nodeName(n.parentNode,"optgroup"))){if(t=b(n).val(),o)return t;a.push(t)}return a},set:function(e,t){var n=b.makeArray(t);return b(e).find("option").each(function(){this.selected=b.inArray(b(this).val(),n)>=0}),n.length||(e.selectedIndex=-1),n}}},attr:function(e,n,r){var o,a,s,u=e.nodeType;if(e&&3!==u&&8!==u&&2!==u)return typeof e.getAttribute===i?b.prop(e,n,r):(a=1!==u||!b.isXMLDoc(e),a&&(n=n.toLowerCase(),o=b.attrHooks[n]||(J.test(n)?z:I)),r===t?o&&a&&"get"in o&&null!==(s=o.get(e,n))?s:(typeof e.getAttribute!==i&&(s=e.getAttribute(n)),null==s?t:s):null!==r?o&&a&&"set"in o&&(s=o.set(e,r,n))!==t?s:(e.setAttribute(n,r+""),r):(b.removeAttr(e,n),t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(w);if(o&&1===e.nodeType)while(n=o[i++])r=b.propFix[n]||n,J.test(n)?!Q&&G.test(n)?e[b.camelCase("default-"+n)]=e[r]=!1:e[r]=!1:b.attr(e,n,""),e.removeAttribute(Q?n:r)},attrHooks:{type:{set:function(e,t){if(!b.support.radioValue&&"radio"===t&&b.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(e,n,r){var i,o,a,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return a=1!==s||!b.isXMLDoc(e),a&&(n=b.propFix[n]||n,o=b.propHooks[n]),r!==t?o&&"set"in o&&(i=o.set(e,r,n))!==t?i:e[n]=r:o&&"get"in o&&null!==(i=o.get(e,n))?i:e[n]},propHooks:{tabIndex:{get:function(e){var n=e.getAttributeNode("tabindex");return n&&n.specified?parseInt(n.value,10):V.test(e.nodeName)||Y.test(e.nodeName)&&e.href?0:t}}}}),z={get:function(e,n){var r=b.prop(e,n),i="boolean"==typeof r&&e.getAttribute(n),o="boolean"==typeof r?K&&Q?null!=i:G.test(n)?e[b.camelCase("default-"+n)]:!!i:e.getAttributeNode(n);return o&&o.value!==!1?n.toLowerCase():t},set:function(e,t,n){return t===!1?b.removeAttr(e,n):K&&Q||!G.test(n)?e.setAttribute(!Q&&b.propFix[n]||n,n):e[b.camelCase("default-"+n)]=e[n]=!0,n}},K&&Q||(b.attrHooks.value={get:function(e,n){var r=e.getAttributeNode(n);return b.nodeName(e,"input")?e.defaultValue:r&&r.specified?r.value:t},set:function(e,n,r){return b.nodeName(e,"input")?(e.defaultValue=n,t):I&&I.set(e,n,r)}}),Q||(I=b.valHooks.button={get:function(e,n){var r=e.getAttributeNode(n);return r&&("id"===n||"name"===n||"coords"===n?""!==r.value:r.specified)?r.value:t},set:function(e,n,r){var i=e.getAttributeNode(r);return i||e.setAttributeNode(i=e.ownerDocument.createAttribute(r)),i.value=n+="","value"===r||n===e.getAttribute(r)?n:t}},b.attrHooks.contenteditable={get:I.get,set:function(e,t,n){I.set(e,""===t?!1:t,n)}},b.each(["width","height"],function(e,n){b.attrHooks[n]=b.extend(b.attrHooks[n],{set:function(e,r){return""===r?(e.setAttribute(n,"auto"),r):t}})})),b.support.hrefNormalized||(b.each(["href","src","width","height"],function(e,n){b.attrHooks[n]=b.extend(b.attrHooks[n],{get:function(e){var r=e.getAttribute(n,2);return null==r?t:r}})}),b.each(["href","src"],function(e,t){b.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}})),b.support.style||(b.attrHooks.style={get:function(e){return e.style.cssText||t},set:function(e,t){return e.style.cssText=t+""}}),b.support.optSelected||(b.propHooks.selected=b.extend(b.propHooks.selected,{get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}})),b.support.enctype||(b.propFix.enctype="encoding"),b.support.checkOn||b.each(["radio","checkbox"],function(){b.valHooks[this]={get:function(e){return null===e.getAttribute("value")?"on":e.value}}}),b.each(["radio","checkbox"],function(){b.valHooks[this]=b.extend(b.valHooks[this],{set:function(e,n){return b.isArray(n)?e.checked=b.inArray(b(e).val(),n)>=0:t}})});var Z=/^(?:input|select|textarea)$/i,et=/^key/,tt=/^(?:mouse|contextmenu)|click/,nt=/^(?:focusinfocus|focusoutblur)$/,rt=/^([^.]*)(?:\.(.+)|)$/;function it(){return!0}function ot(){return!1}b.event={global:{},add:function(e,n,r,o,a){var s,u,l,c,p,f,d,h,g,m,y,v=b._data(e);if(v){r.handler&&(c=r,r=c.handler,a=c.selector),r.guid||(r.guid=b.guid++),(u=v.events)||(u=v.events={}),(f=v.handle)||(f=v.handle=function(e){return typeof b===i||e&&b.event.triggered===e.type?t:b.event.dispatch.apply(f.elem,arguments)},f.elem=e),n=(n||"").match(w)||[""],l=n.length;while(l--)s=rt.exec(n[l])||[],g=y=s[1],m=(s[2]||"").split(".").sort(),p=b.event.special[g]||{},g=(a?p.delegateType:p.bindType)||g,p=b.event.special[g]||{},d=b.extend({type:g,origType:y,data:o,handler:r,guid:r.guid,selector:a,needsContext:a&&b.expr.match.needsContext.test(a),namespace:m.join(".")},c),(h=u[g])||(h=u[g]=[],h.delegateCount=0,p.setup&&p.setup.call(e,o,m,f)!==!1||(e.addEventListener?e.addEventListener(g,f,!1):e.attachEvent&&e.attachEvent("on"+g,f))),p.add&&(p.add.call(e,d),d.handler.guid||(d.handler.guid=r.guid)),a?h.splice(h.delegateCount++,0,d):h.push(d),b.event.global[g]=!0;e=null}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,p,f,d,h,g,m=b.hasData(e)&&b._data(e);if(m&&(c=m.events)){t=(t||"").match(w)||[""],l=t.length;while(l--)if(s=rt.exec(t[l])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d){p=b.event.special[d]||{},d=(r?p.delegateType:p.bindType)||d,f=c[d]||[],s=s[2]&&RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),u=o=f.length;while(o--)a=f[o],!i&&g!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&("**"!==r||!a.selector)||(f.splice(o,1),a.selector&&f.delegateCount--,p.remove&&p.remove.call(e,a));u&&!f.length&&(p.teardown&&p.teardown.call(e,h,m.handle)!==!1||b.removeEvent(e,d,m.handle),delete c[d])}else for(d in c)b.event.remove(e,d+t[l],n,r,!0);b.isEmptyObject(c)&&(delete m.handle,b._removeData(e,"events"))}},trigger:function(n,r,i,a){var s,u,l,c,p,f,d,h=[i||o],g=y.call(n,"type")?n.type:n,m=y.call(n,"namespace")?n.namespace.split("."):[];if(l=f=i=i||o,3!==i.nodeType&&8!==i.nodeType&&!nt.test(g+b.event.triggered)&&(g.indexOf(".")>=0&&(m=g.split("."),g=m.shift(),m.sort()),u=0>g.indexOf(":")&&"on"+g,n=n[b.expando]?n:new b.Event(g,"object"==typeof n&&n),n.isTrigger=!0,n.namespace=m.join("."),n.namespace_re=n.namespace?RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,n.result=t,n.target||(n.target=i),r=null==r?[n]:b.makeArray(r,[n]),p=b.event.special[g]||{},a||!p.trigger||p.trigger.apply(i,r)!==!1)){if(!a&&!p.noBubble&&!b.isWindow(i)){for(c=p.delegateType||g,nt.test(c+g)||(l=l.parentNode);l;l=l.parentNode)h.push(l),f=l;f===(i.ownerDocument||o)&&h.push(f.defaultView||f.parentWindow||e)}d=0;while((l=h[d++])&&!n.isPropagationStopped())n.type=d>1?c:p.bindType||g,s=(b._data(l,"events")||{})[n.type]&&b._data(l,"handle"),s&&s.apply(l,r),s=u&&l[u],s&&b.acceptData(l)&&s.apply&&s.apply(l,r)===!1&&n.preventDefault();if(n.type=g,!(a||n.isDefaultPrevented()||p._default&&p._default.apply(i.ownerDocument,r)!==!1||"click"===g&&b.nodeName(i,"a")||!b.acceptData(i)||!u||!i[g]||b.isWindow(i))){f=i[u],f&&(i[u]=null),b.event.triggered=g;try{i[g]()}catch(v){}b.event.triggered=t,f&&(i[u]=f)}return n.result}},dispatch:function(e){e=b.event.fix(e);var n,r,i,o,a,s=[],u=h.call(arguments),l=(b._data(this,"events")||{})[e.type]||[],c=b.event.special[e.type]||{};if(u[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){s=b.event.handlers.call(this,e,l),n=0;while((o=s[n++])&&!e.isPropagationStopped()){e.currentTarget=o.elem,a=0;while((i=o.handlers[a++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(i.namespace))&&(e.handleObj=i,e.data=i.data,r=((b.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,u),r!==t&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,n){var r,i,o,a,s=[],u=n.delegateCount,l=e.target;if(u&&l.nodeType&&(!e.button||"click"!==e.type))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==e.type)){for(o=[],a=0;u>a;a++)i=n[a],r=i.selector+" ",o[r]===t&&(o[r]=i.needsContext?b(r,this).index(l)>=0:b.find(r,this,null,[l]).length),o[r]&&o.push(i);o.length&&s.push({elem:l,handlers:o})}return n.length>u&&s.push({elem:this,handlers:n.slice(u)}),s},fix:function(e){if(e[b.expando])return e;var t,n,r,i=e.type,a=e,s=this.fixHooks[i];s||(this.fixHooks[i]=s=tt.test(i)?this.mouseHooks:et.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new b.Event(a),t=r.length;while(t--)n=r[t],e[n]=a[n];return e.target||(e.target=a.srcElement||o),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,a):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,n){var r,i,a,s=n.button,u=n.fromElement;return null==e.pageX&&null!=n.clientX&&(i=e.target.ownerDocument||o,a=i.documentElement,r=i.body,e.pageX=n.clientX+(a&&a.scrollLeft||r&&r.scrollLeft||0)-(a&&a.clientLeft||r&&r.clientLeft||0),e.pageY=n.clientY+(a&&a.scrollTop||r&&r.scrollTop||0)-(a&&a.clientTop||r&&r.clientTop||0)),!e.relatedTarget&&u&&(e.relatedTarget=u===e.target?n.toElement:u),e.which||s===t||(e.which=1&s?1:2&s?3:4&s?2:0),e}},special:{load:{noBubble:!0},click:{trigger:function(){return b.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):t}},focus:{trigger:function(){if(this!==o.activeElement&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){return this===o.activeElement&&this.blur?(this.blur(),!1):t},delegateType:"focusout"},beforeunload:{postDispatch:function(e){e.result!==t&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=b.extend(new b.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?b.event.trigger(i,null,t):b.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},b.removeEvent=o.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r="on"+t;e.detachEvent&&(typeof e[r]===i&&(e[r]=null),e.detachEvent(r,n))},b.Event=function(e,n){return this instanceof b.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.returnValue===!1||e.getPreventDefault&&e.getPreventDefault()?it:ot):this.type=e,n&&b.extend(this,n),this.timeStamp=e&&e.timeStamp||b.now(),this[b.expando]=!0,t):new b.Event(e,n)},b.Event.prototype={isDefaultPrevented:ot,isPropagationStopped:ot,isImmediatePropagationStopped:ot,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=it,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=it,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=it,this.stopPropagation()}},b.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(e,t){b.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;
return(!i||i!==r&&!b.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),b.support.submitBubbles||(b.event.special.submit={setup:function(){return b.nodeName(this,"form")?!1:(b.event.add(this,"click._submit keypress._submit",function(e){var n=e.target,r=b.nodeName(n,"input")||b.nodeName(n,"button")?n.form:t;r&&!b._data(r,"submitBubbles")&&(b.event.add(r,"submit._submit",function(e){e._submit_bubble=!0}),b._data(r,"submitBubbles",!0))}),t)},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&b.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){return b.nodeName(this,"form")?!1:(b.event.remove(this,"._submit"),t)}}),b.support.changeBubbles||(b.event.special.change={setup:function(){return Z.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(b.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),b.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),b.event.simulate("change",this,e,!0)})),!1):(b.event.add(this,"beforeactivate._change",function(e){var t=e.target;Z.test(t.nodeName)&&!b._data(t,"changeBubbles")&&(b.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||b.event.simulate("change",this.parentNode,e,!0)}),b._data(t,"changeBubbles",!0))}),t)},handle:function(e){var n=e.target;return this!==n||e.isSimulated||e.isTrigger||"radio"!==n.type&&"checkbox"!==n.type?e.handleObj.handler.apply(this,arguments):t},teardown:function(){return b.event.remove(this,"._change"),!Z.test(this.nodeName)}}),b.support.focusinBubbles||b.each({focus:"focusin",blur:"focusout"},function(e,t){var n=0,r=function(e){b.event.simulate(t,e.target,b.event.fix(e),!0)};b.event.special[t]={setup:function(){0===n++&&o.addEventListener(e,r,!0)},teardown:function(){0===--n&&o.removeEventListener(e,r,!0)}}}),b.fn.extend({on:function(e,n,r,i,o){var a,s;if("object"==typeof e){"string"!=typeof n&&(r=r||n,n=t);for(a in e)this.on(a,n,r,e[a],o);return this}if(null==r&&null==i?(i=n,r=n=t):null==i&&("string"==typeof n?(i=r,r=t):(i=r,r=n,n=t)),i===!1)i=ot;else if(!i)return this;return 1===o&&(s=i,i=function(e){return b().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=b.guid++)),this.each(function(){b.event.add(this,e,i,r,n)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,n,r){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,b(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,n,e[o]);return this}return(n===!1||"function"==typeof n)&&(r=n,n=t),r===!1&&(r=ot),this.each(function(){b.event.remove(this,e,r,n)})},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},trigger:function(e,t){return this.each(function(){b.event.trigger(e,t,this)})},triggerHandler:function(e,n){var r=this[0];return r?b.event.trigger(e,n,r,!0):t}}),function(e,t){var n,r,i,o,a,s,u,l,c,p,f,d,h,g,m,y,v,x="sizzle"+-new Date,w=e.document,T={},N=0,C=0,k=it(),E=it(),S=it(),A=typeof t,j=1<<31,D=[],L=D.pop,H=D.push,q=D.slice,M=D.indexOf||function(e){var t=0,n=this.length;for(;n>t;t++)if(this[t]===e)return t;return-1},_="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",O=F.replace("w","w#"),B="([*^$|!~]?=)",P="\\["+_+"*("+F+")"+_+"*(?:"+B+_+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+O+")|)|)"+_+"*\\]",R=":("+F+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+P.replace(3,8)+")*)|.*)\\)|)",W=RegExp("^"+_+"+|((?:^|[^\\\\])(?:\\\\.)*)"+_+"+$","g"),$=RegExp("^"+_+"*,"+_+"*"),I=RegExp("^"+_+"*([\\x20\\t\\r\\n\\f>+~])"+_+"*"),z=RegExp(R),X=RegExp("^"+O+"$"),U={ID:RegExp("^#("+F+")"),CLASS:RegExp("^\\.("+F+")"),NAME:RegExp("^\\[name=['\"]?("+F+")['\"]?\\]"),TAG:RegExp("^("+F.replace("w","w*")+")"),ATTR:RegExp("^"+P),PSEUDO:RegExp("^"+R),CHILD:RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+_+"*(even|odd|(([+-]|)(\\d*)n|)"+_+"*(?:([+-]|)"+_+"*(\\d+)|))"+_+"*\\)|)","i"),needsContext:RegExp("^"+_+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+_+"*((?:-\\d)?\\d*)"+_+"*\\)|)(?=[^-]|$)","i")},V=/[\x20\t\r\n\f]*[+~]/,Y=/^[^{]+\{\s*\[native code/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,G=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,K=/'|\\/g,Z=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,et=/\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,tt=function(e,t){var n="0x"+t-65536;return n!==n?t:0>n?String.fromCharCode(n+65536):String.fromCharCode(55296|n>>10,56320|1023&n)};try{q.call(w.documentElement.childNodes,0)[0].nodeType}catch(nt){q=function(e){var t,n=[];while(t=this[e++])n.push(t);return n}}function rt(e){return Y.test(e+"")}function it(){var e,t=[];return e=function(n,r){return t.push(n+=" ")>i.cacheLength&&delete e[t.shift()],e[n]=r}}function ot(e){return e[x]=!0,e}function at(e){var t=p.createElement("div");try{return e(t)}catch(n){return!1}finally{t=null}}function st(e,t,n,r){var i,o,a,s,u,l,f,g,m,v;if((t?t.ownerDocument||t:w)!==p&&c(t),t=t||p,n=n||[],!e||"string"!=typeof e)return n;if(1!==(s=t.nodeType)&&9!==s)return[];if(!d&&!r){if(i=J.exec(e))if(a=i[1]){if(9===s){if(o=t.getElementById(a),!o||!o.parentNode)return n;if(o.id===a)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(a))&&y(t,o)&&o.id===a)return n.push(o),n}else{if(i[2])return H.apply(n,q.call(t.getElementsByTagName(e),0)),n;if((a=i[3])&&T.getByClassName&&t.getElementsByClassName)return H.apply(n,q.call(t.getElementsByClassName(a),0)),n}if(T.qsa&&!h.test(e)){if(f=!0,g=x,m=t,v=9===s&&e,1===s&&"object"!==t.nodeName.toLowerCase()){l=ft(e),(f=t.getAttribute("id"))?g=f.replace(K,"\\$&"):t.setAttribute("id",g),g="[id='"+g+"'] ",u=l.length;while(u--)l[u]=g+dt(l[u]);m=V.test(e)&&t.parentNode||t,v=l.join(",")}if(v)try{return H.apply(n,q.call(m.querySelectorAll(v),0)),n}catch(b){}finally{f||t.removeAttribute("id")}}}return wt(e.replace(W,"$1"),t,n,r)}a=st.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},c=st.setDocument=function(e){var n=e?e.ownerDocument||e:w;return n!==p&&9===n.nodeType&&n.documentElement?(p=n,f=n.documentElement,d=a(n),T.tagNameNoComments=at(function(e){return e.appendChild(n.createComment("")),!e.getElementsByTagName("*").length}),T.attributes=at(function(e){e.innerHTML="<select></select>";var t=typeof e.lastChild.getAttribute("multiple");return"boolean"!==t&&"string"!==t}),T.getByClassName=at(function(e){return e.innerHTML="<div class='hidden e'></div><div class='hidden'></div>",e.getElementsByClassName&&e.getElementsByClassName("e").length?(e.lastChild.className="e",2===e.getElementsByClassName("e").length):!1}),T.getByName=at(function(e){e.id=x+0,e.innerHTML="<a name='"+x+"'></a><div name='"+x+"'></div>",f.insertBefore(e,f.firstChild);var t=n.getElementsByName&&n.getElementsByName(x).length===2+n.getElementsByName(x+0).length;return T.getIdNotName=!n.getElementById(x),f.removeChild(e),t}),i.attrHandle=at(function(e){return e.innerHTML="<a href='#'></a>",e.firstChild&&typeof e.firstChild.getAttribute!==A&&"#"===e.firstChild.getAttribute("href")})?{}:{href:function(e){return e.getAttribute("href",2)},type:function(e){return e.getAttribute("type")}},T.getIdNotName?(i.find.ID=function(e,t){if(typeof t.getElementById!==A&&!d){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},i.filter.ID=function(e){var t=e.replace(et,tt);return function(e){return e.getAttribute("id")===t}}):(i.find.ID=function(e,n){if(typeof n.getElementById!==A&&!d){var r=n.getElementById(e);return r?r.id===e||typeof r.getAttributeNode!==A&&r.getAttributeNode("id").value===e?[r]:t:[]}},i.filter.ID=function(e){var t=e.replace(et,tt);return function(e){var n=typeof e.getAttributeNode!==A&&e.getAttributeNode("id");return n&&n.value===t}}),i.find.TAG=T.tagNameNoComments?function(e,n){return typeof n.getElementsByTagName!==A?n.getElementsByTagName(e):t}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},i.find.NAME=T.getByName&&function(e,n){return typeof n.getElementsByName!==A?n.getElementsByName(name):t},i.find.CLASS=T.getByClassName&&function(e,n){return typeof n.getElementsByClassName===A||d?t:n.getElementsByClassName(e)},g=[],h=[":focus"],(T.qsa=rt(n.querySelectorAll))&&(at(function(e){e.innerHTML="<select><option selected=''></option></select>",e.querySelectorAll("[selected]").length||h.push("\\["+_+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),e.querySelectorAll(":checked").length||h.push(":checked")}),at(function(e){e.innerHTML="<input type='hidden' i=''/>",e.querySelectorAll("[i^='']").length&&h.push("[*^$]="+_+"*(?:\"\"|'')"),e.querySelectorAll(":enabled").length||h.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),h.push(",.*:")})),(T.matchesSelector=rt(m=f.matchesSelector||f.mozMatchesSelector||f.webkitMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&at(function(e){T.disconnectedMatch=m.call(e,"div"),m.call(e,"[s!='']:x"),g.push("!=",R)}),h=RegExp(h.join("|")),g=RegExp(g.join("|")),y=rt(f.contains)||f.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},v=f.compareDocumentPosition?function(e,t){var r;return e===t?(u=!0,0):(r=t.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(t))?1&r||e.parentNode&&11===e.parentNode.nodeType?e===n||y(w,e)?-1:t===n||y(w,t)?1:0:4&r?-1:1:e.compareDocumentPosition?-1:1}:function(e,t){var r,i=0,o=e.parentNode,a=t.parentNode,s=[e],l=[t];if(e===t)return u=!0,0;if(!o||!a)return e===n?-1:t===n?1:o?-1:a?1:0;if(o===a)return ut(e,t);r=e;while(r=r.parentNode)s.unshift(r);r=t;while(r=r.parentNode)l.unshift(r);while(s[i]===l[i])i++;return i?ut(s[i],l[i]):s[i]===w?-1:l[i]===w?1:0},u=!1,[0,0].sort(v),T.detectDuplicates=u,p):p},st.matches=function(e,t){return st(e,null,null,t)},st.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&c(e),t=t.replace(Z,"='$1']"),!(!T.matchesSelector||d||g&&g.test(t)||h.test(t)))try{var n=m.call(e,t);if(n||T.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(r){}return st(t,p,null,[e]).length>0},st.contains=function(e,t){return(e.ownerDocument||e)!==p&&c(e),y(e,t)},st.attr=function(e,t){var n;return(e.ownerDocument||e)!==p&&c(e),d||(t=t.toLowerCase()),(n=i.attrHandle[t])?n(e):d||T.attributes?e.getAttribute(t):((n=e.getAttributeNode(t))||e.getAttribute(t))&&e[t]===!0?t:n&&n.specified?n.value:null},st.error=function(e){throw Error("Syntax error, unrecognized expression: "+e)},st.uniqueSort=function(e){var t,n=[],r=1,i=0;if(u=!T.detectDuplicates,e.sort(v),u){for(;t=e[r];r++)t===e[r-1]&&(i=n.push(r));while(i--)e.splice(n[i],1)}return e};function ut(e,t){var n=t&&e,r=n&&(~t.sourceIndex||j)-(~e.sourceIndex||j);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function lt(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function ct(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function pt(e){return ot(function(t){return t=+t,ot(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}o=st.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=o(t);return n},i=st.selectors={cacheLength:50,createPseudo:ot,match:U,find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(et,tt),e[3]=(e[4]||e[5]||"").replace(et,tt),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||st.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&st.error(e[0]),e},PSEUDO:function(e){var t,n=!e[5]&&e[2];return U.CHILD.test(e[0])?null:(e[4]?e[2]=e[4]:n&&z.test(n)&&(t=ft(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){return"*"===e?function(){return!0}:(e=e.replace(et,tt).toLowerCase(),function(t){return t.nodeName&&t.nodeName.toLowerCase()===e})},CLASS:function(e){var t=k[e+" "];return t||(t=RegExp("(^|"+_+")"+e+"("+_+"|$)"))&&k(e,function(e){return t.test(e.className||typeof e.getAttribute!==A&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=st.attr(r,e);return null==i?"!="===t:t?(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i+" ").indexOf(n)>-1:"|="===t?i===n||i.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,p,f,d,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!u&&!s;if(m){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&v){c=m[x]||(m[x]={}),l=c[e]||[],d=l[0]===N&&l[1],f=l[0]===N&&l[2],p=d&&m.childNodes[d];while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if(1===p.nodeType&&++f&&p===t){c[e]=[N,d,f];break}}else if(v&&(l=(t[x]||(t[x]={}))[e])&&l[0]===N)f=l[1];else while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===y:1===p.nodeType)&&++f&&(v&&((p[x]||(p[x]={}))[e]=[N,f]),p===t))break;return f-=i,f===r||0===f%r&&f/r>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||st.error("unsupported pseudo: "+e);return r[x]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ot(function(e,n){var i,o=r(e,t),a=o.length;while(a--)i=M.call(e,o[a]),e[i]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ot(function(e){var t=[],n=[],r=s(e.replace(W,"$1"));return r[x]?ot(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:ot(function(e){return function(t){return st(e,t).length>0}}),contains:ot(function(e){return function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:ot(function(e){return X.test(e||"")||st.error("unsupported lang: "+e),e=e.replace(et,tt).toLowerCase(),function(t){var n;do if(n=d?t.getAttribute("xml:lang")||t.getAttribute("lang"):t.lang)return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>"@"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||t.toLowerCase()===e.type)},first:pt(function(){return[0]}),last:pt(function(e,t){return[t-1]}),eq:pt(function(e,t,n){return[0>n?n+t:n]}),even:pt(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:pt(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:pt(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:pt(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}};for(n in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[n]=lt(n);for(n in{submit:!0,reset:!0})i.pseudos[n]=ct(n);function ft(e,t){var n,r,o,a,s,u,l,c=E[e+" "];if(c)return t?0:c.slice(0);s=e,u=[],l=i.preFilter;while(s){(!n||(r=$.exec(s)))&&(r&&(s=s.slice(r[0].length)||s),u.push(o=[])),n=!1,(r=I.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(W," ")}),s=s.slice(n.length));for(a in i.filter)!(r=U[a].exec(s))||l[a]&&!(r=l[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?st.error(e):E(e,u).slice(0)}function dt(e){var t=0,n=e.length,r="";for(;n>t;t++)r+=e[t].value;return r}function ht(e,t,n){var i=t.dir,o=n&&"parentNode"===i,a=C++;return t.first?function(t,n,r){while(t=t[i])if(1===t.nodeType||o)return e(t,n,r)}:function(t,n,s){var u,l,c,p=N+" "+a;if(s){while(t=t[i])if((1===t.nodeType||o)&&e(t,n,s))return!0}else while(t=t[i])if(1===t.nodeType||o)if(c=t[x]||(t[x]={}),(l=c[i])&&l[0]===p){if((u=l[1])===!0||u===r)return u===!0}else if(l=c[i]=[p],l[1]=e(t,n,s)||r,l[1]===!0)return!0}}function gt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function mt(e,t,n,r,i){var o,a=[],s=0,u=e.length,l=null!=t;for(;u>s;s++)(o=e[s])&&(!n||n(o,r,i))&&(a.push(o),l&&t.push(s));return a}function yt(e,t,n,r,i,o){return r&&!r[x]&&(r=yt(r)),i&&!i[x]&&(i=yt(i,o)),ot(function(o,a,s,u){var l,c,p,f=[],d=[],h=a.length,g=o||xt(t||"*",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:mt(g,f,e,s,u),y=n?i||(o?e:h||r)?[]:a:m;if(n&&n(m,y,s,u),r){l=mt(y,d),r(l,[],s,u),c=l.length;while(c--)(p=l[c])&&(y[d[c]]=!(m[d[c]]=p))}if(o){if(i||e){if(i){l=[],c=y.length;while(c--)(p=y[c])&&l.push(m[c]=p);i(null,y=[],l,u)}c=y.length;while(c--)(p=y[c])&&(l=i?M.call(o,p):f[c])>-1&&(o[l]=!(a[l]=p))}}else y=mt(y===a?y.splice(h,y.length):y),i?i(null,a,y,u):H.apply(a,y)})}function vt(e){var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],u=a?1:0,c=ht(function(e){return e===t},s,!0),p=ht(function(e){return M.call(t,e)>-1},s,!0),f=[function(e,n,r){return!a&&(r||n!==l)||((t=n).nodeType?c(e,n,r):p(e,n,r))}];for(;o>u;u++)if(n=i.relative[e[u].type])f=[ht(gt(f),n)];else{if(n=i.filter[e[u].type].apply(null,e[u].matches),n[x]){for(r=++u;o>r;r++)if(i.relative[e[r].type])break;return yt(u>1&&gt(f),u>1&&dt(e.slice(0,u-1)).replace(W,"$1"),n,r>u&&vt(e.slice(u,r)),o>r&&vt(e=e.slice(r)),o>r&&dt(e))}f.push(n)}return gt(f)}function bt(e,t){var n=0,o=t.length>0,a=e.length>0,s=function(s,u,c,f,d){var h,g,m,y=[],v=0,b="0",x=s&&[],w=null!=d,T=l,C=s||a&&i.find.TAG("*",d&&u.parentNode||u),k=N+=null==T?1:Math.random()||.1;for(w&&(l=u!==p&&u,r=n);null!=(h=C[b]);b++){if(a&&h){g=0;while(m=e[g++])if(m(h,u,c)){f.push(h);break}w&&(N=k,r=++n)}o&&((h=!m&&h)&&v--,s&&x.push(h))}if(v+=b,o&&b!==v){g=0;while(m=t[g++])m(x,y,u,c);if(s){if(v>0)while(b--)x[b]||y[b]||(y[b]=L.call(f));y=mt(y)}H.apply(f,y),w&&!s&&y.length>0&&v+t.length>1&&st.uniqueSort(f)}return w&&(N=k,l=T),x};return o?ot(s):s}s=st.compile=function(e,t){var n,r=[],i=[],o=S[e+" "];if(!o){t||(t=ft(e)),n=t.length;while(n--)o=vt(t[n]),o[x]?r.push(o):i.push(o);o=S(e,bt(i,r))}return o};function xt(e,t,n){var r=0,i=t.length;for(;i>r;r++)st(e,t[r],n);return n}function wt(e,t,n,r){var o,a,u,l,c,p=ft(e);if(!r&&1===p.length){if(a=p[0]=p[0].slice(0),a.length>2&&"ID"===(u=a[0]).type&&9===t.nodeType&&!d&&i.relative[a[1].type]){if(t=i.find.ID(u.matches[0].replace(et,tt),t)[0],!t)return n;e=e.slice(a.shift().value.length)}o=U.needsContext.test(e)?0:a.length;while(o--){if(u=a[o],i.relative[l=u.type])break;if((c=i.find[l])&&(r=c(u.matches[0].replace(et,tt),V.test(a[0].type)&&t.parentNode||t))){if(a.splice(o,1),e=r.length&&dt(a),!e)return H.apply(n,q.call(r,0)),n;break}}}return s(e,p)(r,t,d,n,V.test(e)),n}i.pseudos.nth=i.pseudos.eq;function Tt(){}i.filters=Tt.prototype=i.pseudos,i.setFilters=new Tt,c(),st.attr=b.attr,b.find=st,b.expr=st.selectors,b.expr[":"]=b.expr.pseudos,b.unique=st.uniqueSort,b.text=st.getText,b.isXMLDoc=st.isXML,b.contains=st.contains}(e);var at=/Until$/,st=/^(?:parents|prev(?:Until|All))/,ut=/^.[^:#\[\.,]*$/,lt=b.expr.match.needsContext,ct={children:!0,contents:!0,next:!0,prev:!0};b.fn.extend({find:function(e){var t,n,r,i=this.length;if("string"!=typeof e)return r=this,this.pushStack(b(e).filter(function(){for(t=0;i>t;t++)if(b.contains(r[t],this))return!0}));for(n=[],t=0;i>t;t++)b.find(e,this[t],n);return n=this.pushStack(i>1?b.unique(n):n),n.selector=(this.selector?this.selector+" ":"")+e,n},has:function(e){var t,n=b(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(b.contains(this,n[t]))return!0})},not:function(e){return this.pushStack(ft(this,e,!1))},filter:function(e){return this.pushStack(ft(this,e,!0))},is:function(e){return!!e&&("string"==typeof e?lt.test(e)?b(e,this.context).index(this[0])>=0:b.filter(e,this).length>0:this.filter(e).length>0)},closest:function(e,t){var n,r=0,i=this.length,o=[],a=lt.test(e)||"string"!=typeof e?b(e,t||this.context):0;for(;i>r;r++){n=this[r];while(n&&n.ownerDocument&&n!==t&&11!==n.nodeType){if(a?a.index(n)>-1:b.find.matchesSelector(n,e)){o.push(n);break}n=n.parentNode}}return this.pushStack(o.length>1?b.unique(o):o)},index:function(e){return e?"string"==typeof e?b.inArray(this[0],b(e)):b.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n="string"==typeof e?b(e,t):b.makeArray(e&&e.nodeType?[e]:e),r=b.merge(this.get(),n);return this.pushStack(b.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),b.fn.andSelf=b.fn.addBack;function pt(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}b.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return b.dir(e,"parentNode")},parentsUntil:function(e,t,n){return b.dir(e,"parentNode",n)},next:function(e){return pt(e,"nextSibling")},prev:function(e){return pt(e,"previousSibling")},nextAll:function(e){return b.dir(e,"nextSibling")},prevAll:function(e){return b.dir(e,"previousSibling")},nextUntil:function(e,t,n){return b.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return b.dir(e,"previousSibling",n)},siblings:function(e){return b.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return b.sibling(e.firstChild)},contents:function(e){return b.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:b.merge([],e.childNodes)}},function(e,t){b.fn[e]=function(n,r){var i=b.map(this,t,n);return at.test(e)||(r=n),r&&"string"==typeof r&&(i=b.filter(r,i)),i=this.length>1&&!ct[e]?b.unique(i):i,this.length>1&&st.test(e)&&(i=i.reverse()),this.pushStack(i)}}),b.extend({filter:function(e,t,n){return n&&(e=":not("+e+")"),1===t.length?b.find.matchesSelector(t[0],e)?[t[0]]:[]:b.find.matches(e,t)},dir:function(e,n,r){var i=[],o=e[n];while(o&&9!==o.nodeType&&(r===t||1!==o.nodeType||!b(o).is(r)))1===o.nodeType&&i.push(o),o=o[n];return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function ft(e,t,n){if(t=t||0,b.isFunction(t))return b.grep(e,function(e,r){var i=!!t.call(e,r,e);return i===n});if(t.nodeType)return b.grep(e,function(e){return e===t===n});if("string"==typeof t){var r=b.grep(e,function(e){return 1===e.nodeType});if(ut.test(t))return b.filter(t,r,!n);t=b.filter(t,r)}return b.grep(e,function(e){return b.inArray(e,t)>=0===n})}function dt(e){var t=ht.split("|"),n=e.createDocumentFragment();if(n.createElement)while(t.length)n.createElement(t.pop());return n}var ht="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",gt=/ jQuery\d+="(?:null|\d+)"/g,mt=RegExp("<(?:"+ht+")[\\s/>]","i"),yt=/^\s+/,vt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bt=/<([\w:]+)/,xt=/<tbody/i,wt=/<|&#?\w+;/,Tt=/<(?:script|style|link)/i,Nt=/^(?:checkbox|radio)$/i,Ct=/checked\s*(?:[^=]|=\s*.checked.)/i,kt=/^$|\/(?:java|ecma)script/i,Et=/^true\/(.*)/,St=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,At={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:b.support.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},jt=dt(o),Dt=jt.appendChild(o.createElement("div"));At.optgroup=At.option,At.tbody=At.tfoot=At.colgroup=At.caption=At.thead,At.th=At.td,b.fn.extend({text:function(e){return b.access(this,function(e){return e===t?b.text(this):this.empty().append((this[0]&&this[0].ownerDocument||o).createTextNode(e))},null,e,arguments.length)},wrapAll:function(e){if(b.isFunction(e))return this.each(function(t){b(this).wrapAll(e.call(this,t))});if(this[0]){var t=b(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstChild&&1===e.firstChild.nodeType)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return b.isFunction(e)?this.each(function(t){b(this).wrapInner(e.call(this,t))}):this.each(function(){var t=b(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=b.isFunction(e);return this.each(function(n){b(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){b.nodeName(this,"body")||b(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(e){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&this.appendChild(e)})},prepend:function(){return this.domManip(arguments,!0,function(e){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&this.insertBefore(e,this.firstChild)})},before:function(){return this.domManip(arguments,!1,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,!1,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=0;for(;null!=(n=this[r]);r++)(!e||b.filter(e,[n]).length>0)&&(t||1!==n.nodeType||b.cleanData(Ot(n)),n.parentNode&&(t&&b.contains(n.ownerDocument,n)&&Mt(Ot(n,"script")),n.parentNode.removeChild(n)));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++){1===e.nodeType&&b.cleanData(Ot(e,!1));while(e.firstChild)e.removeChild(e.firstChild);e.options&&b.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return b.clone(this,e,t)})},html:function(e){return b.access(this,function(e){var n=this[0]||{},r=0,i=this.length;if(e===t)return 1===n.nodeType?n.innerHTML.replace(gt,""):t;if(!("string"!=typeof e||Tt.test(e)||!b.support.htmlSerialize&&mt.test(e)||!b.support.leadingWhitespace&&yt.test(e)||At[(bt.exec(e)||["",""])[1].toLowerCase()])){e=e.replace(vt,"<$1></$2>");try{for(;i>r;r++)n=this[r]||{},1===n.nodeType&&(b.cleanData(Ot(n,!1)),n.innerHTML=e);n=0}catch(o){}}n&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(e){var t=b.isFunction(e);return t||"string"==typeof e||(e=b(e).not(this).detach()),this.domManip([e],!0,function(e){var t=this.nextSibling,n=this.parentNode;n&&(b(this).remove(),n.insertBefore(e,t))})},detach:function(e){return this.remove(e,!0)},domManip:function(e,n,r){e=f.apply([],e);var i,o,a,s,u,l,c=0,p=this.length,d=this,h=p-1,g=e[0],m=b.isFunction(g);if(m||!(1>=p||"string"!=typeof g||b.support.checkClone)&&Ct.test(g))return this.each(function(i){var o=d.eq(i);m&&(e[0]=g.call(this,i,n?o.html():t)),o.domManip(e,n,r)});if(p&&(l=b.buildFragment(e,this[0].ownerDocument,!1,this),i=l.firstChild,1===l.childNodes.length&&(l=i),i)){for(n=n&&b.nodeName(i,"tr"),s=b.map(Ot(l,"script"),Ht),a=s.length;p>c;c++)o=l,c!==h&&(o=b.clone(o,!0,!0),a&&b.merge(s,Ot(o,"script"))),r.call(n&&b.nodeName(this[c],"table")?Lt(this[c],"tbody"):this[c],o,c);if(a)for(u=s[s.length-1].ownerDocument,b.map(s,qt),c=0;a>c;c++)o=s[c],kt.test(o.type||"")&&!b._data(o,"globalEval")&&b.contains(u,o)&&(o.src?b.ajax({url:o.src,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0}):b.globalEval((o.text||o.textContent||o.innerHTML||"").replace(St,"")));l=i=null}return this}});function Lt(e,t){return e.getElementsByTagName(t)[0]||e.appendChild(e.ownerDocument.createElement(t))}function Ht(e){var t=e.getAttributeNode("type");return e.type=(t&&t.specified)+"/"+e.type,e}function qt(e){var t=Et.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function Mt(e,t){var n,r=0;for(;null!=(n=e[r]);r++)b._data(n,"globalEval",!t||b._data(t[r],"globalEval"))}function _t(e,t){if(1===t.nodeType&&b.hasData(e)){var n,r,i,o=b._data(e),a=b._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i>r;r++)b.event.add(t,n,s[n][r])}a.data&&(a.data=b.extend({},a.data))}}function Ft(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!b.support.noCloneEvent&&t[b.expando]){i=b._data(t);for(r in i.events)b.removeEvent(t,r,i.handle);t.removeAttribute(b.expando)}"script"===n&&t.text!==e.text?(Ht(t).text=e.text,qt(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),b.support.html5Clone&&e.innerHTML&&!b.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Nt.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}}b.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){b.fn[e]=function(e){var n,r=0,i=[],o=b(e),a=o.length-1;for(;a>=r;r++)n=r===a?this:this.clone(!0),b(o[r])[t](n),d.apply(i,n.get());return this.pushStack(i)}});function Ot(e,n){var r,o,a=0,s=typeof e.getElementsByTagName!==i?e.getElementsByTagName(n||"*"):typeof e.querySelectorAll!==i?e.querySelectorAll(n||"*"):t;if(!s)for(s=[],r=e.childNodes||e;null!=(o=r[a]);a++)!n||b.nodeName(o,n)?s.push(o):b.merge(s,Ot(o,n));return n===t||n&&b.nodeName(e,n)?b.merge([e],s):s}function Bt(e){Nt.test(e.type)&&(e.defaultChecked=e.checked)}b.extend({clone:function(e,t,n){var r,i,o,a,s,u=b.contains(e.ownerDocument,e);if(b.support.html5Clone||b.isXMLDoc(e)||!mt.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(Dt.innerHTML=e.outerHTML,Dt.removeChild(o=Dt.firstChild)),!(b.support.noCloneEvent&&b.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(r=Ot(o),s=Ot(e),a=0;null!=(i=s[a]);++a)r[a]&&Ft(i,r[a]);if(t)if(n)for(s=s||Ot(e),r=r||Ot(o),a=0;null!=(i=s[a]);a++)_t(i,r[a]);else _t(e,o);return r=Ot(o,"script"),r.length>0&&Mt(r,!u&&Ot(e,"script")),r=s=i=null,o},buildFragment:function(e,t,n,r){var i,o,a,s,u,l,c,p=e.length,f=dt(t),d=[],h=0;for(;p>h;h++)if(o=e[h],o||0===o)if("object"===b.type(o))b.merge(d,o.nodeType?[o]:o);else if(wt.test(o)){s=s||f.appendChild(t.createElement("div")),u=(bt.exec(o)||["",""])[1].toLowerCase(),c=At[u]||At._default,s.innerHTML=c[1]+o.replace(vt,"<$1></$2>")+c[2],i=c[0];while(i--)s=s.lastChild;if(!b.support.leadingWhitespace&&yt.test(o)&&d.push(t.createTextNode(yt.exec(o)[0])),!b.support.tbody){o="table"!==u||xt.test(o)?"<table>"!==c[1]||xt.test(o)?0:s:s.firstChild,i=o&&o.childNodes.length;while(i--)b.nodeName(l=o.childNodes[i],"tbody")&&!l.childNodes.length&&o.removeChild(l)
}b.merge(d,s.childNodes),s.textContent="";while(s.firstChild)s.removeChild(s.firstChild);s=f.lastChild}else d.push(t.createTextNode(o));s&&f.removeChild(s),b.support.appendChecked||b.grep(Ot(d,"input"),Bt),h=0;while(o=d[h++])if((!r||-1===b.inArray(o,r))&&(a=b.contains(o.ownerDocument,o),s=Ot(f.appendChild(o),"script"),a&&Mt(s),n)){i=0;while(o=s[i++])kt.test(o.type||"")&&n.push(o)}return s=null,f},cleanData:function(e,t){var n,r,o,a,s=0,u=b.expando,l=b.cache,p=b.support.deleteExpando,f=b.event.special;for(;null!=(n=e[s]);s++)if((t||b.acceptData(n))&&(o=n[u],a=o&&l[o])){if(a.events)for(r in a.events)f[r]?b.event.remove(n,r):b.removeEvent(n,r,a.handle);l[o]&&(delete l[o],p?delete n[u]:typeof n.removeAttribute!==i?n.removeAttribute(u):n[u]=null,c.push(o))}}});var Pt,Rt,Wt,$t=/alpha\([^)]*\)/i,It=/opacity\s*=\s*([^)]*)/,zt=/^(top|right|bottom|left)$/,Xt=/^(none|table(?!-c[ea]).+)/,Ut=/^margin/,Vt=RegExp("^("+x+")(.*)$","i"),Yt=RegExp("^("+x+")(?!px)[a-z%]+$","i"),Jt=RegExp("^([+-])=("+x+")","i"),Gt={BODY:"block"},Qt={position:"absolute",visibility:"hidden",display:"block"},Kt={letterSpacing:0,fontWeight:400},Zt=["Top","Right","Bottom","Left"],en=["Webkit","O","Moz","ms"];function tn(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=en.length;while(i--)if(t=en[i]+n,t in e)return t;return r}function nn(e,t){return e=t||e,"none"===b.css(e,"display")||!b.contains(e.ownerDocument,e)}function rn(e,t){var n,r,i,o=[],a=0,s=e.length;for(;s>a;a++)r=e[a],r.style&&(o[a]=b._data(r,"olddisplay"),n=r.style.display,t?(o[a]||"none"!==n||(r.style.display=""),""===r.style.display&&nn(r)&&(o[a]=b._data(r,"olddisplay",un(r.nodeName)))):o[a]||(i=nn(r),(n&&"none"!==n||!i)&&b._data(r,"olddisplay",i?n:b.css(r,"display"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[a]||"":"none"));return e}b.fn.extend({css:function(e,n){return b.access(this,function(e,n,r){var i,o,a={},s=0;if(b.isArray(n)){for(o=Rt(e),i=n.length;i>s;s++)a[n[s]]=b.css(e,n[s],!1,o);return a}return r!==t?b.style(e,n,r):b.css(e,n)},e,n,arguments.length>1)},show:function(){return rn(this,!0)},hide:function(){return rn(this)},toggle:function(e){var t="boolean"==typeof e;return this.each(function(){(t?e:nn(this))?b(this).show():b(this).hide()})}}),b.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Wt(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":b.support.cssFloat?"cssFloat":"styleFloat"},style:function(e,n,r,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,a,s,u=b.camelCase(n),l=e.style;if(n=b.cssProps[u]||(b.cssProps[u]=tn(l,u)),s=b.cssHooks[n]||b.cssHooks[u],r===t)return s&&"get"in s&&(o=s.get(e,!1,i))!==t?o:l[n];if(a=typeof r,"string"===a&&(o=Jt.exec(r))&&(r=(o[1]+1)*o[2]+parseFloat(b.css(e,n)),a="number"),!(null==r||"number"===a&&isNaN(r)||("number"!==a||b.cssNumber[u]||(r+="px"),b.support.clearCloneStyle||""!==r||0!==n.indexOf("background")||(l[n]="inherit"),s&&"set"in s&&(r=s.set(e,r,i))===t)))try{l[n]=r}catch(c){}}},css:function(e,n,r,i){var o,a,s,u=b.camelCase(n);return n=b.cssProps[u]||(b.cssProps[u]=tn(e.style,u)),s=b.cssHooks[n]||b.cssHooks[u],s&&"get"in s&&(a=s.get(e,!0,r)),a===t&&(a=Wt(e,n,i)),"normal"===a&&n in Kt&&(a=Kt[n]),""===r||r?(o=parseFloat(a),r===!0||b.isNumeric(o)?o||0:a):a},swap:function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i}}),e.getComputedStyle?(Rt=function(t){return e.getComputedStyle(t,null)},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),u=s?s.getPropertyValue(n)||s[n]:t,l=e.style;return s&&(""!==u||b.contains(e.ownerDocument,e)||(u=b.style(e,n)),Yt.test(u)&&Ut.test(n)&&(i=l.width,o=l.minWidth,a=l.maxWidth,l.minWidth=l.maxWidth=l.width=u,u=s.width,l.width=i,l.minWidth=o,l.maxWidth=a)),u}):o.documentElement.currentStyle&&(Rt=function(e){return e.currentStyle},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),u=s?s[n]:t,l=e.style;return null==u&&l&&l[n]&&(u=l[n]),Yt.test(u)&&!zt.test(n)&&(i=l.left,o=e.runtimeStyle,a=o&&o.left,a&&(o.left=e.currentStyle.left),l.left="fontSize"===n?"1em":u,u=l.pixelLeft+"px",l.left=i,a&&(o.left=a)),""===u?"auto":u});function on(e,t,n){var r=Vt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function an(e,t,n,r,i){var o=n===(r?"border":"content")?4:"width"===t?1:0,a=0;for(;4>o;o+=2)"margin"===n&&(a+=b.css(e,n+Zt[o],!0,i)),r?("content"===n&&(a-=b.css(e,"padding"+Zt[o],!0,i)),"margin"!==n&&(a-=b.css(e,"border"+Zt[o]+"Width",!0,i))):(a+=b.css(e,"padding"+Zt[o],!0,i),"padding"!==n&&(a+=b.css(e,"border"+Zt[o]+"Width",!0,i)));return a}function sn(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=Rt(e),a=b.support.boxSizing&&"border-box"===b.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=Wt(e,t,o),(0>i||null==i)&&(i=e.style[t]),Yt.test(i))return i;r=a&&(b.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+an(e,t,n||(a?"border":"content"),r,o)+"px"}function un(e){var t=o,n=Gt[e];return n||(n=ln(e,t),"none"!==n&&n||(Pt=(Pt||b("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(t.documentElement),t=(Pt[0].contentWindow||Pt[0].contentDocument).document,t.write("<!doctype html><html><body>"),t.close(),n=ln(e,t),Pt.detach()),Gt[e]=n),n}function ln(e,t){var n=b(t.createElement(e)).appendTo(t.body),r=b.css(n[0],"display");return n.remove(),r}b.each(["height","width"],function(e,n){b.cssHooks[n]={get:function(e,r,i){return r?0===e.offsetWidth&&Xt.test(b.css(e,"display"))?b.swap(e,Qt,function(){return sn(e,n,i)}):sn(e,n,i):t},set:function(e,t,r){var i=r&&Rt(e);return on(e,t,r?an(e,n,r,b.support.boxSizing&&"border-box"===b.css(e,"boxSizing",!1,i),i):0)}}}),b.support.opacity||(b.cssHooks.opacity={get:function(e,t){return It.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=b.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===b.trim(o.replace($t,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=$t.test(o)?o.replace($t,i):o+" "+i)}}),b(function(){b.support.reliableMarginRight||(b.cssHooks.marginRight={get:function(e,n){return n?b.swap(e,{display:"inline-block"},Wt,[e,"marginRight"]):t}}),!b.support.pixelPosition&&b.fn.position&&b.each(["top","left"],function(e,n){b.cssHooks[n]={get:function(e,r){return r?(r=Wt(e,n),Yt.test(r)?b(e).position()[n]+"px":r):t}}})}),b.expr&&b.expr.filters&&(b.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight||!b.support.reliableHiddenOffsets&&"none"===(e.style&&e.style.display||b.css(e,"display"))},b.expr.filters.visible=function(e){return!b.expr.filters.hidden(e)}),b.each({margin:"",padding:"",border:"Width"},function(e,t){b.cssHooks[e+t]={expand:function(n){var r=0,i={},o="string"==typeof n?n.split(" "):[n];for(;4>r;r++)i[e+Zt[r]+t]=o[r]||o[r-2]||o[0];return i}},Ut.test(e)||(b.cssHooks[e+t].set=on)});var cn=/%20/g,pn=/\[\]$/,fn=/\r?\n/g,dn=/^(?:submit|button|image|reset|file)$/i,hn=/^(?:input|select|textarea|keygen)/i;b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=b.prop(this,"elements");return e?b.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!b(this).is(":disabled")&&hn.test(this.nodeName)&&!dn.test(e)&&(this.checked||!Nt.test(e))}).map(function(e,t){var n=b(this).val();return null==n?null:b.isArray(n)?b.map(n,function(e){return{name:t.name,value:e.replace(fn,"\r\n")}}):{name:t.name,value:n.replace(fn,"\r\n")}}).get()}}),b.param=function(e,n){var r,i=[],o=function(e,t){t=b.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(n===t&&(n=b.ajaxSettings&&b.ajaxSettings.traditional),b.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,function(){o(this.name,this.value)});else for(r in e)gn(r,e[r],n,o);return i.join("&").replace(cn,"+")};function gn(e,t,n,r){var i;if(b.isArray(t))b.each(t,function(t,i){n||pn.test(e)?r(e,i):gn(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==b.type(t))r(e,t);else for(i in t)gn(e+"["+i+"]",t[i],n,r)}b.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){b.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),b.fn.hover=function(e,t){return this.mouseenter(e).mouseleave(t||e)};var mn,yn,vn=b.now(),bn=/\?/,xn=/#.*$/,wn=/([?&])_=[^&]*/,Tn=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Nn=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Cn=/^(?:GET|HEAD)$/,kn=/^\/\//,En=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,Sn=b.fn.load,An={},jn={},Dn="*/".concat("*");try{yn=a.href}catch(Ln){yn=o.createElement("a"),yn.href="",yn=yn.href}mn=En.exec(yn.toLowerCase())||[];function Hn(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(w)||[];if(b.isFunction(n))while(r=o[i++])"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qn(e,n,r,i){var o={},a=e===jn;function s(u){var l;return o[u]=!0,b.each(e[u]||[],function(e,u){var c=u(n,r,i);return"string"!=typeof c||a||o[c]?a?!(l=c):t:(n.dataTypes.unshift(c),s(c),!1)}),l}return s(n.dataTypes[0])||!o["*"]&&s("*")}function Mn(e,n){var r,i,o=b.ajaxSettings.flatOptions||{};for(i in n)n[i]!==t&&((o[i]?e:r||(r={}))[i]=n[i]);return r&&b.extend(!0,e,r),e}b.fn.load=function(e,n,r){if("string"!=typeof e&&Sn)return Sn.apply(this,arguments);var i,o,a,s=this,u=e.indexOf(" ");return u>=0&&(i=e.slice(u,e.length),e=e.slice(0,u)),b.isFunction(n)?(r=n,n=t):n&&"object"==typeof n&&(a="POST"),s.length>0&&b.ajax({url:e,type:a,dataType:"html",data:n}).done(function(e){o=arguments,s.html(i?b("<div>").append(b.parseHTML(e)).find(i):e)}).complete(r&&function(e,t){s.each(r,o||[e.responseText,t,e])}),this},b.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){b.fn[t]=function(e){return this.on(t,e)}}),b.each(["get","post"],function(e,n){b[n]=function(e,r,i,o){return b.isFunction(r)&&(o=o||i,i=r,r=t),b.ajax({url:e,type:n,dataType:o,data:r,success:i})}}),b.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:yn,type:"GET",isLocal:Nn.test(mn[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Dn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":e.String,"text html":!0,"text json":b.parseJSON,"text xml":b.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Mn(Mn(e,b.ajaxSettings),t):Mn(b.ajaxSettings,e)},ajaxPrefilter:Hn(An),ajaxTransport:Hn(jn),ajax:function(e,n){"object"==typeof e&&(n=e,e=t),n=n||{};var r,i,o,a,s,u,l,c,p=b.ajaxSetup({},n),f=p.context||p,d=p.context&&(f.nodeType||f.jquery)?b(f):b.event,h=b.Deferred(),g=b.Callbacks("once memory"),m=p.statusCode||{},y={},v={},x=0,T="canceled",N={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!c){c={};while(t=Tn.exec(a))c[t[1].toLowerCase()]=t[2]}t=c[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=v[n]=v[n]||e,y[e]=t),this},overrideMimeType:function(e){return x||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>x)for(t in e)m[t]=[m[t],e[t]];else N.always(e[N.status]);return this},abort:function(e){var t=e||T;return l&&l.abort(t),k(0,t),this}};if(h.promise(N).complete=g.add,N.success=N.done,N.error=N.fail,p.url=((e||p.url||yn)+"").replace(xn,"").replace(kn,mn[1]+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=b.trim(p.dataType||"*").toLowerCase().match(w)||[""],null==p.crossDomain&&(r=En.exec(p.url.toLowerCase()),p.crossDomain=!(!r||r[1]===mn[1]&&r[2]===mn[2]&&(r[3]||("http:"===r[1]?80:443))==(mn[3]||("http:"===mn[1]?80:443)))),p.data&&p.processData&&"string"!=typeof p.data&&(p.data=b.param(p.data,p.traditional)),qn(An,p,n,N),2===x)return N;u=p.global,u&&0===b.active++&&b.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Cn.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(bn.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=wn.test(o)?o.replace(wn,"$1_="+vn++):o+(bn.test(o)?"&":"?")+"_="+vn++)),p.ifModified&&(b.lastModified[o]&&N.setRequestHeader("If-Modified-Since",b.lastModified[o]),b.etag[o]&&N.setRequestHeader("If-None-Match",b.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&N.setRequestHeader("Content-Type",p.contentType),N.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Dn+"; q=0.01":""):p.accepts["*"]);for(i in p.headers)N.setRequestHeader(i,p.headers[i]);if(p.beforeSend&&(p.beforeSend.call(f,N,p)===!1||2===x))return N.abort();T="abort";for(i in{success:1,error:1,complete:1})N[i](p[i]);if(l=qn(jn,p,n,N)){N.readyState=1,u&&d.trigger("ajaxSend",[N,p]),p.async&&p.timeout>0&&(s=setTimeout(function(){N.abort("timeout")},p.timeout));try{x=1,l.send(y,k)}catch(C){if(!(2>x))throw C;k(-1,C)}}else k(-1,"No Transport");function k(e,n,r,i){var c,y,v,w,T,C=n;2!==x&&(x=2,s&&clearTimeout(s),l=t,a=i||"",N.readyState=e>0?4:0,r&&(w=_n(p,N,r)),e>=200&&300>e||304===e?(p.ifModified&&(T=N.getResponseHeader("Last-Modified"),T&&(b.lastModified[o]=T),T=N.getResponseHeader("etag"),T&&(b.etag[o]=T)),204===e?(c=!0,C="nocontent"):304===e?(c=!0,C="notmodified"):(c=Fn(p,w),C=c.state,y=c.data,v=c.error,c=!v)):(v=C,(e||!C)&&(C="error",0>e&&(e=0))),N.status=e,N.statusText=(n||C)+"",c?h.resolveWith(f,[y,C,N]):h.rejectWith(f,[N,C,v]),N.statusCode(m),m=t,u&&d.trigger(c?"ajaxSuccess":"ajaxError",[N,p,c?y:v]),g.fireWith(f,[N,C]),u&&(d.trigger("ajaxComplete",[N,p]),--b.active||b.event.trigger("ajaxStop")))}return N},getScript:function(e,n){return b.get(e,t,n,"script")},getJSON:function(e,t,n){return b.get(e,t,n,"json")}});function _n(e,n,r){var i,o,a,s,u=e.contents,l=e.dataTypes,c=e.responseFields;for(s in c)s in r&&(n[c[s]]=r[s]);while("*"===l[0])l.shift(),o===t&&(o=e.mimeType||n.getResponseHeader("Content-Type"));if(o)for(s in u)if(u[s]&&u[s].test(o)){l.unshift(s);break}if(l[0]in r)a=l[0];else{for(s in r){if(!l[0]||e.converters[s+" "+l[0]]){a=s;break}i||(i=s)}a=a||i}return a?(a!==l[0]&&l.unshift(a),r[a]):t}function Fn(e,t){var n,r,i,o,a={},s=0,u=e.dataTypes.slice(),l=u[0];if(e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u[1])for(i in e.converters)a[i.toLowerCase()]=e.converters[i];for(;r=u[++s];)if("*"!==r){if("*"!==l&&l!==r){if(i=a[l+" "+r]||a["* "+r],!i)for(n in a)if(o=n.split(" "),o[1]===r&&(i=a[l+" "+o[0]]||a["* "+o[0]])){i===!0?i=a[n]:a[n]!==!0&&(r=o[0],u.splice(s--,0,r));break}if(i!==!0)if(i&&e["throws"])t=i(t);else try{t=i(t)}catch(c){return{state:"parsererror",error:i?c:"No conversion from "+l+" to "+r}}}l=r}return{state:"success",data:t}}b.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return b.globalEval(e),e}}}),b.ajaxPrefilter("script",function(e){e.cache===t&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),b.ajaxTransport("script",function(e){if(e.crossDomain){var n,r=o.head||b("head")[0]||o.documentElement;return{send:function(t,i){n=o.createElement("script"),n.async=!0,e.scriptCharset&&(n.charset=e.scriptCharset),n.src=e.url,n.onload=n.onreadystatechange=function(e,t){(t||!n.readyState||/loaded|complete/.test(n.readyState))&&(n.onload=n.onreadystatechange=null,n.parentNode&&n.parentNode.removeChild(n),n=null,t||i(200,"success"))},r.insertBefore(n,r.firstChild)},abort:function(){n&&n.onload(t,!0)}}}});var On=[],Bn=/(=)\?(?=&|$)|\?\?/;b.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=On.pop()||b.expando+"_"+vn++;return this[e]=!0,e}}),b.ajaxPrefilter("json jsonp",function(n,r,i){var o,a,s,u=n.jsonp!==!1&&(Bn.test(n.url)?"url":"string"==typeof n.data&&!(n.contentType||"").indexOf("application/x-www-form-urlencoded")&&Bn.test(n.data)&&"data");return u||"jsonp"===n.dataTypes[0]?(o=n.jsonpCallback=b.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,u?n[u]=n[u].replace(Bn,"$1"+o):n.jsonp!==!1&&(n.url+=(bn.test(n.url)?"&":"?")+n.jsonp+"="+o),n.converters["script json"]=function(){return s||b.error(o+" was not called"),s[0]},n.dataTypes[0]="json",a=e[o],e[o]=function(){s=arguments},i.always(function(){e[o]=a,n[o]&&(n.jsonpCallback=r.jsonpCallback,On.push(o)),s&&b.isFunction(a)&&a(s[0]),s=a=t}),"script"):t});var Pn,Rn,Wn=0,$n=e.ActiveXObject&&function(){var e;for(e in Pn)Pn[e](t,!0)};function In(){try{return new e.XMLHttpRequest}catch(t){}}function zn(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}b.ajaxSettings.xhr=e.ActiveXObject?function(){return!this.isLocal&&In()||zn()}:In,Rn=b.ajaxSettings.xhr(),b.support.cors=!!Rn&&"withCredentials"in Rn,Rn=b.support.ajax=!!Rn,Rn&&b.ajaxTransport(function(n){if(!n.crossDomain||b.support.cors){var r;return{send:function(i,o){var a,s,u=n.xhr();if(n.username?u.open(n.type,n.url,n.async,n.username,n.password):u.open(n.type,n.url,n.async),n.xhrFields)for(s in n.xhrFields)u[s]=n.xhrFields[s];n.mimeType&&u.overrideMimeType&&u.overrideMimeType(n.mimeType),n.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");try{for(s in i)u.setRequestHeader(s,i[s])}catch(l){}u.send(n.hasContent&&n.data||null),r=function(e,i){var s,l,c,p;try{if(r&&(i||4===u.readyState))if(r=t,a&&(u.onreadystatechange=b.noop,$n&&delete Pn[a]),i)4!==u.readyState&&u.abort();else{p={},s=u.status,l=u.getAllResponseHeaders(),"string"==typeof u.responseText&&(p.text=u.responseText);try{c=u.statusText}catch(f){c=""}s||!n.isLocal||n.crossDomain?1223===s&&(s=204):s=p.text?200:404}}catch(d){i||o(-1,d)}p&&o(s,c,p,l)},n.async?4===u.readyState?setTimeout(r):(a=++Wn,$n&&(Pn||(Pn={},b(e).unload($n)),Pn[a]=r),u.onreadystatechange=r):r()},abort:function(){r&&r(t,!0)}}}});var Xn,Un,Vn=/^(?:toggle|show|hide)$/,Yn=RegExp("^(?:([+-])=|)("+x+")([a-z%]*)$","i"),Jn=/queueHooks$/,Gn=[nr],Qn={"*":[function(e,t){var n,r,i=this.createTween(e,t),o=Yn.exec(t),a=i.cur(),s=+a||0,u=1,l=20;if(o){if(n=+o[2],r=o[3]||(b.cssNumber[e]?"":"px"),"px"!==r&&s){s=b.css(i.elem,e,!0)||n||1;do u=u||".5",s/=u,b.style(i.elem,e,s+r);while(u!==(u=i.cur()/a)&&1!==u&&--l)}i.unit=r,i.start=s,i.end=o[1]?s+(o[1]+1)*n:n}return i}]};function Kn(){return setTimeout(function(){Xn=t}),Xn=b.now()}function Zn(e,t){b.each(t,function(t,n){var r=(Qn[t]||[]).concat(Qn["*"]),i=0,o=r.length;for(;o>i;i++)if(r[i].call(e,t,n))return})}function er(e,t,n){var r,i,o=0,a=Gn.length,s=b.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;var t=Xn||Kn(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,a=0,u=l.tweens.length;for(;u>a;a++)l.tweens[a].run(o);return s.notifyWith(e,[l,o,n]),1>o&&u?n:(s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:b.extend({},t),opts:b.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Xn||Kn(),duration:n.duration,tweens:[],createTween:function(t,n){var r=b.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?s.resolveWith(e,[l,t]):s.rejectWith(e,[l,t]),this}}),c=l.props;for(tr(c,l.opts.specialEasing);a>o;o++)if(r=Gn[o].call(l,e,c,l.opts))return r;return Zn(l,c),b.isFunction(l.opts.start)&&l.opts.start.call(e,l),b.fx.timer(b.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function tr(e,t){var n,r,i,o,a;for(i in e)if(r=b.camelCase(i),o=t[r],n=e[i],b.isArray(n)&&(o=n[1],n=e[i]=n[0]),i!==r&&(e[r]=n,delete e[i]),a=b.cssHooks[r],a&&"expand"in a){n=a.expand(n),delete e[r];for(i in n)i in e||(e[i]=n[i],t[i]=o)}else t[r]=o}b.Animation=b.extend(er,{tweener:function(e,t){b.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");var n,r=0,i=e.length;for(;i>r;r++)n=e[r],Qn[n]=Qn[n]||[],Qn[n].unshift(t)},prefilter:function(e,t){t?Gn.unshift(e):Gn.push(e)}});function nr(e,t,n){var r,i,o,a,s,u,l,c,p,f=this,d=e.style,h={},g=[],m=e.nodeType&&nn(e);n.queue||(c=b._queueHooks(e,"fx"),null==c.unqueued&&(c.unqueued=0,p=c.empty.fire,c.empty.fire=function(){c.unqueued||p()}),c.unqueued++,f.always(function(){f.always(function(){c.unqueued--,b.queue(e,"fx").length||c.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],"inline"===b.css(e,"display")&&"none"===b.css(e,"float")&&(b.support.inlineBlockNeedsLayout&&"inline"!==un(e.nodeName)?d.zoom=1:d.display="inline-block")),n.overflow&&(d.overflow="hidden",b.support.shrinkWrapBlocks||f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(i in t)if(a=t[i],Vn.exec(a)){if(delete t[i],u=u||"toggle"===a,a===(m?"hide":"show"))continue;g.push(i)}if(o=g.length){s=b._data(e,"fxshow")||b._data(e,"fxshow",{}),"hidden"in s&&(m=s.hidden),u&&(s.hidden=!m),m?b(e).show():f.done(function(){b(e).hide()}),f.done(function(){var t;b._removeData(e,"fxshow");for(t in h)b.style(e,t,h[t])});for(i=0;o>i;i++)r=g[i],l=f.createTween(r,m?s[r]:0),h[r]=s[r]||b.style(e,r),r in s||(s[r]=l.start,m&&(l.end=l.start,l.start="width"===r||"height"===r?1:0))}}function rr(e,t,n,r,i){return new rr.prototype.init(e,t,n,r,i)}b.Tween=rr,rr.prototype={constructor:rr,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(b.cssNumber[n]?"":"px")},cur:function(){var e=rr.propHooks[this.prop];return e&&e.get?e.get(this):rr.propHooks._default.get(this)},run:function(e){var t,n=rr.propHooks[this.prop];return this.pos=t=this.options.duration?b.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rr.propHooks._default.set(this),this}},rr.prototype.init.prototype=rr.prototype,rr.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=b.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){b.fx.step[e.prop]?b.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[b.cssProps[e.prop]]||b.cssHooks[e.prop])?b.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},rr.propHooks.scrollTop=rr.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},b.each(["toggle","show","hide"],function(e,t){var n=b.fn[t];b.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ir(t,!0),e,r,i)}}),b.fn.extend({fadeTo:function(e,t,n,r){return this.filter(nn).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=b.isEmptyObject(e),o=b.speed(t,n,r),a=function(){var t=er(this,b.extend({},e),o);a.finish=function(){t.stop(!0)},(i||b._data(this,"finish"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,n,r){var i=function(e){var t=e.stop;delete e.stop,t(r)};return"string"!=typeof e&&(r=n,n=e,e=t),n&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,n=null!=e&&e+"queueHooks",o=b.timers,a=b._data(this);if(n)a[n]&&a[n].stop&&i(a[n]);else for(n in a)a[n]&&a[n].stop&&Jn.test(n)&&i(a[n]);for(n=o.length;n--;)o[n].elem!==this||null!=e&&o[n].queue!==e||(o[n].anim.stop(r),t=!1,o.splice(n,1));(t||!r)&&b.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=b._data(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=b.timers,a=r?r.length:0;for(n.finish=!0,b.queue(this,e,[]),i&&i.cur&&i.cur.finish&&i.cur.finish.call(this),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}});function ir(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=Zt[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}b.each({slideDown:ir("show"),slideUp:ir("hide"),slideToggle:ir("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){b.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),b.speed=function(e,t,n){var r=e&&"object"==typeof e?b.extend({},e):{complete:n||!n&&t||b.isFunction(e)&&e,duration:e,easing:n&&t||t&&!b.isFunction(t)&&t};return r.duration=b.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in b.fx.speeds?b.fx.speeds[r.duration]:b.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){b.isFunction(r.old)&&r.old.call(this),r.queue&&b.dequeue(this,r.queue)},r},b.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},b.timers=[],b.fx=rr.prototype.init,b.fx.tick=function(){var e,n=b.timers,r=0;for(Xn=b.now();n.length>r;r++)e=n[r],e()||n[r]!==e||n.splice(r--,1);n.length||b.fx.stop(),Xn=t},b.fx.timer=function(e){e()&&b.timers.push(e)&&b.fx.start()},b.fx.interval=13,b.fx.start=function(){Un||(Un=setInterval(b.fx.tick,b.fx.interval))},b.fx.stop=function(){clearInterval(Un),Un=null},b.fx.speeds={slow:600,fast:200,_default:400},b.fx.step={},b.expr&&b.expr.filters&&(b.expr.filters.animated=function(e){return b.grep(b.timers,function(t){return e===t.elem}).length}),b.fn.offset=function(e){if(arguments.length)return e===t?this:this.each(function(t){b.offset.setOffset(this,e,t)});var n,r,o={top:0,left:0},a=this[0],s=a&&a.ownerDocument;if(s)return n=s.documentElement,b.contains(n,a)?(typeof a.getBoundingClientRect!==i&&(o=a.getBoundingClientRect()),r=or(s),{top:o.top+(r.pageYOffset||n.scrollTop)-(n.clientTop||0),left:o.left+(r.pageXOffset||n.scrollLeft)-(n.clientLeft||0)}):o},b.offset={setOffset:function(e,t,n){var r=b.css(e,"position");"static"===r&&(e.style.position="relative");var i=b(e),o=i.offset(),a=b.css(e,"top"),s=b.css(e,"left"),u=("absolute"===r||"fixed"===r)&&b.inArray("auto",[a,s])>-1,l={},c={},p,f;u?(c=i.position(),p=c.top,f=c.left):(p=parseFloat(a)||0,f=parseFloat(s)||0),b.isFunction(t)&&(t=t.call(e,n,o)),null!=t.top&&(l.top=t.top-o.top+p),null!=t.left&&(l.left=t.left-o.left+f),"using"in t?t.using.call(e,l):i.css(l)}},b.fn.extend({position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===b.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),b.nodeName(e[0],"html")||(n=e.offset()),n.top+=b.css(e[0],"borderTopWidth",!0),n.left+=b.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-b.css(r,"marginTop",!0),left:t.left-n.left-b.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||o.documentElement;while(e&&!b.nodeName(e,"html")&&"static"===b.css(e,"position"))e=e.offsetParent;return e||o.documentElement})}}),b.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var r=/Y/.test(n);b.fn[e]=function(i){return b.access(this,function(e,i,o){var a=or(e);return o===t?a?n in a?a[n]:a.document.documentElement[i]:e[i]:(a?a.scrollTo(r?b(a).scrollLeft():o,r?o:b(a).scrollTop()):e[i]=o,t)},e,i,arguments.length,null)}});function or(e){return b.isWindow(e)?e:9===e.nodeType?e.defaultView||e.parentWindow:!1}b.each({Height:"height",Width:"width"},function(e,n){b.each({padding:"inner"+e,content:n,"":"outer"+e},function(r,i){b.fn[i]=function(i,o){var a=arguments.length&&(r||"boolean"!=typeof i),s=r||(i===!0||o===!0?"margin":"border");return b.access(this,function(n,r,i){var o;return b.isWindow(n)?n.document.documentElement["client"+e]:9===n.nodeType?(o=n.documentElement,Math.max(n.body["scroll"+e],o["scroll"+e],n.body["offset"+e],o["offset"+e],o["client"+e])):i===t?b.css(n,r,s):b.style(n,r,i,s)},n,a?i:t,a,null)}})}),e.jQuery=e.$=b,"function"==typeof define&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return b})})(window);;/*!
 * jQuery Mobile 1.3.2
 * Git HEAD hash: 528cf0e96940644ea644096bfeb913ed920ffaef <> Date: Fri Jul 19 2013 22:17:57 UTC
 * http://jquerymobile.com
 *
 * Copyright 2010, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 */


(function(root, doc, factory) {
    if (typeof define === "function" && define.amd) {
        // AMD. Register as an anonymous module.
        define(["jquery"], function($) {
            factory($, root, doc);
            return $.mobile;
        });
    } else {
        // Browser globals
        factory(root.jQuery, root, doc);
    }
}(this, document, function(jQuery, window, document, undefined) {
    (function($) {
        $.mobile = {};
    }(jQuery));
    (function($, window, undefined) {
        var nsNormalizeDict = {};

        // jQuery.mobile configurable options
        $.mobile = $.extend($.mobile, {

            // Version of the jQuery Mobile Framework
            version: "1.3.2",

            // Namespace used framework-wide for data-attrs. Default is no namespace
            ns: "",

            // Define the url parameter used for referencing widget-generated sub-pages.
            // Translates to to example.html&ui-page=subpageIdentifier
            // hash segment before &ui-page= is used to make Ajax request
            subPageUrlKey: "ui-page",

            // Class assigned to page currently in view, and during transitions
            activePageClass: "ui-page-active",

            // Class used for "active" button state, from CSS framework
            activeBtnClass: "ui-btn-active",

            // Class used for "focus" form element state, from CSS framework
            focusClass: "ui-focus",

            // Automatically handle clicks and form submissions through Ajax, when same-domain
            ajaxEnabled: true,

            // Automatically load and show pages based on location.hash
            hashListeningEnabled: true,

            // disable to prevent jquery from bothering with links
            linkBindingEnabled: true,

            // Set default page transition - 'none' for no transitions
            defaultPageTransition: "fade",

            // Set maximum window width for transitions to apply - 'false' for no limit
            maxTransitionWidth: false,

            // Minimum scroll distance that will be remembered when returning to a page
            minScrollBack: 250,

            // DEPRECATED: the following property is no longer in use, but defined until 2.0 to prevent conflicts
            touchOverflowEnabled: false,

            // Set default dialog transition - 'none' for no transitions
            defaultDialogTransition: "pop",

            // Error response message - appears when an Ajax page request fails
            pageLoadErrorMessage: "Error Loading Page",

            // For error messages, which theme does the box uses?
            pageLoadErrorMessageTheme: "e",

            // replace calls to window.history.back with phonegaps navigation helper
            // where it is provided on the window object
            phonegapNavigationEnabled: false,

            //automatically initialize the DOM when it's ready
            autoInitializePage: true,

            pushStateEnabled: true,

            // allows users to opt in to ignoring content by marking a parent element as
            // data-ignored
            ignoreContentEnabled: false,

            // turn of binding to the native orientationchange due to android orientation behavior
            orientationChangeEnabled: true,

            buttonMarkup: {
                hoverDelay: 200
            },

            // define the window and the document objects
            window: $(window),
            document: $(document),

            // TODO might be useful upstream in jquery itself ?
            keyCode: {
                ALT: 18,
                BACKSPACE: 8,
                CAPS_LOCK: 20,
                COMMA: 188,
                COMMAND: 91,
                COMMAND_LEFT: 91, // COMMAND
                COMMAND_RIGHT: 93,
                CONTROL: 17,
                DELETE: 46,
                DOWN: 40,
                END: 35,
                ENTER: 13,
                ESCAPE: 27,
                HOME: 36,
                INSERT: 45,
                LEFT: 37,
                MENU: 93, // COMMAND_RIGHT
                NUMPAD_ADD: 107,
                NUMPAD_DECIMAL: 110,
                NUMPAD_DIVIDE: 111,
                NUMPAD_ENTER: 108,
                NUMPAD_MULTIPLY: 106,
                NUMPAD_SUBTRACT: 109,
                PAGE_DOWN: 34,
                PAGE_UP: 33,
                PERIOD: 190,
                RIGHT: 39,
                SHIFT: 16,
                SPACE: 32,
                TAB: 9,
                UP: 38,
                WINDOWS: 91 // COMMAND
            },

            // Place to store various widget extensions
            behaviors: {},

            // Scroll page vertically: scroll to 0 to hide iOS address bar, or pass a Y value
            silentScroll: function(ypos) {
                if ($.type(ypos) !== "number") {
                    ypos = $.mobile.defaultHomeScroll;
                }

                // prevent scrollstart and scrollstop events
                $.event.special.scrollstart.enabled = false;

                setTimeout(function() {
                    window.scrollTo(0, ypos);
                    $.mobile.document.trigger("silentscroll", {
                        x: 0,
                        y: ypos
                    });
                }, 20);

                setTimeout(function() {
                    $.event.special.scrollstart.enabled = true;
                }, 150);
            },

            // Expose our cache for testing purposes.
            nsNormalizeDict: nsNormalizeDict,

            // Take a data attribute property, prepend the namespace
            // and then camel case the attribute string. Add the result
            // to our nsNormalizeDict so we don't have to do this again.
            nsNormalize: function(prop) {
                if (!prop) {
                    return;
                }

                return nsNormalizeDict[prop] || (nsNormalizeDict[prop] = $.camelCase($.mobile.ns + prop));
            },

            // Find the closest parent with a theme class on it. Note that
            // we are not using $.fn.closest() on purpose here because this
            // method gets called quite a bit and we need it to be as fast
            // as possible.
            getInheritedTheme: function(el, defaultTheme) {
                var e = el[0],
                    ltr = "",
                    re = /ui-(bar|body|overlay)-([a-z])\b/,
                    c, m;

                while (e) {
                    c = e.className || "";
                    if (c && (m = re.exec(c)) && (ltr = m[2])) {
                        // We found a parent with a theme class
                        // on it so bail from this loop.
                        break;
                    }

                    e = e.parentNode;
                }

                // Return the theme letter we found, if none, return the
                // specified default.

                return ltr || defaultTheme || "a";
            },

            // TODO the following $ and $.fn extensions can/probably should be moved into jquery.mobile.core.helpers
            //
            // Find the closest javascript page element to gather settings data jsperf test
            // http://jsperf.com/single-complex-selector-vs-many-complex-selectors/edit
            // possibly naive, but it shows that the parsing overhead for *just* the page selector vs
            // the page and dialog selector is negligable. This could probably be speed up by
            // doing a similar parent node traversal to the one found in the inherited theme code above
            closestPageData: function($target) {
                return $target
                    .closest(':jqmData(role="page"), :jqmData(role="dialog")')
                    .data("mobile-page");
            },

            enhanceable: function($set) {
                return this.haveParents($set, "enhance");
            },

            hijackable: function($set) {
                return this.haveParents($set, "ajax");
            },

            haveParents: function($set, attr) {
                if (!$.mobile.ignoreContentEnabled) {
                    return $set;
                }

                var count = $set.length,
                    $newSet = $(),
                    e, $element, excluded;

                for (var i = 0; i < count; i++) {
                    $element = $set.eq(i);
                    excluded = false;
                    e = $set[i];

                    while (e) {
                        var c = e.getAttribute ? e.getAttribute("data-" + $.mobile.ns + attr) : "";

                        if (c === "false") {
                            excluded = true;
                            break;
                        }

                        e = e.parentNode;
                    }

                    if (!excluded) {
                        $newSet = $newSet.add($element);
                    }
                }

                return $newSet;
            },

            getScreenHeight: function() {
                // Native innerHeight returns more accurate value for this across platforms,
                // jQuery version is here as a normalized fallback for platforms like Symbian
                return window.innerHeight || $.mobile.window.height();
            }
        }, $.mobile);

        // Mobile version of data and removeData and hasData methods
        // ensures all data is set and retrieved using jQuery Mobile's data namespace
        $.fn.jqmData = function(prop, value) {
            var result;
            if (typeof prop !== "undefined") {
                if (prop) {
                    prop = $.mobile.nsNormalize(prop);
                }

                // undefined is permitted as an explicit input for the second param
                // in this case it returns the value and does not set it to undefined
                if (arguments.length < 2 || value === undefined) {
                    result = this.data(prop);
                } else {
                    result = this.data(prop, value);
                }
            }
            return result;
        };

        $.jqmData = function(elem, prop, value) {
            var result;
            if (typeof prop !== "undefined") {
                result = $.data(elem, prop ? $.mobile.nsNormalize(prop) : prop, value);
            }
            return result;
        };

        $.fn.jqmRemoveData = function(prop) {
            return this.removeData($.mobile.nsNormalize(prop));
        };

        $.jqmRemoveData = function(elem, prop) {
            return $.removeData(elem, $.mobile.nsNormalize(prop));
        };

        $.fn.removeWithDependents = function() {
            $.removeWithDependents(this);
        };

        $.removeWithDependents = function(elem) {
            var $elem = $(elem);

            ($elem.jqmData('dependents') || $()).remove();
            $elem.remove();
        };

        $.fn.addDependents = function(newDependents) {
            $.addDependents($(this), newDependents);
        };

        $.addDependents = function(elem, newDependents) {
            var dependents = $(elem).jqmData('dependents') || $();

            $(elem).jqmData('dependents', $.merge(dependents, newDependents));
        };

        // note that this helper doesn't attempt to handle the callback
        // or setting of an html element's text, its only purpose is
        // to return the html encoded version of the text in all cases. (thus the name)
        $.fn.getEncodedText = function() {
            return $("<div/>").text($(this).text()).html();
        };

        // fluent helper function for the mobile namespaced equivalent
        $.fn.jqmEnhanceable = function() {
            return $.mobile.enhanceable(this);
        };

        $.fn.jqmHijackable = function() {
            return $.mobile.hijackable(this);
        };

        // Monkey-patching Sizzle to filter the :jqmData selector
        var oldFind = $.find,
            jqmDataRE = /:jqmData\(([^)]*)\)/g;

        $.find = function(selector, context, ret, extra) {
            selector = selector.replace(jqmDataRE, "[data-" + ($.mobile.ns || "") + "$1]");

            return oldFind.call(this, selector, context, ret, extra);
        };

        $.extend($.find, oldFind);

        $.find.matches = function(expr, set) {
            return $.find(expr, null, null, set);
        };

        $.find.matchesSelector = function(node, expr) {
            return $.find(expr, null, null, [node]).length > 0;
        };
    })(jQuery, this);


    /*!
     * jQuery UI Widget v1.10.0pre - 2012-11-13 (ff055a0c353c3c8ce6e5bfa07ad7cb03e8885bc5)
     * http://jqueryui.com
     *
     * Copyright 2010, 2013 jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/jQuery.widget/
     */
    (function($, undefined) {

        var uuid = 0,
            slice = Array.prototype.slice,
            _cleanData = $.cleanData;
        $.cleanData = function(elems) {
            for (var i = 0, elem;
                (elem = elems[i]) != null; i++) {
                try {
                    $(elem).triggerHandler("remove");
                    // http://bugs.jquery.com/ticket/8235
                } catch (e) {}
            }
            _cleanData(elems);
        };

        $.widget = function(name, base, prototype) {
            var fullName, existingConstructor, constructor, basePrototype,
                namespace = name.split(".")[0];

            name = name.split(".")[1];
            fullName = namespace + "-" + name;

            if (!prototype) {
                prototype = base;
                base = $.Widget;
            }

            // create selector for plugin
            $.expr[":"][fullName.toLowerCase()] = function(elem) {
                return !!$.data(elem, fullName);
            };

            $[namespace] = $[namespace] || {};
            existingConstructor = $[namespace][name];
            constructor = $[namespace][name] = function(options, element) {
                // allow instantiation without "new" keyword
                if (!this._createWidget) {
                    return new constructor(options, element);
                }

                // allow instantiation without initializing for simple inheritance
                // must use "new" keyword (the code above always passes args)
                if (arguments.length) {
                    this._createWidget(options, element);
                }
            };
            // extend with the existing constructor to carry over any static properties
            $.extend(constructor, existingConstructor, {
                version: prototype.version,
                // copy the object used to create the prototype in case we need to
                // redefine the widget later
                _proto: $.extend({}, prototype),
                // track widgets that inherit from this widget in case this widget is
                // redefined after a widget inherits from it
                _childConstructors: []
            });

            basePrototype = new base();
            // we need to make the options hash a property directly on the new instance
            // otherwise we'll modify the options hash on the prototype that we're
            // inheriting from
            basePrototype.options = $.widget.extend({}, basePrototype.options);
            $.each(prototype, function(prop, value) {
                if ($.isFunction(value)) {
                    prototype[prop] = (function() {
                        var _super = function() {
                            return base.prototype[prop].apply(this, arguments);
                        },
                            _superApply = function(args) {
                                return base.prototype[prop].apply(this, args);
                            };
                        return function() {
                            var __super = this._super,
                                __superApply = this._superApply,
                                returnValue;

                            this._super = _super;
                            this._superApply = _superApply;

                            returnValue = value.apply(this, arguments);

                            this._super = __super;
                            this._superApply = __superApply;

                            return returnValue;
                        };
                    })();
                }
            });
            constructor.prototype = $.widget.extend(basePrototype, {
                // TODO: remove support for widgetEventPrefix
                // always use the name + a colon as the prefix, e.g., draggable:start
                // don't prefix for widgets that aren't DOM-based
                widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name
            }, prototype, {
                constructor: constructor,
                namespace: namespace,
                widgetName: name,
                widgetFullName: fullName
            });

            // If this widget is being redefined then we need to find all widgets that
            // are inheriting from it and redefine all of them so that they inherit from
            // the new version of this widget. We're essentially trying to replace one
            // level in the prototype chain.
            if (existingConstructor) {
                $.each(existingConstructor._childConstructors, function(i, child) {
                    var childPrototype = child.prototype;

                    // redefine the child widget using the same prototype that was
                    // originally used, but inherit from the new version of the base
                    $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
                });
                // remove the list of existing child constructors from the old constructor
                // so the old child constructors can be garbage collected
                delete existingConstructor._childConstructors;
            } else {
                base._childConstructors.push(constructor);
            }

            $.widget.bridge(name, constructor);
        };

        $.widget.extend = function(target) {
            var input = slice.call(arguments, 1),
                inputIndex = 0,
                inputLength = input.length,
                key,
                value;
            for (; inputIndex < inputLength; inputIndex++) {
                for (key in input[inputIndex]) {
                    value = input[inputIndex][key];
                    if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {
                        // Clone objects
                        if ($.isPlainObject(value)) {
                            target[key] = $.isPlainObject(target[key]) ?
                                $.widget.extend({}, target[key], value) :
                            // Don't extend strings, arrays, etc. with objects
                            $.widget.extend({}, value);
                            // Copy everything else by reference
                        } else {
                            target[key] = value;
                        }
                    }
                }
            }
            return target;
        };

        $.widget.bridge = function(name, object) {
            var fullName = object.prototype.widgetFullName || name;
            $.fn[name] = function(options) {
                var isMethodCall = typeof options === "string",
                    args = slice.call(arguments, 1),
                    returnValue = this;

                // allow multiple hashes to be passed on init
                options = !isMethodCall && args.length ?
                    $.widget.extend.apply(null, [options].concat(args)) :
                    options;

                if (isMethodCall) {
                    this.each(function() {
                        var methodValue,
                            instance = $.data(this, fullName);
                        if (!instance) {
                            return $.error("cannot call methods on " + name + " prior to initialization; " +
                                "attempted to call method '" + options + "'");
                        }
                        if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
                            return $.error("no such method '" + options + "' for " + name + " widget instance");
                        }
                        methodValue = instance[options].apply(instance, args);
                        if (methodValue !== instance && methodValue !== undefined) {
                            returnValue = methodValue && methodValue.jquery ?
                                returnValue.pushStack(methodValue.get()) :
                                methodValue;
                            return false;
                        }
                    });
                } else {
                    this.each(function() {
                        var instance = $.data(this, fullName);
                        if (instance) {
                            instance.option(options || {})._init();
                        } else {
                            $.data(this, fullName, new object(options, this));
                        }
                    });
                }

                return returnValue;
            };
        };

        $.Widget = function( /* options, element */ ) {};
        $.Widget._childConstructors = [];

        $.Widget.prototype = {
            widgetName: "widget",
            widgetEventPrefix: "",
            defaultElement: "<div>",
            options: {
                disabled: false,

                // callbacks
                create: null
            },
            _createWidget: function(options, element) {
                element = $(element || this.defaultElement || this)[0];
                this.element = $(element);
                this.uuid = uuid++;
                this.eventNamespace = "." + this.widgetName + this.uuid;
                this.options = $.widget.extend({},
                    this.options,
                    this._getCreateOptions(),
                    options);

                this.bindings = $();
                this.hoverable = $();
                this.focusable = $();

                if (element !== this) {
                    $.data(element, this.widgetFullName, this);
                    this._on(true, this.element, {
                        remove: function(event) {
                            if (event.target === element) {
                                this.destroy();
                            }
                        }
                    });
                    this.document = $(element.style ?
                        // element within the document
                        element.ownerDocument :
                        // element is window or document
                        element.document || element);
                    this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
                }

                this._create();
                this._trigger("create", null, this._getCreateEventData());
                this._init();
            },
            _getCreateOptions: $.noop,
            _getCreateEventData: $.noop,
            _create: $.noop,
            _init: $.noop,

            destroy: function() {
                this._destroy();
                // we can probably remove the unbind calls in 2.0
                // all event bindings should go through this._on()
                this.element
                    .unbind(this.eventNamespace)
                // 1.9 BC for #7810
                // TODO remove dual storage
                .removeData(this.widgetName)
                    .removeData(this.widgetFullName)
                // support: jquery <1.6.3
                // http://bugs.jquery.com/ticket/9413
                .removeData($.camelCase(this.widgetFullName));
                this.widget()
                    .unbind(this.eventNamespace)
                    .removeAttr("aria-disabled")
                    .removeClass(
                        this.widgetFullName + "-disabled " +
                        "ui-state-disabled");

                // clean up events and states
                this.bindings.unbind(this.eventNamespace);
                this.hoverable.removeClass("ui-state-hover");
                this.focusable.removeClass("ui-state-focus");
            },
            _destroy: $.noop,

            widget: function() {
                return this.element;
            },

            option: function(key, value) {
                var options = key,
                    parts,
                    curOption,
                    i;

                if (arguments.length === 0) {
                    // don't return a reference to the internal hash
                    return $.widget.extend({}, this.options);
                }

                if (typeof key === "string") {
                    // handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
                    options = {};
                    parts = key.split(".");
                    key = parts.shift();
                    if (parts.length) {
                        curOption = options[key] = $.widget.extend({}, this.options[key]);
                        for (i = 0; i < parts.length - 1; i++) {
                            curOption[parts[i]] = curOption[parts[i]] || {};
                            curOption = curOption[parts[i]];
                        }
                        key = parts.pop();
                        if (value === undefined) {
                            return curOption[key] === undefined ? null : curOption[key];
                        }
                        curOption[key] = value;
                    } else {
                        if (value === undefined) {
                            return this.options[key] === undefined ? null : this.options[key];
                        }
                        options[key] = value;
                    }
                }

                this._setOptions(options);

                return this;
            },
            _setOptions: function(options) {
                var key;

                for (key in options) {
                    this._setOption(key, options[key]);
                }

                return this;
            },
            _setOption: function(key, value) {
                this.options[key] = value;

                if (key === "disabled") {
                    this.widget()
                        .toggleClass(this.widgetFullName + "-disabled ui-state-disabled", !! value)
                        .attr("aria-disabled", value);
                    this.hoverable.removeClass("ui-state-hover");
                    this.focusable.removeClass("ui-state-focus");
                }

                return this;
            },

            enable: function() {
                return this._setOption("disabled", false);
            },
            disable: function() {
                return this._setOption("disabled", true);
            },

            _on: function(suppressDisabledCheck, element, handlers) {
                var delegateElement,
                    instance = this;

                // no suppressDisabledCheck flag, shuffle arguments
                if (typeof suppressDisabledCheck !== "boolean") {
                    handlers = element;
                    element = suppressDisabledCheck;
                    suppressDisabledCheck = false;
                }

                // no element argument, shuffle and use this.element
                if (!handlers) {
                    handlers = element;
                    element = this.element;
                    delegateElement = this.widget();
                } else {
                    // accept selectors, DOM elements
                    element = delegateElement = $(element);
                    this.bindings = this.bindings.add(element);
                }

                $.each(handlers, function(event, handler) {
                    function handlerProxy() {
                        // allow widgets to customize the disabled handling
                        // - disabled as an array instead of boolean
                        // - disabled class as method for disabling individual parts
                        if (!suppressDisabledCheck &&
                            (instance.options.disabled === true ||
                                $(this).hasClass("ui-state-disabled"))) {
                            return;
                        }
                        return (typeof handler === "string" ? instance[handler] : handler)
                            .apply(instance, arguments);
                    }

                    // copy the guid so direct unbinding works
                    if (typeof handler !== "string") {
                        handlerProxy.guid = handler.guid =
                            handler.guid || handlerProxy.guid || $.guid++;
                    }

                    var match = event.match(/^(\w+)\s*(.*)$/),
                        eventName = match[1] + instance.eventNamespace,
                        selector = match[2];
                    if (selector) {
                        delegateElement.delegate(selector, eventName, handlerProxy);
                    } else {
                        element.bind(eventName, handlerProxy);
                    }
                });
            },

            _off: function(element, eventName) {
                eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
                element.unbind(eventName).undelegate(eventName);
            },

            _delay: function(handler, delay) {
                function handlerProxy() {
                    return (typeof handler === "string" ? instance[handler] : handler)
                        .apply(instance, arguments);
                }
                var instance = this;
                return setTimeout(handlerProxy, delay || 0);
            },

            _hoverable: function(element) {
                this.hoverable = this.hoverable.add(element);
                this._on(element, {
                    mouseenter: function(event) {
                        $(event.currentTarget).addClass("ui-state-hover");
                    },
                    mouseleave: function(event) {
                        $(event.currentTarget).removeClass("ui-state-hover");
                    }
                });
            },

            _focusable: function(element) {
                this.focusable = this.focusable.add(element);
                this._on(element, {
                    focusin: function(event) {
                        $(event.currentTarget).addClass("ui-state-focus");
                    },
                    focusout: function(event) {
                        $(event.currentTarget).removeClass("ui-state-focus");
                    }
                });
            },

            _trigger: function(type, event, data) {
                var prop, orig,
                    callback = this.options[type];

                data = data || {};
                event = $.Event(event);
                event.type = (type === this.widgetEventPrefix ?
                    type :
                    this.widgetEventPrefix + type).toLowerCase();
                // the original event may come from any element
                // so we need to reset the target on the new event
                event.target = this.element[0];

                // copy original event properties over to the new event
                orig = event.originalEvent;
                if (orig) {
                    for (prop in orig) {
                        if (!(prop in event)) {
                            event[prop] = orig[prop];
                        }
                    }
                }

                this.element.trigger(event, data);
                return !($.isFunction(callback) &&
                    callback.apply(this.element[0], [event].concat(data)) === false ||
                    event.isDefaultPrevented());
            }
        };

        $.each({
            show: "fadeIn",
            hide: "fadeOut"
        }, function(method, defaultEffect) {
            $.Widget.prototype["_" + method] = function(element, options, callback) {
                if (typeof options === "string") {
                    options = {
                        effect: options
                    };
                }
                var hasOptions,
                    effectName = !options ?
                        method :
                        options === true || typeof options === "number" ?
                        defaultEffect :
                        options.effect || defaultEffect;
                options = options || {};
                if (typeof options === "number") {
                    options = {
                        duration: options
                    };
                }
                hasOptions = !$.isEmptyObject(options);
                options.complete = callback;
                if (options.delay) {
                    element.delay(options.delay);
                }
                if (hasOptions && $.effects && $.effects.effect[effectName]) {
                    element[method](options);
                } else if (effectName !== method && element[effectName]) {
                    element[effectName](options.duration, options.easing, callback);
                } else {
                    element.queue(function(next) {
                        $(this)[method]();
                        if (callback) {
                            callback.call(element[0]);
                        }
                        next();
                    });
                }
            };
        });

    })(jQuery);

    (function($, undefined) {

        $.widget("mobile.widget", {
            // decorate the parent _createWidget to trigger `widgetinit` for users
            // who wish to do post post `widgetcreate` alterations/additions
            //
            // TODO create a pull request for jquery ui to trigger this event
            // in the original _createWidget
            _createWidget: function() {
                $.Widget.prototype._createWidget.apply(this, arguments);
                this._trigger('init');
            },

            _getCreateOptions: function() {

                var elem = this.element,
                    options = {};

                $.each(this.options, function(option) {

                    var value = elem.jqmData(option.replace(/[A-Z]/g, function(c) {
                        return "-" + c.toLowerCase();
                    }));

                    if (value !== undefined) {
                        options[option] = value;
                    }
                });

                return options;
            },

            enhanceWithin: function(target, useKeepNative) {
                this.enhance($(this.options.initSelector, $(target)), useKeepNative);
            },

            enhance: function(targets, useKeepNative) {
                var page, keepNative, $widgetElements = $(targets),
                    self = this;

                // if ignoreContentEnabled is set to true the framework should
                // only enhance the selected elements when they do NOT have a
                // parent with the data-namespace-ignore attribute
                $widgetElements = $.mobile.enhanceable($widgetElements);

                if (useKeepNative && $widgetElements.length) {
                    // TODO remove dependency on the page widget for the keepNative.
                    // Currently the keepNative value is defined on the page prototype so
                    // the method is as well
                    page = $.mobile.closestPageData($widgetElements);
                    keepNative = (page && page.keepNativeSelector()) || "";

                    $widgetElements = $widgetElements.not(keepNative);
                }

                $widgetElements[this.widgetName]();
            },

            raise: function(msg) {
                throw "Widget [" + this.widgetName + "]: " + msg;
            }
        });

    })(jQuery);


    (function($, window) {
        // DEPRECATED
        // NOTE global mobile object settings
        $.extend($.mobile, {
            // DEPRECATED Should the text be visble in the loading message?
            loadingMessageTextVisible: undefined,

            // DEPRECATED When the text is visible, what theme does the loading box use?
            loadingMessageTheme: undefined,

            // DEPRECATED default message setting
            loadingMessage: undefined,

            // DEPRECATED
            // Turn on/off page loading message. Theme doubles as an object argument
            // with the following shape: { theme: '', text: '', html: '', textVisible: '' }
            // NOTE that the $.mobile.loading* settings and params past the first are deprecated
            showPageLoadingMsg: function(theme, msgText, textonly) {
                $.mobile.loading('show', theme, msgText, textonly);
            },

            // DEPRECATED
            hidePageLoadingMsg: function() {
                $.mobile.loading('hide');
            },

            loading: function() {
                this.loaderWidget.loader.apply(this.loaderWidget, arguments);
            }
        });

        // TODO move loader class down into the widget settings
        var loaderClass = "ui-loader",
            $html = $("html"),
            $window = $.mobile.window;

        $.widget("mobile.loader", {
            // NOTE if the global config settings are defined they will override these
            //      options
            options: {
                // the theme for the loading message
                theme: "a",

                // whether the text in the loading message is shown
                textVisible: false,

                // custom html for the inner content of the loading message
                html: "",

                // the text to be displayed when the popup is shown
                text: "loading"
            },

            defaultHtml: "<div class='" + loaderClass + "'>" +
                "<span class='ui-icon ui-icon-loading'></span>" +
                "<h1></h1>" +
                "</div>",

            // For non-fixed supportin browsers. Position at y center (if scrollTop supported), above the activeBtn (if defined), or just 100px from top
            fakeFixLoader: function() {
                var activeBtn = $("." + $.mobile.activeBtnClass).first();

                this.element
                    .css({
                        top: $.support.scrollTop && $window.scrollTop() + $window.height() / 2 ||
                            activeBtn.length && activeBtn.offset().top || 100
                    });
            },

            // check position of loader to see if it appears to be "fixed" to center
            // if not, use abs positioning
            checkLoaderPosition: function() {
                var offset = this.element.offset(),
                    scrollTop = $window.scrollTop(),
                    screenHeight = $.mobile.getScreenHeight();

                if (offset.top < scrollTop || (offset.top - scrollTop) > screenHeight) {
                    this.element.addClass("ui-loader-fakefix");
                    this.fakeFixLoader();
                    $window
                        .unbind("scroll", this.checkLoaderPosition)
                        .bind("scroll", $.proxy(this.fakeFixLoader, this));
                }
            },

            resetHtml: function() {
                this.element.html($(this.defaultHtml).html());
            },

            // Turn on/off page loading message. Theme doubles as an object argument
            // with the following shape: { theme: '', text: '', html: '', textVisible: '' }
            // NOTE that the $.mobile.loading* settings and params past the first are deprecated
            // TODO sweet jesus we need to break some of this out
            show: function(theme, msgText, textonly) {
                var textVisible, message, $header, loadSettings;

                this.resetHtml();

                // use the prototype options so that people can set them globally at
                // mobile init. Consistency, it's what's for dinner
                if ($.type(theme) === "object") {
                    loadSettings = $.extend({}, this.options, theme);

                    // prefer object property from the param then the old theme setting
                    theme = loadSettings.theme || $.mobile.loadingMessageTheme;
                } else {
                    loadSettings = this.options;

                    // here we prefer the them value passed as a string argument, then
                    // we prefer the global option because we can't use undefined default
                    // prototype options, then the prototype option
                    theme = theme || $.mobile.loadingMessageTheme || loadSettings.theme;
                }

                // set the message text, prefer the param, then the settings object
                // then loading message
                message = msgText || $.mobile.loadingMessage || loadSettings.text;

                // prepare the dom
                $html.addClass("ui-loading");

                if ($.mobile.loadingMessage !== false || loadSettings.html) {
                    // boolean values require a bit more work :P, supports object properties
                    // and old settings
                    if ($.mobile.loadingMessageTextVisible !== undefined) {
                        textVisible = $.mobile.loadingMessageTextVisible;
                    } else {
                        textVisible = loadSettings.textVisible;
                    }

                    // add the proper css given the options (theme, text, etc)
                    // Force text visibility if the second argument was supplied, or
                    // if the text was explicitly set in the object args
                    this.element.attr("class", loaderClass +
                        " ui-corner-all ui-body-" + theme +
                        " ui-loader-" + (textVisible || msgText || theme.text ? "verbose" : "default") +
                        (loadSettings.textonly || textonly ? " ui-loader-textonly" : ""));

                    // TODO verify that jquery.fn.html is ok to use in both cases here
                    //      this might be overly defensive in preventing unknowing xss
                    // if the html attribute is defined on the loading settings, use that
                    // otherwise use the fallbacks from above
                    if (loadSettings.html) {
                        this.element.html(loadSettings.html);
                    } else {
                        this.element.find("h1").text(message);
                    }

                    // attach the loader to the DOM
                    this.element.appendTo($.mobile.pageContainer);

                    // check that the loader is visible
                    this.checkLoaderPosition();

                    // on scroll check the loader position
                    $window.bind("scroll", $.proxy(this.checkLoaderPosition, this));
                }
            },

            hide: function() {
                $html.removeClass("ui-loading");

                if ($.mobile.loadingMessage) {
                    this.element.removeClass("ui-loader-fakefix");
                }

                $.mobile.window.unbind("scroll", this.fakeFixLoader);
                $.mobile.window.unbind("scroll", this.checkLoaderPosition);
            }
        });

        $window.bind('pagecontainercreate', function() {
            $.mobile.loaderWidget = $.mobile.loaderWidget || $($.mobile.loader.prototype.defaultHtml).loader();
        });
    })(jQuery, this);


    // Script: jQuery hashchange event
    // 
    // *Version: 1.3, Last updated: 7/21/2010*
    // 
    // Project Home - http://benalman.com/projects/jquery-hashchange-plugin/
    // GitHub       - http://github.com/cowboy/jquery-hashchange/
    // Source       - http://github.com/cowboy/jquery-hashchange/raw/master/jquery.ba-hashchange.js
    // (Minified)   - http://github.com/cowboy/jquery-hashchange/raw/master/jquery.ba-hashchange.min.js (0.8kb gzipped)
    // 
    // About: License
    // 
    // Copyright (c) 2010 "Cowboy" Ben Alman,
    // Dual licensed under the MIT and GPL licenses.
    // http://benalman.com/about/license/
    // 
    // About: Examples
    // 
    // These working examples, complete with fully commented code, illustrate a few
    // ways in which this plugin can be used.
    // 
    // hashchange event - http://benalman.com/code/projects/jquery-hashchange/examples/hashchange/
    // document.domain - http://benalman.com/code/projects/jquery-hashchange/examples/document_domain/
    // 
    // About: Support and Testing
    // 
    // Information about what version or versions of jQuery this plugin has been
    // tested with, what browsers it has been tested in, and where the unit tests
    // reside (so you can test it yourself).
    // 
    // jQuery Versions - 1.2.6, 1.3.2, 1.4.1, 1.4.2
    // Browsers Tested - Internet Explorer 6-8, Firefox 2-4, Chrome 5-6, Safari 3.2-5,
    //                   Opera 9.6-10.60, iPhone 3.1, Android 1.6-2.2, BlackBerry 4.6-5.
    // Unit Tests      - http://benalman.com/code/projects/jquery-hashchange/unit/
    // 
    // About: Known issues
    // 
    // While this jQuery hashchange event implementation is quite stable and
    // robust, there are a few unfortunate browser bugs surrounding expected
    // hashchange event-based behaviors, independent of any JavaScript
    // window.onhashchange abstraction. See the following examples for more
    // information:
    // 
    // Chrome: Back Button - http://benalman.com/code/projects/jquery-hashchange/examples/bug-chrome-back-button/
    // Firefox: Remote XMLHttpRequest - http://benalman.com/code/projects/jquery-hashchange/examples/bug-firefox-remote-xhr/
    // WebKit: Back Button in an Iframe - http://benalman.com/code/projects/jquery-hashchange/examples/bug-webkit-hash-iframe/
    // Safari: Back Button from a different domain - http://benalman.com/code/projects/jquery-hashchange/examples/bug-safari-back-from-diff-domain/
    // 
    // Also note that should a browser natively support the window.onhashchange 
    // event, but not report that it does, the fallback polling loop will be used.
    // 
    // About: Release History
    // 
    // 1.3   - (7/21/2010) Reorganized IE6/7 Iframe code to make it more
    //         "removable" for mobile-only development. Added IE6/7 document.title
    //         support. Attempted to make Iframe as hidden as possible by using
    //         techniques from http://www.paciellogroup.com/blog/?p=604. Added 
    //         support for the "shortcut" format $(window).hashchange( fn ) and
    //         $(window).hashchange() like jQuery provides for built-in events.
    //         Renamed jQuery.hashchangeDelay to <jQuery.fn.hashchange.delay> and
    //         lowered its default value to 50. Added <jQuery.fn.hashchange.domain>
    //         and <jQuery.fn.hashchange.src> properties plus document-domain.html
    //         file to address access denied issues when setting document.domain in
    //         IE6/7.
    // 1.2   - (2/11/2010) Fixed a bug where coming back to a page using this plugin
    //         from a page on another domain would cause an error in Safari 4. Also,
    //         IE6/7 Iframe is now inserted after the body (this actually works),
    //         which prevents the page from scrolling when the event is first bound.
    //         Event can also now be bound before DOM ready, but it won't be usable
    //         before then in IE6/7.
    // 1.1   - (1/21/2010) Incorporated document.documentMode test to fix IE8 bug
    //         where browser version is incorrectly reported as 8.0, despite
    //         inclusion of the X-UA-Compatible IE=EmulateIE7 meta tag.
    // 1.0   - (1/9/2010) Initial Release. Broke out the jQuery BBQ event.special
    //         window.onhashchange functionality into a separate plugin for users
    //         who want just the basic event & back button support, without all the
    //         extra awesomeness that BBQ provides. This plugin will be included as
    //         part of jQuery BBQ, but also be available separately.

    (function($, window, undefined) {
        // Reused string.
        var str_hashchange = 'hashchange',

            // Method / object references.
            doc = document,
            fake_onhashchange,
            special = $.event.special,

            // Does the browser support window.onhashchange? Note that IE8 running in
            // IE7 compatibility mode reports true for 'onhashchange' in window, even
            // though the event isn't supported, so also test document.documentMode.
            doc_mode = doc.documentMode,
            supports_onhashchange = 'on' + str_hashchange in window && (doc_mode === undefined || doc_mode > 7);

        // Get location.hash (or what you'd expect location.hash to be) sans any
        // leading #. Thanks for making this necessary, Firefox!
        function get_fragment(url) {
            url = url || location.href;
            return '#' + url.replace(/^[^#]*#?(.*)$/, '$1');
        };

        // Method: jQuery.fn.hashchange
        // 
        // Bind a handler to the window.onhashchange event or trigger all bound
        // window.onhashchange event handlers. This behavior is consistent with
        // jQuery's built-in event handlers.
        // 
        // Usage:
        // 
        // > jQuery(window).hashchange( [ handler ] );
        // 
        // Arguments:
        // 
        //  handler - (Function) Optional handler to be bound to the hashchange
        //    event. This is a "shortcut" for the more verbose form:
        //    jQuery(window).bind( 'hashchange', handler ). If handler is omitted,
        //    all bound window.onhashchange event handlers will be triggered. This
        //    is a shortcut for the more verbose
        //    jQuery(window).trigger( 'hashchange' ). These forms are described in
        //    the <hashchange event> section.
        // 
        // Returns:
        // 
        //  (jQuery) The initial jQuery collection of elements.

        // Allow the "shortcut" format $(elem).hashchange( fn ) for binding and
        // $(elem).hashchange() for triggering, like jQuery does for built-in events.
        $.fn[str_hashchange] = function(fn) {
            return fn ? this.bind(str_hashchange, fn) : this.trigger(str_hashchange);
        };

        // Property: jQuery.fn.hashchange.delay
        // 
        // The numeric interval (in milliseconds) at which the <hashchange event>
        // polling loop executes. Defaults to 50.

        // Property: jQuery.fn.hashchange.domain
        // 
        // If you're setting document.domain in your JavaScript, and you want hash
        // history to work in IE6/7, not only must this property be set, but you must
        // also set document.domain BEFORE jQuery is loaded into the page. This
        // property is only applicable if you are supporting IE6/7 (or IE8 operating
        // in "IE7 compatibility" mode).
        // 
        // In addition, the <jQuery.fn.hashchange.src> property must be set to the
        // path of the included "document-domain.html" file, which can be renamed or
        // modified if necessary (note that the document.domain specified must be the
        // same in both your main JavaScript as well as in this file).
        // 
        // Usage:
        // 
        // jQuery.fn.hashchange.domain = document.domain;

        // Property: jQuery.fn.hashchange.src
        // 
        // If, for some reason, you need to specify an Iframe src file (for example,
        // when setting document.domain as in <jQuery.fn.hashchange.domain>), you can
        // do so using this property. Note that when using this property, history
        // won't be recorded in IE6/7 until the Iframe src file loads. This property
        // is only applicable if you are supporting IE6/7 (or IE8 operating in "IE7
        // compatibility" mode).
        // 
        // Usage:
        // 
        // jQuery.fn.hashchange.src = 'path/to/file.html';

        $.fn[str_hashchange].delay = 50;
        /*
  $.fn[ str_hashchange ].domain = null;
  $.fn[ str_hashchange ].src = null;
  */

        // Event: hashchange event
        // 
        // Fired when location.hash changes. In browsers that support it, the native
        // HTML5 window.onhashchange event is used, otherwise a polling loop is
        // initialized, running every <jQuery.fn.hashchange.delay> milliseconds to
        // see if the hash has changed. In IE6/7 (and IE8 operating in "IE7
        // compatibility" mode), a hidden Iframe is created to allow the back button
        // and hash-based history to work.
        // 
        // Usage as described in <jQuery.fn.hashchange>:
        // 
        // > // Bind an event handler.
        // > jQuery(window).hashchange( function(e) {
        // >   var hash = location.hash;
        // >   ...
        // > });
        // > 
        // > // Manually trigger the event handler.
        // > jQuery(window).hashchange();
        // 
        // A more verbose usage that allows for event namespacing:
        // 
        // > // Bind an event handler.
        // > jQuery(window).bind( 'hashchange', function(e) {
        // >   var hash = location.hash;
        // >   ...
        // > });
        // > 
        // > // Manually trigger the event handler.
        // > jQuery(window).trigger( 'hashchange' );
        // 
        // Additional Notes:
        // 
        // * The polling loop and Iframe are not created until at least one handler
        //   is actually bound to the 'hashchange' event.
        // * If you need the bound handler(s) to execute immediately, in cases where
        //   a location.hash exists on page load, via bookmark or page refresh for
        //   example, use jQuery(window).hashchange() or the more verbose 
        //   jQuery(window).trigger( 'hashchange' ).
        // * The event can be bound before DOM ready, but since it won't be usable
        //   before then in IE6/7 (due to the necessary Iframe), recommended usage is
        //   to bind it inside a DOM ready handler.

        // Override existing $.event.special.hashchange methods (allowing this plugin
        // to be defined after jQuery BBQ in BBQ's source code).
        special[str_hashchange] = $.extend(special[str_hashchange], {

            // Called only when the first 'hashchange' event is bound to window.
            setup: function() {
                // If window.onhashchange is supported natively, there's nothing to do..
                if (supports_onhashchange) {
                    return false;
                }

                // Otherwise, we need to create our own. And we don't want to call this
                // until the user binds to the event, just in case they never do, since it
                // will create a polling loop and possibly even a hidden Iframe.
                $(fake_onhashchange.start);
            },

            // Called only when the last 'hashchange' event is unbound from window.
            teardown: function() {
                // If window.onhashchange is supported natively, there's nothing to do..
                if (supports_onhashchange) {
                    return false;
                }

                // Otherwise, we need to stop ours (if possible).
                $(fake_onhashchange.stop);
            }

        });

        // fake_onhashchange does all the work of triggering the window.onhashchange
        // event for browsers that don't natively support it, including creating a
        // polling loop to watch for hash changes and in IE 6/7 creating a hidden
        // Iframe to enable back and forward.
        fake_onhashchange = (function() {
            var self = {},
                timeout_id,

                // Remember the initial hash so it doesn't get triggered immediately.
                last_hash = get_fragment(),

                fn_retval = function(val) {
                    return val;
                },
                history_set = fn_retval,
                history_get = fn_retval;

            // Start the polling loop.
            self.start = function() {
                timeout_id || poll();
            };

            // Stop the polling loop.
            self.stop = function() {
                timeout_id && clearTimeout(timeout_id);
                timeout_id = undefined;
            };

            // This polling loop checks every $.fn.hashchange.delay milliseconds to see
            // if location.hash has changed, and triggers the 'hashchange' event on
            // window when necessary.
            function poll() {
                var hash = get_fragment(),
                    history_hash = history_get(last_hash);

                if (hash !== last_hash) {
                    history_set(last_hash = hash, history_hash);

                    $(window).trigger(str_hashchange);

                } else if (history_hash !== last_hash) {
                    location.href = location.href.replace(/#.*/, '') + history_hash;
                }

                timeout_id = setTimeout(poll, $.fn[str_hashchange].delay);
            };

            // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
            // vvvvvvvvvvvvvvvvvvv REMOVE IF NOT SUPPORTING IE6/7/8 vvvvvvvvvvvvvvvvvvv
            // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
            window.attachEvent && !window.addEventListener && !supports_onhashchange && (function() {
                // Not only do IE6/7 need the "magical" Iframe treatment, but so does IE8
                // when running in "IE7 compatibility" mode.

                var iframe,
                    iframe_src;

                // When the event is bound and polling starts in IE 6/7, create a hidden
                // Iframe for history handling.
                self.start = function() {
                    if (!iframe) {
                        iframe_src = $.fn[str_hashchange].src;
                        iframe_src = iframe_src && iframe_src + get_fragment();

                        // Create hidden Iframe. Attempt to make Iframe as hidden as possible
                        // by using techniques from http://www.paciellogroup.com/blog/?p=604.
                        iframe = $('<iframe tabindex="-1" title="empty"/>').hide()

                        // When Iframe has completely loaded, initialize the history and
                        // start polling.
                        .one('load', function() {
                            iframe_src || history_set(get_fragment());
                            poll();
                        })

                        // Load Iframe src if specified, otherwise nothing.
                        .attr('src', iframe_src || 'javascript:0')

                        // Append Iframe after the end of the body to prevent unnecessary
                        // initial page scrolling (yes, this works).
                        .insertAfter('body')[0].contentWindow;

                        // Whenever `document.title` changes, update the Iframe's title to
                        // prettify the back/next history menu entries. Since IE sometimes
                        // errors with "Unspecified error" the very first time this is set
                        // (yes, very useful) wrap this with a try/catch block.
                        doc.onpropertychange = function() {
                            try {
                                if (event.propertyName === 'title') {
                                    iframe.document.title = doc.title;
                                }
                            } catch (e) {}
                        };

                    }
                };

                // Override the "stop" method since an IE6/7 Iframe was created. Even
                // if there are no longer any bound event handlers, the polling loop
                // is still necessary for back/next to work at all!
                self.stop = fn_retval;

                // Get history by looking at the hidden Iframe's location.hash.
                history_get = function() {
                    return get_fragment(iframe.location.href);
                };

                // Set a new history item by opening and then closing the Iframe
                // document, *then* setting its location.hash. If document.domain has
                // been set, update that as well.
                history_set = function(hash, history_hash) {
                    var iframe_doc = iframe.document,
                        domain = $.fn[str_hashchange].domain;

                    if (hash !== history_hash) {
                        // Update Iframe with any initial `document.title` that might be set.
                        iframe_doc.title = doc.title;

                        // Opening the Iframe's document after it has been closed is what
                        // actually adds a history entry.
                        iframe_doc.open();

                        // Set document.domain for the Iframe document as well, if necessary.
                        domain && iframe_doc.write('<script>document.domain="' + domain + '"</script>');

                        iframe_doc.close();

                        // Update the Iframe's hash, for great justice.
                        iframe.location.hash = hash;
                    }
                };

            })();
            // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            // ^^^^^^^^^^^^^^^^^^^ REMOVE IF NOT SUPPORTING IE6/7/8 ^^^^^^^^^^^^^^^^^^^
            // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

            return self;
        })();

    })(jQuery, this);

    (function($, undefined) {

        /*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas. Dual MIT/BSD license */
        window.matchMedia = window.matchMedia || (function(doc, undefined) {



            var bool,
                docElem = doc.documentElement,
                refNode = docElem.firstElementChild || docElem.firstChild,
                // fakeBody required for <FF4 when executed in <head>
                fakeBody = doc.createElement("body"),
                div = doc.createElement("div");

            div.id = "mq-test-1";
            div.style.cssText = "position:absolute;top:-100em";
            fakeBody.style.background = "none";
            fakeBody.appendChild(div);

            return function(q) {

                div.innerHTML = "&shy;<style media=\"" + q + "\"> #mq-test-1 { width: 42px; }</style>";

                docElem.insertBefore(fakeBody, refNode);
                bool = div.offsetWidth === 42;
                docElem.removeChild(fakeBody);

                return {
                    matches: bool,
                    media: q
                };

            };

        }(document));

        // $.mobile.media uses matchMedia to return a boolean.
        $.mobile.media = function(q) {
            return window.matchMedia(q).matches;
        };

    })(jQuery);

    (function($, undefined) {
        var support = {
            touch: "ontouchend" in document
        };

        $.mobile.support = $.mobile.support || {};
        $.extend($.support, support);
        $.extend($.mobile.support, support);
    }(jQuery));

    (function($, undefined) {
        $.extend($.support, {
            orientation: "orientation" in window && "onorientationchange" in window
        });
    }(jQuery));

    (function($, undefined) {

        // thx Modernizr
        function propExists(prop) {
            var uc_prop = prop.charAt(0).toUpperCase() + prop.substr(1),
                props = (prop + " " + vendors.join(uc_prop + " ") + uc_prop).split(" ");

            for (var v in props) {
                if (fbCSS[props[v]] !== undefined) {
                    return true;
                }
            }
        }

        var fakeBody = $("<body>").prependTo("html"),
            fbCSS = fakeBody[0].style,
            vendors = ["Webkit", "Moz", "O"],
            webos = "palmGetResource" in window, //only used to rule out scrollTop
            opera = window.opera,
            operamini = window.operamini && ({}).toString.call(window.operamini) === "[object OperaMini]",
            bb = window.blackberry && !propExists("-webkit-transform"); //only used to rule out box shadow, as it's filled opaque on BB 5 and lower


        function validStyle(prop, value, check_vend) {
            var div = document.createElement('div'),
                uc = function(txt) {
                    return txt.charAt(0).toUpperCase() + txt.substr(1);
                },
                vend_pref = function(vend) {
                    if (vend === "") {
                        return "";
                    } else {
                        return "-" + vend.charAt(0).toLowerCase() + vend.substr(1) + "-";
                    }
                },
                check_style = function(vend) {
                    var vend_prop = vend_pref(vend) + prop + ": " + value + ";",
                        uc_vend = uc(vend),
                        propStyle = uc_vend + (uc_vend === "" ? prop : uc(prop));

                    div.setAttribute("style", vend_prop);

                    if ( !! div.style[propStyle]) {
                        ret = true;
                    }
                },
                check_vends = check_vend ? check_vend : vendors,
                ret;

            for (var i = 0; i < check_vends.length; i++) {
                check_style(check_vends[i]);
            }
            return !!ret;
        }

        function transform3dTest() {
            var mqProp = "transform-3d",
                // Because the `translate3d` test below throws false positives in Android:
                ret = $.mobile.media("(-" + vendors.join("-" + mqProp + "),(-") + "-" + mqProp + "),(" + mqProp + ")");

            if (ret) {
                return !!ret;
            }

            var el = document.createElement("div"),
                transforms = {
                    // We’re omitting Opera for the time being; MS uses unprefixed.
                    'MozTransform': '-moz-transform',
                    'transform': 'transform'
                };

            fakeBody.append(el);

            for (var t in transforms) {
                if (el.style[t] !== undefined) {
                    el.style[t] = 'translate3d( 100px, 1px, 1px )';
                    ret = window.getComputedStyle(el).getPropertyValue(transforms[t]);
                }
            }
            return ( !! ret && ret !== "none");
        }

        // Test for dynamic-updating base tag support ( allows us to avoid href,src attr rewriting )
        function baseTagTest() {
            var fauxBase = location.protocol + "//" + location.host + location.pathname + "ui-dir/",
                base = $("head base"),
                fauxEle = null,
                href = "",
                link, rebase;

            if (!base.length) {
                base = fauxEle = $("<base>", {
                    "href": fauxBase
                }).appendTo("head");
            } else {
                href = base.attr("href");
            }

            link = $("<a href='testurl' />").prependTo(fakeBody);
            rebase = link[0].href;
            base[0].href = href || location.pathname;

            if (fauxEle) {
                fauxEle.remove();
            }
            return rebase.indexOf(fauxBase) === 0;
        }

        // Thanks Modernizr
        function cssPointerEventsTest() {
            var element = document.createElement('x'),
                documentElement = document.documentElement,
                getComputedStyle = window.getComputedStyle,
                supports;

            if (!('pointerEvents' in element.style)) {
                return false;
            }

            element.style.pointerEvents = 'auto';
            element.style.pointerEvents = 'x';
            documentElement.appendChild(element);
            supports = getComputedStyle &&
                getComputedStyle(element, '').pointerEvents === 'auto';
            documentElement.removeChild(element);
            return !!supports;
        }

        function boundingRect() {
            var div = document.createElement("div");
            return typeof div.getBoundingClientRect !== "undefined";
        }

        // non-UA-based IE version check by James Padolsey, modified by jdalton - from http://gist.github.com/527683
        // allows for inclusion of IE 6+, including Windows Mobile 7
        $.extend($.mobile, {
            browser: {}
        });
        $.mobile.browser.oldIE = (function() {
            var v = 3,
                div = document.createElement("div"),
                a = div.all || [];

            do {
                div.innerHTML = "<!--[if gt IE " + (++v) + "]><br><![endif]-->";
            } while (a[0]);

            return v > 4 ? v : !v;
        })();

        function fixedPosition() {
            var w = window,
                ua = navigator.userAgent,
                platform = navigator.platform,
                // Rendering engine is Webkit, and capture major version
                wkmatch = ua.match(/AppleWebKit\/([0-9]+)/),
                wkversion = !! wkmatch && wkmatch[1],
                ffmatch = ua.match(/Fennec\/([0-9]+)/),
                ffversion = !! ffmatch && ffmatch[1],
                operammobilematch = ua.match(/Opera Mobi\/([0-9]+)/),
                omversion = !! operammobilematch && operammobilematch[1];

            if (
                // iOS 4.3 and older : Platform is iPhone/Pad/Touch and Webkit version is less than 534 (ios5)
                ((platform.indexOf("iPhone") > -1 || platform.indexOf("iPad") > -1 || platform.indexOf("iPod") > -1) && wkversion && wkversion < 534) ||
                // Opera Mini
                (w.operamini && ({}).toString.call(w.operamini) === "[object OperaMini]") ||
                (operammobilematch && omversion < 7458) ||
                //Android lte 2.1: Platform is Android and Webkit version is less than 533 (Android 2.2)
                (ua.indexOf("Android") > -1 && wkversion && wkversion < 533) ||
                // Firefox Mobile before 6.0 -
                (ffversion && ffversion < 6) ||
                // WebOS less than 3
                ("palmGetResource" in window && wkversion && wkversion < 534) ||
                // MeeGo
                (ua.indexOf("MeeGo") > -1 && ua.indexOf("NokiaBrowser/8.5.0") > -1)) {
                return false;
            }

            return true;
        }

        $.extend($.support, {
            cssTransitions: "WebKitTransitionEvent" in window ||
                validStyle('transition', 'height 100ms linear', ["Webkit", "Moz", ""]) && !$.mobile.browser.oldIE && !opera,

            // Note, Chrome for iOS has an extremely quirky implementation of popstate.
            // We've chosen to take the shortest path to a bug fix here for issue #5426
            // See the following link for information about the regex chosen
            // https://developers.google.com/chrome/mobile/docs/user-agent#chrome_for_ios_user-agent
            pushState: "pushState" in history &&
                "replaceState" in history &&
            // When running inside a FF iframe, calling replaceState causes an error
            !(window.navigator.userAgent.indexOf("Firefox") >= 0 && window.top !== window) &&
                (window.navigator.userAgent.search(/CriOS/) === -1),

            mediaquery: $.mobile.media("only all"),
            cssPseudoElement: !! propExists("content"),
            touchOverflow: !! propExists("overflowScrolling"),
            cssTransform3d: transform3dTest(),
            boxShadow: !! propExists("boxShadow") && !bb,
            fixedPosition: fixedPosition(),
            scrollTop: ("pageXOffset" in window ||
                "scrollTop" in document.documentElement ||
                "scrollTop" in fakeBody[0]) && !webos && !operamini,

            dynamicBaseTag: baseTagTest(),
            cssPointerEvents: cssPointerEventsTest(),
            boundingRect: boundingRect()
        });

        fakeBody.remove();


        // $.mobile.ajaxBlacklist is used to override ajaxEnabled on platforms that have known conflicts with hash history updates (BB5, Symbian)
        // or that generally work better browsing in regular http for full page refreshes (Opera Mini)
        // Note: This detection below is used as a last resort.
        // We recommend only using these detection methods when all other more reliable/forward-looking approaches are not possible
        var nokiaLTE7_3 = (function() {

            var ua = window.navigator.userAgent;

            //The following is an attempt to match Nokia browsers that are running Symbian/s60, with webkit, version 7.3 or older
            return ua.indexOf("Nokia") > -1 &&
                (ua.indexOf("Symbian/3") > -1 || ua.indexOf("Series60/5") > -1) &&
                ua.indexOf("AppleWebKit") > -1 &&
                ua.match(/(BrowserNG|NokiaBrowser)\/7\.[0-3]/);
        })();

        // Support conditions that must be met in order to proceed
        // default enhanced qualifications are media query support OR IE 7+

        $.mobile.gradeA = function() {
            return ($.support.mediaquery || $.mobile.browser.oldIE && $.mobile.browser.oldIE >= 7) && ($.support.boundingRect || $.fn.jquery.match(/1\.[0-7+]\.[0-9+]?/) !== null);
        };

        $.mobile.ajaxBlacklist =
        // BlackBerry browsers, pre-webkit
        window.blackberry && !window.WebKitPoint ||
        // Opera Mini
        operamini ||
        // Symbian webkits pre 7.3
        nokiaLTE7_3;

        // Lastly, this workaround is the only way we've found so far to get pre 7.3 Symbian webkit devices
        // to render the stylesheets when they're referenced before this script, as we'd recommend doing.
        // This simply reappends the CSS in place, which for some reason makes it apply
        if (nokiaLTE7_3) {
            $(function() {
                $("head link[rel='stylesheet']").attr("rel", "alternate stylesheet").attr("rel", "stylesheet");
            });
        }

        // For ruling out shadows via css
        if (!$.support.boxShadow) {
            $("html").addClass("ui-mobile-nosupport-boxshadow");
        }

    })(jQuery);


    (function($, undefined) {
        var $win = $.mobile.window,
            self, history;

        $.event.special.navigate = self = {
            bound: false,

            pushStateEnabled: true,

            originalEventName: undefined,

            // If pushstate support is present and push state support is defined to
            // be true on the mobile namespace.
            isPushStateEnabled: function() {
                return $.support.pushState &&
                    $.mobile.pushStateEnabled === true &&
                    this.isHashChangeEnabled();
            },

            // !! assumes mobile namespace is present
            isHashChangeEnabled: function() {
                return $.mobile.hashListeningEnabled === true;
            },

            // TODO a lot of duplication between popstate and hashchange
            popstate: function(event) {
                var newEvent = new $.Event("navigate"),
                    beforeNavigate = new $.Event("beforenavigate"),
                    state = event.originalEvent.state || {},
                    href = location.href;

                $win.trigger(beforeNavigate);

                if (beforeNavigate.isDefaultPrevented()) {
                    return;
                }

                if (event.historyState) {
                    $.extend(state, event.historyState);
                }

                // Make sure the original event is tracked for the end
                // user to inspect incase they want to do something special
                newEvent.originalEvent = event;

                // NOTE we let the current stack unwind because any assignment to
                //      location.hash will stop the world and run this event handler. By
                //      doing this we create a similar behavior to hashchange on hash
                //      assignment
                setTimeout(function() {
                    $win.trigger(newEvent, {
                        state: state
                    });
                }, 0);
            },

            hashchange: function(event, data) {
                var newEvent = new $.Event("navigate"),
                    beforeNavigate = new $.Event("beforenavigate");

                $win.trigger(beforeNavigate);

                if (beforeNavigate.isDefaultPrevented()) {
                    return;
                }

                // Make sure the original event is tracked for the end
                // user to inspect incase they want to do something special
                newEvent.originalEvent = event;

                // Trigger the hashchange with state provided by the user
                // that altered the hash
                $win.trigger(newEvent, {
                    // Users that want to fully normalize the two events
                    // will need to do history management down the stack and
                    // add the state to the event before this binding is fired
                    // TODO consider allowing for the explicit addition of callbacks
                    //      to be fired before this value is set to avoid event timing issues
                    state: event.hashchangeState || {}
                });
            },

            // TODO We really only want to set this up once
            //      but I'm not clear if there's a beter way to achieve
            //      this with the jQuery special event structure
            setup: function(data, namespaces) {
                if (self.bound) {
                    return;
                }

                self.bound = true;

                if (self.isPushStateEnabled()) {
                    self.originalEventName = "popstate";
                    $win.bind("popstate.navigate", self.popstate);
                } else if (self.isHashChangeEnabled()) {
                    self.originalEventName = "hashchange";
                    $win.bind("hashchange.navigate", self.hashchange);
                }
            }
        };
    })(jQuery);



    (function($, undefined) {
        var path, documentBase, $base, dialogHashKey = "&ui-state=dialog";

        $.mobile.path = path = {
            uiStateKey: "&ui-state",

            // This scary looking regular expression parses an absolute URL or its relative
            // variants (protocol, site, document, query, and hash), into the various
            // components (protocol, host, path, query, fragment, etc that make up the
            // URL as well as some other commonly used sub-parts. When used with RegExp.exec()
            // or String.match, it parses the URL into a results array that looks like this:
            //
            //     [0]: http://jblas:password@mycompany.com:8080/mail/inbox?msg=1234&type=unread#msg-content
            //     [1]: http://jblas:password@mycompany.com:8080/mail/inbox?msg=1234&type=unread
            //     [2]: http://jblas:password@mycompany.com:8080/mail/inbox
            //     [3]: http://jblas:password@mycompany.com:8080
            //     [4]: http:
            //     [5]: //
            //     [6]: jblas:password@mycompany.com:8080
            //     [7]: jblas:password
            //     [8]: jblas
            //     [9]: password
            //    [10]: mycompany.com:8080
            //    [11]: mycompany.com
            //    [12]: 8080
            //    [13]: /mail/inbox
            //    [14]: /mail/
            //    [15]: inbox
            //    [16]: ?msg=1234&type=unread
            //    [17]: #msg-content
            //
            urlParseRE: /^\s*(((([^:\/#\?]+:)?(?:(\/\/)((?:(([^:@\/#\?]+)(?:\:([^:@\/#\?]+))?)@)?(([^:\/#\?\]\[]+|\[[^\/\]@#?]+\])(?:\:([0-9]+))?))?)?)?((\/?(?:[^\/\?#]+\/+)*)([^\?#]*)))?(\?[^#]+)?)(#.*)?/,

            // Abstraction to address xss (Issue #4787) by removing the authority in
            // browsers that auto	decode it. All references to location.href should be
            // replaced with a call to this method so that it can be dealt with properly here
            getLocation: function(url) {
                var uri = url ? this.parseUrl(url) : location,
                    hash = this.parseUrl(url || location.href).hash;

                // mimic the browser with an empty string when the hash is empty
                hash = hash === "#" ? "" : hash;

                // Make sure to parse the url or the location object for the hash because using location.hash
                // is autodecoded in firefox, the rest of the url should be from the object (location unless
                // we're testing) to avoid the inclusion of the authority
                return uri.protocol + "//" + uri.host + uri.pathname + uri.search + hash;
            },

            parseLocation: function() {
                return this.parseUrl(this.getLocation());
            },

            //Parse a URL into a structure that allows easy access to
            //all of the URL components by name.
            parseUrl: function(url) {
                // If we're passed an object, we'll assume that it is
                // a parsed url object and just return it back to the caller.
                if ($.type(url) === "object") {
                    return url;
                }

                var matches = path.urlParseRE.exec(url || "") || [];

                // Create an object that allows the caller to access the sub-matches
                // by name. Note that IE returns an empty string instead of undefined,
                // like all other browsers do, so we normalize everything so its consistent
                // no matter what browser we're running on.
                return {
                    href: matches[0] || "",
                    hrefNoHash: matches[1] || "",
                    hrefNoSearch: matches[2] || "",
                    domain: matches[3] || "",
                    protocol: matches[4] || "",
                    doubleSlash: matches[5] || "",
                    authority: matches[6] || "",
                    username: matches[8] || "",
                    password: matches[9] || "",
                    host: matches[10] || "",
                    hostname: matches[11] || "",
                    port: matches[12] || "",
                    pathname: matches[13] || "",
                    directory: matches[14] || "",
                    filename: matches[15] || "",
                    search: matches[16] || "",
                    hash: matches[17] || ""
                };
            },

            //Turn relPath into an asbolute path. absPath is
            //an optional absolute path which describes what
            //relPath is relative to.
            makePathAbsolute: function(relPath, absPath) {
                if (relPath && relPath.charAt(0) === "/") {
                    return relPath;
                }

                relPath = relPath || "";
                absPath = absPath ? absPath.replace(/^\/|(\/[^\/]*|[^\/]+)$/g, "") : "";

                var absStack = absPath ? absPath.split("/") : [],
                    relStack = relPath.split("/");
                for (var i = 0; i < relStack.length; i++) {
                    var d = relStack[i];
                    switch (d) {
                        case ".":
                            break;
                        case "..":
                            if (absStack.length) {
                                absStack.pop();
                            }
                            break;
                        default:
                            absStack.push(d);
                            break;
                    }
                }
                return "/" + absStack.join("/");
            },

            //Returns true if both urls have the same domain.
            isSameDomain: function(absUrl1, absUrl2) {
                return path.parseUrl(absUrl1).domain === path.parseUrl(absUrl2).domain;
            },

            //Returns true for any relative variant.
            isRelativeUrl: function(url) {
                // All relative Url variants have one thing in common, no protocol.
                return path.parseUrl(url).protocol === "";
            },

            //Returns true for an absolute url.
            isAbsoluteUrl: function(url) {
                return path.parseUrl(url).protocol !== "";
            },

            //Turn the specified realtive URL into an absolute one. This function
            //can handle all relative variants (protocol, site, document, query, fragment).
            makeUrlAbsolute: function(relUrl, absUrl) {
                if (!path.isRelativeUrl(relUrl)) {
                    return relUrl;
                }

                if (absUrl === undefined) {
                    absUrl = this.documentBase;
                }

                var relObj = path.parseUrl(relUrl),
                    absObj = path.parseUrl(absUrl),
                    protocol = relObj.protocol || absObj.protocol,
                    doubleSlash = relObj.protocol ? relObj.doubleSlash : (relObj.doubleSlash || absObj.doubleSlash),
                    authority = relObj.authority || absObj.authority,
                    hasPath = relObj.pathname !== "",
                    pathname = path.makePathAbsolute(relObj.pathname || absObj.filename, absObj.pathname),
                    search = relObj.search || (!hasPath && absObj.search) || "",
                    hash = relObj.hash;

                return protocol + doubleSlash + authority + pathname + search + hash;
            },

            //Add search (aka query) params to the specified url.
            addSearchParams: function(url, params) {
                var u = path.parseUrl(url),
                    p = (typeof params === "object") ? $.param(params) : params,
                    s = u.search || "?";
                return u.hrefNoSearch + s + (s.charAt(s.length - 1) !== "?" ? "&" : "") + p + (u.hash || "");
            },

            convertUrlToDataUrl: function(absUrl) {
                var u = path.parseUrl(absUrl);
                if (path.isEmbeddedPage(u)) {
                    // For embedded pages, remove the dialog hash key as in getFilePath(),
                    // and remove otherwise the Data Url won't match the id of the embedded Page.
                    return u.hash
                        .split(dialogHashKey)[0]
                        .replace(/^#/, "")
                        .replace(/\?.*$/, "");
                } else if (path.isSameDomain(u, this.documentBase)) {
                    return u.hrefNoHash.replace(this.documentBase.domain, "").split(dialogHashKey)[0];
                }

                return window.decodeURIComponent(absUrl);
            },

            //get path from current hash, or from a file path
            get: function(newPath) {
                if (newPath === undefined) {
                    newPath = path.parseLocation().hash;
                }
                return path.stripHash(newPath).replace(/[^\/]*\.[^\/*]+$/, '');
            },

            //set location hash to path
            set: function(path) {
                location.hash = path;
            },

            //test if a given url (string) is a path
            //NOTE might be exceptionally naive
            isPath: function(url) {
                return (/\//).test(url);
            },

            //return a url path with the window's location protocol/hostname/pathname removed
            clean: function(url) {
                return url.replace(this.documentBase.domain, "");
            },

            //just return the url without an initial #
            stripHash: function(url) {
                return url.replace(/^#/, "");
            },

            stripQueryParams: function(url) {
                return url.replace(/\?.*$/, "");
            },

            //remove the preceding hash, any query params, and dialog notations
            cleanHash: function(hash) {
                return path.stripHash(hash.replace(/\?.*$/, "").replace(dialogHashKey, ""));
            },

            isHashValid: function(hash) {
                return (/^#[^#]+$/).test(hash);
            },

            //check whether a url is referencing the same domain, or an external domain or different protocol
            //could be mailto, etc
            isExternal: function(url) {
                var u = path.parseUrl(url);
                return u.protocol && u.domain !== this.documentUrl.domain ? true : false;
            },

            hasProtocol: function(url) {
                return (/^(:?\w+:)/).test(url);
            },

            isEmbeddedPage: function(url) {
                var u = path.parseUrl(url);

                //if the path is absolute, then we need to compare the url against
                //both the this.documentUrl and the documentBase. The main reason for this
                //is that links embedded within external documents will refer to the
                //application document, whereas links embedded within the application
                //document will be resolved against the document base.
                if (u.protocol !== "") {
                    return (!this.isPath(u.hash) && u.hash && (u.hrefNoHash === this.documentUrl.hrefNoHash || (this.documentBaseDiffers && u.hrefNoHash === this.documentBase.hrefNoHash)));
                }
                return (/^#/).test(u.href);
            },

            squash: function(url, resolutionUrl) {
                var state, href, cleanedUrl, search, stateIndex,
                    isPath = this.isPath(url),
                    uri = this.parseUrl(url),
                    preservedHash = uri.hash,
                    uiState = "";

                // produce a url against which we can resole the provided path
                resolutionUrl = resolutionUrl || (path.isPath(url) ? path.getLocation() : path.getDocumentUrl());

                // If the url is anything but a simple string, remove any preceding hash
                // eg #foo/bar -> foo/bar
                //    #foo -> #foo
                cleanedUrl = isPath ? path.stripHash(url) : url;

                // If the url is a full url with a hash check if the parsed hash is a path
                // if it is, strip the #, and use it otherwise continue without change
                cleanedUrl = path.isPath(uri.hash) ? path.stripHash(uri.hash) : cleanedUrl;

                // Split the UI State keys off the href
                stateIndex = cleanedUrl.indexOf(this.uiStateKey);

                // store the ui state keys for use
                if (stateIndex > -1) {
                    uiState = cleanedUrl.slice(stateIndex);
                    cleanedUrl = cleanedUrl.slice(0, stateIndex);
                }

                // make the cleanedUrl absolute relative to the resolution url
                href = path.makeUrlAbsolute(cleanedUrl, resolutionUrl);

                // grab the search from the resolved url since parsing from
                // the passed url may not yield the correct result
                search = this.parseUrl(href).search;

                // TODO all this crap is terrible, clean it up
                if (isPath) {
                    // reject the hash if it's a path or it's just a dialog key
                    if (path.isPath(preservedHash) || preservedHash.replace("#", "").indexOf(this.uiStateKey) === 0) {
                        preservedHash = "";
                    }

                    // Append the UI State keys where it exists and it's been removed
                    // from the url
                    if (uiState && preservedHash.indexOf(this.uiStateKey) === -1) {
                        preservedHash += uiState;
                    }

                    // make sure that pound is on the front of the hash
                    if (preservedHash.indexOf("#") === -1 && preservedHash !== "") {
                        preservedHash = "#" + preservedHash;
                    }

                    // reconstruct each of the pieces with the new search string and hash
                    href = path.parseUrl(href);
                    href = href.protocol + "//" + href.host + href.pathname + search + preservedHash;
                } else {
                    href += href.indexOf("#") > -1 ? uiState : "#" + uiState;
                }

                return href;
            },

            isPreservableHash: function(hash) {
                return hash.replace("#", "").indexOf(this.uiStateKey) === 0;
            }
        };

        path.documentUrl = path.parseLocation();

        $base = $("head").find("base");

        path.documentBase = $base.length ?
            path.parseUrl(path.makeUrlAbsolute($base.attr("href"), path.documentUrl.href)) :
            path.documentUrl;

        path.documentBaseDiffers = (path.documentUrl.hrefNoHash !== path.documentBase.hrefNoHash);

        //return the original document url
        path.getDocumentUrl = function(asParsedObject) {
            return asParsedObject ? $.extend({}, path.documentUrl) : path.documentUrl.href;
        };

        //return the original document base url
        path.getDocumentBase = function(asParsedObject) {
            return asParsedObject ? $.extend({}, path.documentBase) : path.documentBase.href;
        };
    })(jQuery);



    (function($, undefined) {
        var path = $.mobile.path;

        $.mobile.History = function(stack, index) {
            this.stack = stack || [];
            this.activeIndex = index || 0;
        };

        $.extend($.mobile.History.prototype, {
            getActive: function() {
                return this.stack[this.activeIndex];
            },

            getLast: function() {
                return this.stack[this.previousIndex];
            },

            getNext: function() {
                return this.stack[this.activeIndex + 1];
            },

            getPrev: function() {
                return this.stack[this.activeIndex - 1];
            },

            // addNew is used whenever a new page is added
            add: function(url, data) {
                data = data || {};

                //if there's forward history, wipe it
                if (this.getNext()) {
                    this.clearForward();
                }

                // if the hash is included in the data make sure the shape
                // is consistent for comparison
                if (data.hash && data.hash.indexOf("#") === -1) {
                    data.hash = "#" + data.hash;
                }

                data.url = url;
                this.stack.push(data);
                this.activeIndex = this.stack.length - 1;
            },

            //wipe urls ahead of active index
            clearForward: function() {
                this.stack = this.stack.slice(0, this.activeIndex + 1);
            },

            find: function(url, stack, earlyReturn) {
                stack = stack || this.stack;

                var entry, i, length = stack.length,
                    index;

                for (i = 0; i < length; i++) {
                    entry = stack[i];

                    if (decodeURIComponent(url) === decodeURIComponent(entry.url) ||
                        decodeURIComponent(url) === decodeURIComponent(entry.hash)) {
                        index = i;

                        if (earlyReturn) {
                            return index;
                        }
                    }
                }

                return index;
            },

            closest: function(url) {
                var closest, a = this.activeIndex;

                // First, take the slice of the history stack before the current index and search
                // for a url match. If one is found, we'll avoid avoid looking through forward history
                // NOTE the preference for backward history movement is driven by the fact that
                //      most mobile browsers only have a dedicated back button, and users rarely use
                //      the forward button in desktop browser anyhow
                closest = this.find(url, this.stack.slice(0, a));

                // If nothing was found in backward history check forward. The `true`
                // value passed as the third parameter causes the find method to break
                // on the first match in the forward history slice. The starting index
                // of the slice must then be added to the result to get the element index
                // in the original history stack :( :(
                //
                // TODO this is hyper confusing and should be cleaned up (ugh so bad)
                if (closest === undefined) {
                    closest = this.find(url, this.stack.slice(a), true);
                    closest = closest === undefined ? closest : closest + a;
                }

                return closest;
            },

            direct: function(opts) {
                var newActiveIndex = this.closest(opts.url),
                    a = this.activeIndex;

                // save new page index, null check to prevent falsey 0 result
                // record the previous index for reference
                if (newActiveIndex !== undefined) {
                    this.activeIndex = newActiveIndex;
                    this.previousIndex = a;
                }

                // invoke callbacks where appropriate
                //
                // TODO this is also convoluted and confusing
                if (newActiveIndex < a) {
                    (opts.present || opts.back || $.noop)(this.getActive(), 'back');
                } else if (newActiveIndex > a) {
                    (opts.present || opts.forward || $.noop)(this.getActive(), 'forward');
                } else if (newActiveIndex === undefined && opts.missing) {
                    opts.missing(this.getActive());
                }
            }
        });
    })(jQuery);


    (function($, undefined) {
        var path = $.mobile.path,
            initialHref = location.href;

        $.mobile.Navigator = function(history) {
            this.history = history;
            this.ignoreInitialHashChange = true;

            $.mobile.window.bind({
                "popstate.history": $.proxy(this.popstate, this),
                "hashchange.history": $.proxy(this.hashchange, this)
            });
        };

        $.extend($.mobile.Navigator.prototype, {
            squash: function(url, data) {
                var state, href, hash = path.isPath(url) ? path.stripHash(url) : url;

                href = path.squash(url);

                // make sure to provide this information when it isn't explicitly set in the
                // data object that was passed to the squash method
                state = $.extend({
                    hash: hash,
                    url: href
                }, data);

                // replace the current url with the new href and store the state
                // Note that in some cases we might be replacing an url with the
                // same url. We do this anyways because we need to make sure that
                // all of our history entries have a state object associated with
                // them. This allows us to work around the case where $.mobile.back()
                // is called to transition from an external page to an embedded page.
                // In that particular case, a hashchange event is *NOT* generated by the browser.
                // Ensuring each history entry has a state object means that onPopState()
                // will always trigger our hashchange callback even when a hashchange event
                // is not fired.
                window.history.replaceState(state, state.title || document.title, href);

                return state;
            },

            hash: function(url, href) {
                var parsed, loc, hash;

                // Grab the hash for recording. If the passed url is a path
                // we used the parsed version of the squashed url to reconstruct,
                // otherwise we assume it's a hash and store it directly
                parsed = path.parseUrl(url);
                loc = path.parseLocation();

                if (loc.pathname + loc.search === parsed.pathname + parsed.search) {
                    // If the pathname and search of the passed url is identical to the current loc
                    // then we must use the hash. Otherwise there will be no event
                    // eg, url = "/foo/bar?baz#bang", location.href = "http://example.com/foo/bar?baz"
                    hash = parsed.hash ? parsed.hash : parsed.pathname + parsed.search;
                } else if (path.isPath(url)) {
                    var resolved = path.parseUrl(href);
                    // If the passed url is a path, make it domain relative and remove any trailing hash
                    hash = resolved.pathname + resolved.search + (path.isPreservableHash(resolved.hash) ? resolved.hash.replace("#", "") : "");
                } else {
                    hash = url;
                }

                return hash;
            },

            // TODO reconsider name
            go: function(url, data, noEvents) {
                var state, href, hash, popstateEvent,
                    isPopStateEvent = $.event.special.navigate.isPushStateEnabled();

                // Get the url as it would look squashed on to the current resolution url
                href = path.squash(url);

                // sort out what the hash sould be from the url
                hash = this.hash(url, href);

                // Here we prevent the next hash change or popstate event from doing any
                // history management. In the case of hashchange we don't swallow it
                // if there will be no hashchange fired (since that won't reset the value)
                // and will swallow the following hashchange
                if (noEvents && hash !== path.stripHash(path.parseLocation().hash)) {
                    this.preventNextHashChange = noEvents;
                }

                // IMPORTANT in the case where popstate is supported the event will be triggered
                //      directly, stopping further execution - ie, interupting the flow of this
                //      method call to fire bindings at this expression. Below the navigate method
                //      there is a binding to catch this event and stop its propagation.
                //
                //      We then trigger a new popstate event on the window with a null state
                //      so that the navigate events can conclude their work properly
                //
                // if the url is a path we want to preserve the query params that are available on
                // the current url.
                this.preventHashAssignPopState = true;
                window.location.hash = hash;

                // If popstate is enabled and the browser triggers `popstate` events when the hash
                // is set (this often happens immediately in browsers like Chrome), then the
                // this flag will be set to false already. If it's a browser that does not trigger
                // a `popstate` on hash assignement or `replaceState` then we need avoid the branch
                // that swallows the event created by the popstate generated by the hash assignment
                // At the time of this writing this happens with Opera 12 and some version of IE
                this.preventHashAssignPopState = false;

                state = $.extend({
                    url: href,
                    hash: hash,
                    title: document.title
                }, data);

                if (isPopStateEvent) {
                    popstateEvent = new $.Event("popstate");
                    popstateEvent.originalEvent = {
                        type: "popstate",
                        state: null
                    };

                    this.squash(url, state);

                    // Trigger a new faux popstate event to replace the one that we
                    // caught that was triggered by the hash setting above.
                    if (!noEvents) {
                        this.ignorePopState = true;
                        $.mobile.window.trigger(popstateEvent);
                    }
                }

                // record the history entry so that the information can be included
                // in hashchange event driven navigate events in a similar fashion to
                // the state that's provided by popstate
                this.history.add(state.url, state);
            },


            // This binding is intended to catch the popstate events that are fired
            // when execution of the `$.navigate` method stops at window.location.hash = url;
            // and completely prevent them from propagating. The popstate event will then be
            // retriggered after execution resumes
            //
            // TODO grab the original event here and use it for the synthetic event in the
            //      second half of the navigate execution that will follow this binding
            popstate: function(event) {
                var active, hash, state, closestIndex;

                // Partly to support our test suite which manually alters the support
                // value to test hashchange. Partly to prevent all around weirdness
                if (!$.event.special.navigate.isPushStateEnabled()) {
                    return;
                }

                // If this is the popstate triggered by the actual alteration of the hash
                // prevent it completely. History is tracked manually
                if (this.preventHashAssignPopState) {
                    this.preventHashAssignPopState = false;
                    event.stopImmediatePropagation();
                    return;
                }

                // if this is the popstate triggered after the `replaceState` call in the go
                // method, then simply ignore it. The history entry has already been captured
                if (this.ignorePopState) {
                    this.ignorePopState = false;
                    return;
                }

                // If there is no state, and the history stack length is one were
                // probably getting the page load popstate fired by browsers like chrome
                // avoid it and set the one time flag to false.
                // TODO: Do we really need all these conditions? Comparing location hrefs
                // should be sufficient.
                if (!event.originalEvent.state &&
                    this.history.stack.length === 1 &&
                    this.ignoreInitialHashChange) {
                    this.ignoreInitialHashChange = false;

                    if (location.href === initialHref) {
                        event.preventDefault();
                        return;
                    }
                }

                // account for direct manipulation of the hash. That is, we will receive a popstate
                // when the hash is changed by assignment, and it won't have a state associated. We
                // then need to squash the hash. See below for handling of hash assignment that
                // matches an existing history entry
                // TODO it might be better to only add to the history stack
                //      when the hash is adjacent to the active history entry
                hash = path.parseLocation().hash;
                if (!event.originalEvent.state && hash) {
                    // squash the hash that's been assigned on the URL with replaceState
                    // also grab the resulting state object for storage
                    state = this.squash(hash);

                    // record the new hash as an additional history entry
                    // to match the browser's treatment of hash assignment
                    this.history.add(state.url, state);

                    // pass the newly created state information
                    // along with the event
                    event.historyState = state;

                    // do not alter history, we've added a new history entry
                    // so we know where we are
                    return;
                }

                // If all else fails this is a popstate that comes from the back or forward buttons
                // make sure to set the state of our history stack properly, and record the directionality
                this.history.direct({
                    url: (event.originalEvent.state || {}).url || hash,

                    // When the url is either forward or backward in history include the entry
                    // as data on the event object for merging as data in the navigate event
                    present: function(historyEntry, direction) {
                        // make sure to create a new object to pass down as the navigate event data
                        event.historyState = $.extend({}, historyEntry);
                        event.historyState.direction = direction;
                    }
                });
            },

            // NOTE must bind before `navigate` special event hashchange binding otherwise the
            //      navigation data won't be attached to the hashchange event in time for those
            //      bindings to attach it to the `navigate` special event
            // TODO add a check here that `hashchange.navigate` is bound already otherwise it's
            //      broken (exception?)
            hashchange: function(event) {
                var history, hash;

                // If hashchange listening is explicitly disabled or pushstate is supported
                // avoid making use of the hashchange handler.
                if (!$.event.special.navigate.isHashChangeEnabled() ||
                    $.event.special.navigate.isPushStateEnabled()) {
                    return;
                }

                // On occasion explicitly want to prevent the next hash from propogating because we only
                // with to alter the url to represent the new state do so here
                if (this.preventNextHashChange) {
                    this.preventNextHashChange = false;
                    event.stopImmediatePropagation();
                    return;
                }

                history = this.history;
                hash = path.parseLocation().hash;

                // If this is a hashchange caused by the back or forward button
                // make sure to set the state of our history stack properly
                this.history.direct({
                    url: hash,

                    // When the url is either forward or backward in history include the entry
                    // as data on the event object for merging as data in the navigate event
                    present: function(historyEntry, direction) {
                        // make sure to create a new object to pass down as the navigate event data
                        event.hashchangeState = $.extend({}, historyEntry);
                        event.hashchangeState.direction = direction;
                    },

                    // When we don't find a hash in our history clearly we're aiming to go there
                    // record the entry as new for future traversal
                    //
                    // NOTE it's not entirely clear that this is the right thing to do given that we
                    //      can't know the users intention. It might be better to explicitly _not_
                    //      support location.hash assignment in preference to $.navigate calls
                    // TODO first arg to add should be the href, but it causes issues in identifying
                    //      embeded pages
                    missing: function() {
                        history.add(hash, {
                            hash: hash,
                            title: document.title
                        });
                    }
                });
            }
        });
    })(jQuery);



    (function($, undefined) {
        // TODO consider queueing navigation activity until previous activities have completed
        //      so that end users don't have to think about it. Punting for now
        // TODO !! move the event bindings into callbacks on the navigate event
        $.mobile.navigate = function(url, data, noEvents) {
            $.mobile.navigate.navigator.go(url, data, noEvents);
        };

        // expose the history on the navigate method in anticipation of full integration with
        // existing navigation functionalty that is tightly coupled to the history information
        $.mobile.navigate.history = new $.mobile.History();

        // instantiate an instance of the navigator for use within the $.navigate method
        $.mobile.navigate.navigator = new $.mobile.Navigator($.mobile.navigate.history);

        var loc = $.mobile.path.parseLocation();
        $.mobile.navigate.history.add(loc.href, {
            hash: loc.hash
        });
    })(jQuery);


    // This plugin is an experiment for abstracting away the touch and mouse
    // events so that developers don't have to worry about which method of input
    // the device their document is loaded on supports.
    //
    // The idea here is to allow the developer to register listeners for the
    // basic mouse events, such as mousedown, mousemove, mouseup, and click,
    // and the plugin will take care of registering the correct listeners
    // behind the scenes to invoke the listener at the fastest possible time
    // for that device, while still retaining the order of event firing in
    // the traditional mouse environment, should multiple handlers be registered
    // on the same element for different events.
    //
    // The current version exposes the following virtual events to jQuery bind methods:
    // "vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel"

    (function($, window, document, undefined) {

        var dataPropertyName = "virtualMouseBindings",
            touchTargetPropertyName = "virtualTouchID",
            virtualEventNames = "vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split(" "),
            touchEventProps = "clientX clientY pageX pageY screenX screenY".split(" "),
            mouseHookProps = $.event.mouseHooks ? $.event.mouseHooks.props : [],
            mouseEventProps = $.event.props.concat(mouseHookProps),
            activeDocHandlers = {},
            resetTimerID = 0,
            startX = 0,
            startY = 0,
            didScroll = false,
            clickBlockList = [],
            blockMouseTriggers = false,
            blockTouchTriggers = false,
            eventCaptureSupported = "addEventListener" in document,
            $document = $(document),
            nextTouchID = 1,
            lastTouchID = 0,
            threshold;

        $.vmouse = {
            moveDistanceThreshold: 10,
            clickDistanceThreshold: 10,
            resetTimerDuration: 1500
        };

        function getNativeEvent(event) {

            while (event && typeof event.originalEvent !== "undefined") {
                event = event.originalEvent;
            }
            return event;
        }

        function createVirtualEvent(event, eventType) {

            var t = event.type,
                oe, props, ne, prop, ct, touch, i, j, len;

            event = $.Event(event);
            event.type = eventType;

            oe = event.originalEvent;
            props = $.event.props;

            // addresses separation of $.event.props in to $.event.mouseHook.props and Issue 3280
            // https://github.com/jquery/jquery-mobile/issues/3280
            if (t.search(/^(mouse|click)/) > -1) {
                props = mouseEventProps;
            }

            // copy original event properties over to the new event
            // this would happen if we could call $.event.fix instead of $.Event
            // but we don't have a way to force an event to be fixed multiple times
            if (oe) {
                for (i = props.length, prop; i;) {
                    prop = props[--i];
                    event[prop] = oe[prop];
                }
            }

            // make sure that if the mouse and click virtual events are generated
            // without a .which one is defined
            if (t.search(/mouse(down|up)|click/) > -1 && !event.which) {
                event.which = 1;
            }

            if (t.search(/^touch/) !== -1) {
                ne = getNativeEvent(oe);
                t = ne.touches;
                ct = ne.changedTouches;
                touch = (t && t.length) ? t[0] : ((ct && ct.length) ? ct[0] : undefined);

                if (touch) {
                    for (j = 0, len = touchEventProps.length; j < len; j++) {
                        prop = touchEventProps[j];
                        event[prop] = touch[prop];
                    }
                }
            }

            return event;
        }

        function getVirtualBindingFlags(element) {

            var flags = {},
                b, k;

            while (element) {

                b = $.data(element, dataPropertyName);

                for (k in b) {
                    if (b[k]) {
                        flags[k] = flags.hasVirtualBinding = true;
                    }
                }
                element = element.parentNode;
            }
            return flags;
        }

        function getClosestElementWithVirtualBinding(element, eventType) {
            var b;
            while (element) {

                b = $.data(element, dataPropertyName);

                if (b && (!eventType || b[eventType])) {
                    return element;
                }
                element = element.parentNode;
            }
            return null;
        }

        function enableTouchBindings() {
            blockTouchTriggers = false;
        }

        function disableTouchBindings() {
            blockTouchTriggers = true;
        }

        function enableMouseBindings() {
            lastTouchID = 0;
            clickBlockList.length = 0;
            blockMouseTriggers = false;

            // When mouse bindings are enabled, our
            // touch bindings are disabled.
            disableTouchBindings();
        }

        function disableMouseBindings() {
            // When mouse bindings are disabled, our
            // touch bindings are enabled.
            enableTouchBindings();
        }

        function startResetTimer() {
            clearResetTimer();
            resetTimerID = setTimeout(function() {
                resetTimerID = 0;
                enableMouseBindings();
            }, $.vmouse.resetTimerDuration);
        }

        function clearResetTimer() {
            if (resetTimerID) {
                clearTimeout(resetTimerID);
                resetTimerID = 0;
            }
        }

        function triggerVirtualEvent(eventType, event, flags) {
            var ve;

            if ((flags && flags[eventType]) ||
                (!flags && getClosestElementWithVirtualBinding(event.target, eventType))) {

                ve = createVirtualEvent(event, eventType);

                $(event.target).trigger(ve);
            }

            return ve;
        }

        function mouseEventCallback(event) {
            var touchID = $.data(event.target, touchTargetPropertyName);

            if (!blockMouseTriggers && (!lastTouchID || lastTouchID !== touchID)) {
                var ve = triggerVirtualEvent("v" + event.type, event);
                if (ve) {
                    if (ve.isDefaultPrevented()) {
                        event.preventDefault();
                    }
                    if (ve.isPropagationStopped()) {
                        event.stopPropagation();
                    }
                    if (ve.isImmediatePropagationStopped()) {
                        event.stopImmediatePropagation();
                    }
                }
            }
        }

        function handleTouchStart(event) {

            var touches = getNativeEvent(event).touches,
                target, flags;

            if (touches && touches.length === 1) {

                target = event.target;
                flags = getVirtualBindingFlags(target);

                if (flags.hasVirtualBinding) {

                    lastTouchID = nextTouchID++;
                    $.data(target, touchTargetPropertyName, lastTouchID);

                    clearResetTimer();

                    disableMouseBindings();
                    didScroll = false;

                    var t = getNativeEvent(event).touches[0];
                    startX = t.pageX;
                    startY = t.pageY;

                    triggerVirtualEvent("vmouseover", event, flags);
                    triggerVirtualEvent("vmousedown", event, flags);
                }
            }
        }

        function handleScroll(event) {
            if (blockTouchTriggers) {
                return;
            }

            if (!didScroll) {
                triggerVirtualEvent("vmousecancel", event, getVirtualBindingFlags(event.target));
            }

            didScroll = true;
            startResetTimer();
        }

        function handleTouchMove(event) {
            if (blockTouchTriggers) {
                return;
            }

            var t = getNativeEvent(event).touches[0],
                didCancel = didScroll,
                moveThreshold = $.vmouse.moveDistanceThreshold,
                flags = getVirtualBindingFlags(event.target);

            didScroll = didScroll ||
                (Math.abs(t.pageX - startX) > moveThreshold ||
                Math.abs(t.pageY - startY) > moveThreshold);


            if (didScroll && !didCancel) {
                triggerVirtualEvent("vmousecancel", event, flags);
            }

            triggerVirtualEvent("vmousemove", event, flags);
            startResetTimer();
        }

        function handleTouchEnd(event) {
            if (blockTouchTriggers) {
                return;
            }

            disableTouchBindings();

            var flags = getVirtualBindingFlags(event.target),
                t;
            triggerVirtualEvent("vmouseup", event, flags);

            if (!didScroll) {
                var ve = triggerVirtualEvent("vclick", event, flags);
                if (ve && ve.isDefaultPrevented()) {
                    // The target of the mouse events that follow the touchend
                    // event don't necessarily match the target used during the
                    // touch. This means we need to rely on coordinates for blocking
                    // any click that is generated.
                    t = getNativeEvent(event).changedTouches[0];
                    clickBlockList.push({
                        touchID: lastTouchID,
                        x: t.clientX,
                        y: t.clientY
                    });

                    // Prevent any mouse events that follow from triggering
                    // virtual event notifications.
                    blockMouseTriggers = true;
                }
            }
            triggerVirtualEvent("vmouseout", event, flags);
            didScroll = false;

            startResetTimer();
        }

        function hasVirtualBindings(ele) {
            var bindings = $.data(ele, dataPropertyName),
                k;

            if (bindings) {
                for (k in bindings) {
                    if (bindings[k]) {
                        return true;
                    }
                }
            }
            return false;
        }

        function dummyMouseHandler() {}

        function getSpecialEventObject(eventType) {
            var realType = eventType.substr(1);

            return {
                setup: function(data, namespace) {
                    // If this is the first virtual mouse binding for this element,
                    // add a bindings object to its data.

                    if (!hasVirtualBindings(this)) {
                        $.data(this, dataPropertyName, {});
                    }

                    // If setup is called, we know it is the first binding for this
                    // eventType, so initialize the count for the eventType to zero.
                    var bindings = $.data(this, dataPropertyName);
                    bindings[eventType] = true;

                    // If this is the first virtual mouse event for this type,
                    // register a global handler on the document.

                    activeDocHandlers[eventType] = (activeDocHandlers[eventType] || 0) + 1;

                    if (activeDocHandlers[eventType] === 1) {
                        $document.bind(realType, mouseEventCallback);
                    }

                    // Some browsers, like Opera Mini, won't dispatch mouse/click events
                    // for elements unless they actually have handlers registered on them.
                    // To get around this, we register dummy handlers on the elements.

                    $(this).bind(realType, dummyMouseHandler);

                    // For now, if event capture is not supported, we rely on mouse handlers.
                    if (eventCaptureSupported) {
                        // If this is the first virtual mouse binding for the document,
                        // register our touchstart handler on the document.

                        activeDocHandlers["touchstart"] = (activeDocHandlers["touchstart"] || 0) + 1;

                        if (activeDocHandlers["touchstart"] === 1) {
                            $document.bind("touchstart", handleTouchStart)
                                .bind("touchend", handleTouchEnd)

                            // On touch platforms, touching the screen and then dragging your finger
                            // causes the window content to scroll after some distance threshold is
                            // exceeded. On these platforms, a scroll prevents a click event from being
                            // dispatched, and on some platforms, even the touchend is suppressed. To
                            // mimic the suppression of the click event, we need to watch for a scroll
                            // event. Unfortunately, some platforms like iOS don't dispatch scroll
                            // events until *AFTER* the user lifts their finger (touchend). This means
                            // we need to watch both scroll and touchmove events to figure out whether
                            // or not a scroll happenens before the touchend event is fired.

                            .bind("touchmove", handleTouchMove)
                                .bind("scroll", handleScroll);
                        }
                    }
                },

                teardown: function(data, namespace) {
                    // If this is the last virtual binding for this eventType,
                    // remove its global handler from the document.

                    --activeDocHandlers[eventType];

                    if (!activeDocHandlers[eventType]) {
                        $document.unbind(realType, mouseEventCallback);
                    }

                    if (eventCaptureSupported) {
                        // If this is the last virtual mouse binding in existence,
                        // remove our document touchstart listener.

                        --activeDocHandlers["touchstart"];

                        if (!activeDocHandlers["touchstart"]) {
                            $document.unbind("touchstart", handleTouchStart)
                                .unbind("touchmove", handleTouchMove)
                                .unbind("touchend", handleTouchEnd)
                                .unbind("scroll", handleScroll);
                        }
                    }

                    var $this = $(this),
                        bindings = $.data(this, dataPropertyName);

                    // teardown may be called when an element was
                    // removed from the DOM. If this is the case,
                    // jQuery core may have already stripped the element
                    // of any data bindings so we need to check it before
                    // using it.
                    if (bindings) {
                        bindings[eventType] = false;
                    }

                    // Unregister the dummy event handler.

                    $this.unbind(realType, dummyMouseHandler);

                    // If this is the last virtual mouse binding on the
                    // element, remove the binding data from the element.

                    if (!hasVirtualBindings(this)) {
                        $this.removeData(dataPropertyName);
                    }
                }
            };
        }

        // Expose our custom events to the jQuery bind/unbind mechanism.

        for (var i = 0; i < virtualEventNames.length; i++) {
            $.event.special[virtualEventNames[i]] = getSpecialEventObject(virtualEventNames[i]);
        }

        // Add a capture click handler to block clicks.
        // Note that we require event capture support for this so if the device
        // doesn't support it, we punt for now and rely solely on mouse events.
        if (eventCaptureSupported) {
            document.addEventListener("click", function(e) {
                var cnt = clickBlockList.length,
                    target = e.target,
                    x, y, ele, i, o, touchID;

                if (cnt) {
                    x = e.clientX;
                    y = e.clientY;
                    threshold = $.vmouse.clickDistanceThreshold;

                    // The idea here is to run through the clickBlockList to see if
                    // the current click event is in the proximity of one of our
                    // vclick events that had preventDefault() called on it. If we find
                    // one, then we block the click.
                    //
                    // Why do we have to rely on proximity?
                    //
                    // Because the target of the touch event that triggered the vclick
                    // can be different from the target of the click event synthesized
                    // by the browser. The target of a mouse/click event that is syntehsized
                    // from a touch event seems to be implementation specific. For example,
                    // some browsers will fire mouse/click events for a link that is near
                    // a touch event, even though the target of the touchstart/touchend event
                    // says the user touched outside the link. Also, it seems that with most
                    // browsers, the target of the mouse/click event is not calculated until the
                    // time it is dispatched, so if you replace an element that you touched
                    // with another element, the target of the mouse/click will be the new
                    // element underneath that point.
                    //
                    // Aside from proximity, we also check to see if the target and any
                    // of its ancestors were the ones that blocked a click. This is necessary
                    // because of the strange mouse/click target calculation done in the
                    // Android 2.1 browser, where if you click on an element, and there is a
                    // mouse/click handler on one of its ancestors, the target will be the
                    // innermost child of the touched element, even if that child is no where
                    // near the point of touch.

                    ele = target;

                    while (ele) {
                        for (i = 0; i < cnt; i++) {
                            o = clickBlockList[i];
                            touchID = 0;

                            if ((ele === target && Math.abs(o.x - x) < threshold && Math.abs(o.y - y) < threshold) ||
                                $.data(ele, touchTargetPropertyName) === o.touchID) {
                                // XXX: We may want to consider removing matches from the block list
                                //      instead of waiting for the reset timer to fire.
                                e.preventDefault();
                                e.stopPropagation();
                                return;
                            }
                        }
                        ele = ele.parentNode;
                    }
                }
            }, true);
        }
    })(jQuery, window, document);


    (function($, window, undefined) {
        var $document = $(document);

        // add new event shortcuts
        $.each(("touchstart touchmove touchend " +
            "tap taphold " +
            "swipe swipeleft swiperight " +
            "scrollstart scrollstop").split(" "), function(i, name) {

            $.fn[name] = function(fn) {
                return fn ? this.bind(name, fn) : this.trigger(name);
            };

            // jQuery < 1.8
            if ($.attrFn) {
                $.attrFn[name] = true;
            }
        });

        var supportTouch = $.mobile.support.touch,
            scrollEvent = "touchmove scroll",
            touchStartEvent = supportTouch ? "touchstart" : "mousedown",
            touchStopEvent = supportTouch ? "touchend" : "mouseup",
            touchMoveEvent = supportTouch ? "touchmove" : "mousemove";

        function triggerCustomEvent(obj, eventType, event) {
            var originalType = event.type;
            event.type = eventType;
            $.event.dispatch.call(obj, event);
            event.type = originalType;
        }

        // also handles scrollstop
        $.event.special.scrollstart = {

            enabled: true,

            setup: function() {

                var thisObject = this,
                    $this = $(thisObject),
                    scrolling,
                    timer;

                function trigger(event, state) {
                    scrolling = state;
                    triggerCustomEvent(thisObject, scrolling ? "scrollstart" : "scrollstop", event);
                }

                // iPhone triggers scroll after a small delay; use touchmove instead
                $this.bind(scrollEvent, function(event) {

                    if (!$.event.special.scrollstart.enabled) {
                        return;
                    }

                    if (!scrolling) {
                        trigger(event, true);
                    }

                    clearTimeout(timer);
                    timer = setTimeout(function() {
                        trigger(event, false);
                    }, 50);
                });
            }
        };

        // also handles taphold
        $.event.special.tap = {
            tapholdThreshold: 750,

            setup: function() {
                var thisObject = this,
                    $this = $(thisObject);

                $this.bind("vmousedown", function(event) {

                    if (event.which && event.which !== 1) {
                        return false;
                    }

                    var origTarget = event.target,
                        origEvent = event.originalEvent,
                        timer;

                    function clearTapTimer() {
                        clearTimeout(timer);
                    }

                    function clearTapHandlers() {
                        clearTapTimer();

                        $this.unbind("vclick", clickHandler)
                            .unbind("vmouseup", clearTapTimer);
                        $document.unbind("vmousecancel", clearTapHandlers);
                    }

                    function clickHandler(event) {
                        clearTapHandlers();

                        // ONLY trigger a 'tap' event if the start target is
                        // the same as the stop target.
                        if (origTarget === event.target) {
                            triggerCustomEvent(thisObject, "tap", event);
                        }
                    }

                    $this.bind("vmouseup", clearTapTimer)
                        .bind("vclick", clickHandler);
                    $document.bind("vmousecancel", clearTapHandlers);

                    timer = setTimeout(function() {
                        triggerCustomEvent(thisObject, "taphold", $.Event("taphold", {
                            target: origTarget
                        }));
                    }, $.event.special.tap.tapholdThreshold);
                });
            }
        };

        // also handles swipeleft, swiperight
        $.event.special.swipe = {
            scrollSupressionThreshold: 30, // More than this horizontal displacement, and we will suppress scrolling.

            durationThreshold: 1000, // More time than this, and it isn't a swipe.

            horizontalDistanceThreshold: 30, // Swipe horizontal displacement must be more than this.

            verticalDistanceThreshold: 75, // Swipe vertical displacement must be less than this.

            start: function(event) {
                var data = event.originalEvent.touches ?
                    event.originalEvent.touches[0] : event;
                return {
                    time: (new Date()).getTime(),
                    coords: [data.pageX, data.pageY],
                    origin: $(event.target)
                };
            },

            stop: function(event) {
                var data = event.originalEvent.touches ?
                    event.originalEvent.touches[0] : event;
                return {
                    time: (new Date()).getTime(),
                    coords: [data.pageX, data.pageY]
                };
            },

            handleSwipe: function(start, stop) {
                if (stop.time - start.time < $.event.special.swipe.durationThreshold &&
                    Math.abs(start.coords[0] - stop.coords[0]) > $.event.special.swipe.horizontalDistanceThreshold &&
                    Math.abs(start.coords[1] - stop.coords[1]) < $.event.special.swipe.verticalDistanceThreshold) {

                    start.origin.trigger("swipe")
                        .trigger(start.coords[0] > stop.coords[0] ? "swipeleft" : "swiperight");
                }
            },

            setup: function() {
                var thisObject = this,
                    $this = $(thisObject);

                $this.bind(touchStartEvent, function(event) {
                    var start = $.event.special.swipe.start(event),
                        stop;

                    function moveHandler(event) {
                        if (!start) {
                            return;
                        }

                        stop = $.event.special.swipe.stop(event);

                        // prevent scrolling
                        if (Math.abs(start.coords[0] - stop.coords[0]) > $.event.special.swipe.scrollSupressionThreshold) {
                            event.preventDefault();
                        }
                    }

                    $this.bind(touchMoveEvent, moveHandler)
                        .one(touchStopEvent, function() {
                            $this.unbind(touchMoveEvent, moveHandler);

                            if (start && stop) {
                                $.event.special.swipe.handleSwipe(start, stop);
                            }
                            start = stop = undefined;
                        });
                });
            }
        };
        $.each({
            scrollstop: "scrollstart",
            taphold: "tap",
            swipeleft: "swipe",
            swiperight: "swipe"
        }, function(event, sourceEvent) {

            $.event.special[event] = {
                setup: function() {
                    $(this).bind(sourceEvent, $.noop);
                }
            };
        });

    })(jQuery, this);


    // throttled resize event
    (function($) {
        $.event.special.throttledresize = {
            setup: function() {
                $(this).bind("resize", handler);
            },
            teardown: function() {
                $(this).unbind("resize", handler);
            }
        };

        var throttle = 250,
            handler = function() {
                curr = (new Date()).getTime();
                diff = curr - lastCall;

                if (diff >= throttle) {

                    lastCall = curr;
                    $(this).trigger("throttledresize");

                } else {

                    if (heldCall) {
                        clearTimeout(heldCall);
                    }

                    // Promise a held call will still execute
                    heldCall = setTimeout(handler, throttle - diff);
                }
            },
            lastCall = 0,
            heldCall,
            curr,
            diff;
    })(jQuery);

    (function($, window) {
        var win = $(window),
            event_name = "orientationchange",
            special_event,
            get_orientation,
            last_orientation,
            initial_orientation_is_landscape,
            initial_orientation_is_default,
            portrait_map = {
                "0": true,
                "180": true
            };

        // It seems that some device/browser vendors use window.orientation values 0 and 180 to
        // denote the "default" orientation. For iOS devices, and most other smart-phones tested,
        // the default orientation is always "portrait", but in some Android and RIM based tablets,
        // the default orientation is "landscape". The following code attempts to use the window
        // dimensions to figure out what the current orientation is, and then makes adjustments
        // to the to the portrait_map if necessary, so that we can properly decode the
        // window.orientation value whenever get_orientation() is called.
        //
        // Note that we used to use a media query to figure out what the orientation the browser
        // thinks it is in:
        //
        //     initial_orientation_is_landscape = $.mobile.media("all and (orientation: landscape)");
        //
        // but there was an iPhone/iPod Touch bug beginning with iOS 4.2, up through iOS 5.1,
        // where the browser *ALWAYS* applied the landscape media query. This bug does not
        // happen on iPad.

        if ($.support.orientation) {

            // Check the window width and height to figure out what the current orientation
            // of the device is at this moment. Note that we've initialized the portrait map
            // values to 0 and 180, *AND* we purposely check for landscape so that if we guess
            // wrong, , we default to the assumption that portrait is the default orientation.
            // We use a threshold check below because on some platforms like iOS, the iPhone
            // form-factor can report a larger width than height if the user turns on the
            // developer console. The actual threshold value is somewhat arbitrary, we just
            // need to make sure it is large enough to exclude the developer console case.

            var ww = window.innerWidth || win.width(),
                wh = window.innerHeight || win.height(),
                landscape_threshold = 50;

            initial_orientation_is_landscape = ww > wh && (ww - wh) > landscape_threshold;


            // Now check to see if the current window.orientation is 0 or 180.
            initial_orientation_is_default = portrait_map[window.orientation];

            // If the initial orientation is landscape, but window.orientation reports 0 or 180, *OR*
            // if the initial orientation is portrait, but window.orientation reports 90 or -90, we
            // need to flip our portrait_map values because landscape is the default orientation for
            // this device/browser.
            if ((initial_orientation_is_landscape && initial_orientation_is_default) || (!initial_orientation_is_landscape && !initial_orientation_is_default)) {
                portrait_map = {
                    "-90": true,
                    "90": true
                };
            }
        }

        $.event.special.orientationchange = $.extend({}, $.event.special.orientationchange, {
            setup: function() {
                // If the event is supported natively, return false so that jQuery
                // will bind to the event using DOM methods.
                if ($.support.orientation && !$.event.special.orientationchange.disabled) {
                    return false;
                }

                // Get the current orientation to avoid initial double-triggering.
                last_orientation = get_orientation();

                // Because the orientationchange event doesn't exist, simulate the
                // event by testing window dimensions on resize.
                win.bind("throttledresize", handler);
            },
            teardown: function() {
                // If the event is not supported natively, return false so that
                // jQuery will unbind the event using DOM methods.
                if ($.support.orientation && !$.event.special.orientationchange.disabled) {
                    return false;
                }

                // Because the orientationchange event doesn't exist, unbind the
                // resize event handler.
                win.unbind("throttledresize", handler);
            },
            add: function(handleObj) {
                // Save a reference to the bound event handler.
                var old_handler = handleObj.handler;


                handleObj.handler = function(event) {
                    // Modify event object, adding the .orientation property.
                    event.orientation = get_orientation();

                    // Call the originally-bound event handler and return its result.
                    return old_handler.apply(this, arguments);
                };
            }
        });

        // If the event is not supported natively, this handler will be bound to
        // the window resize event to simulate the orientationchange event.
        function handler() {
            // Get the current orientation.
            var orientation = get_orientation();

            if (orientation !== last_orientation) {
                // The orientation has changed, so trigger the orientationchange event.
                last_orientation = orientation;
                win.trigger(event_name);
            }
        }

        // Get the current page orientation. This method is exposed publicly, should it
        // be needed, as jQuery.event.special.orientationchange.orientation()
        $.event.special.orientationchange.orientation = get_orientation = function() {
            var isPortrait = true,
                elem = document.documentElement;

            // prefer window orientation to the calculation based on screensize as
            // the actual screen resize takes place before or after the orientation change event
            // has been fired depending on implementation (eg android 2.3 is before, iphone after).
            // More testing is required to determine if a more reliable method of determining the new screensize
            // is possible when orientationchange is fired. (eg, use media queries + element + opacity)
            if ($.support.orientation) {
                // if the window orientation registers as 0 or 180 degrees report
                // portrait, otherwise landscape
                isPortrait = portrait_map[window.orientation];
            } else {
                isPortrait = elem && elem.clientWidth / elem.clientHeight < 1.1;
            }

            return isPortrait ? "portrait" : "landscape";
        };

        $.fn[event_name] = function(fn) {
            return fn ? this.bind(event_name, fn) : this.trigger(event_name);
        };

        // jQuery < 1.8
        if ($.attrFn) {
            $.attrFn[event_name] = true;
        }

    }(jQuery, this));



    (function($, undefined) {

        $.widget("mobile.page", $.mobile.widget, {
            options: {
                theme: "c",
                domCache: false,
                keepNativeDefault: ":jqmData(role='none'), :jqmData(role='nojs')"
            },

            _create: function() {
                // if false is returned by the callbacks do not create the page
                if (this._trigger("beforecreate") === false) {
                    return false;
                }

                this.element
                    .attr("tabindex", "0")
                    .addClass("ui-page ui-body-" + this.options.theme);

                this._on(this.element, {
                    pagebeforehide: "removeContainerBackground",
                    pagebeforeshow: "_handlePageBeforeShow"
                });
            },

            _handlePageBeforeShow: function(e) {
                this.setContainerBackground();
            },

            removeContainerBackground: function() {
                $.mobile.pageContainer.removeClass("ui-overlay-" + $.mobile.getInheritedTheme(this.element.parent()));
            },

            // set the page container background to the page theme
            setContainerBackground: function(theme) {
                if (this.options.theme) {
                    $.mobile.pageContainer.addClass("ui-overlay-" + (theme || this.options.theme));
                }
            },

            keepNativeSelector: function() {
                var options = this.options,
                    keepNativeDefined = options.keepNative && $.trim(options.keepNative);

                if (keepNativeDefined && options.keepNative !== options.keepNativeDefault) {
                    return [options.keepNative, options.keepNativeDefault].join(", ");
                }

                return options.keepNativeDefault;
            }
        });
    })(jQuery);

    (function($, window, undefined) {

        var createHandler = function(sequential) {

            // Default to sequential
            if (sequential === undefined) {
                sequential = true;
            }

            return function(name, reverse, $to, $from) {

                var deferred = new $.Deferred(),
                    reverseClass = reverse ? " reverse" : "",
                    active = $.mobile.urlHistory.getActive(),
                    toScroll = active.lastScroll || $.mobile.defaultHomeScroll,
                    screenHeight = $.mobile.getScreenHeight(),
                    maxTransitionOverride = $.mobile.maxTransitionWidth !== false && $.mobile.window.width() > $.mobile.maxTransitionWidth,
                    none = !$.support.cssTransitions || maxTransitionOverride || !name || name === "none" || Math.max($.mobile.window.scrollTop(), toScroll) > $.mobile.getMaxScrollForTransition(),
                    toPreClass = " ui-page-pre-in",
                    toggleViewportClass = function() {
                        $.mobile.pageContainer.toggleClass("ui-mobile-viewport-transitioning viewport-" + name);
                    },
                    scrollPage = function() {
                        // By using scrollTo instead of silentScroll, we can keep things better in order
                        // Just to be precautios, disable scrollstart listening like silentScroll would
                        $.event.special.scrollstart.enabled = false;

                        window.scrollTo(0, toScroll);

                        // reenable scrollstart listening like silentScroll would
                        setTimeout(function() {
                            $.event.special.scrollstart.enabled = true;
                        }, 150);
                    },
                    cleanFrom = function() {
                        $from
                            .removeClass($.mobile.activePageClass + " out in reverse " + name)
                            .height("");
                    },
                    startOut = function() {
                        // if it's not sequential, call the doneOut transition to start the TO page animating in simultaneously
                        if (!sequential) {
                            doneOut();
                        } else {
                            $from.animationComplete(doneOut);
                        }

                        // Set the from page's height and start it transitioning out
                        // Note: setting an explicit height helps eliminate tiling in the transitions
                        $from
                            .height(screenHeight + $.mobile.window.scrollTop())
                            .addClass(name + " out" + reverseClass);
                    },

                    doneOut = function() {

                        if ($from && sequential) {
                            cleanFrom();
                        }

                        startIn();
                    },

                    startIn = function() {

                        // Prevent flickering in phonegap container: see comments at #4024 regarding iOS
                        $to.css("z-index", -10);

                        $to.addClass($.mobile.activePageClass + toPreClass);

                        // Send focus to page as it is now display: block
                        $.mobile.focusPage($to);

                        // Set to page height
                        $to.height(screenHeight + toScroll);

                        scrollPage();

                        // Restores visibility of the new page: added together with $to.css( "z-index", -10 );
                        $to.css("z-index", "");

                        if (!none) {
                            $to.animationComplete(doneIn);
                        }

                        $to
                            .removeClass(toPreClass)
                            .addClass(name + " in" + reverseClass);

                        if (none) {
                            doneIn();
                        }

                    },

                    doneIn = function() {

                        if (!sequential) {

                            if ($from) {
                                cleanFrom();
                            }
                        }

                        $to
                            .removeClass("out in reverse " + name)
                            .height("");

                        toggleViewportClass();

                        // In some browsers (iOS5), 3D transitions block the ability to scroll to the desired location during transition
                        // This ensures we jump to that spot after the fact, if we aren't there already.
                        if ($.mobile.window.scrollTop() !== toScroll) {
                            scrollPage();
                        }

                        deferred.resolve(name, reverse, $to, $from, true);
                    };

                toggleViewportClass();

                if ($from && !none) {
                    startOut();
                } else {
                    doneOut();
                }

                return deferred.promise();
            };
        };

        // generate the handlers from the above
        var sequentialHandler = createHandler(),
            simultaneousHandler = createHandler(false),
            defaultGetMaxScrollForTransition = function() {
                return $.mobile.getScreenHeight() * 3;
            };

        // Make our transition handler the public default.
        $.mobile.defaultTransitionHandler = sequentialHandler;

        //transition handler dictionary for 3rd party transitions
        $.mobile.transitionHandlers = {
            "default": $.mobile.defaultTransitionHandler,
            "sequential": sequentialHandler,
            "simultaneous": simultaneousHandler
        };

        $.mobile.transitionFallbacks = {};

        // If transition is defined, check if css 3D transforms are supported, and if not, if a fallback is specified
        $.mobile._maybeDegradeTransition = function(transition) {
            if (transition && !$.support.cssTransform3d && $.mobile.transitionFallbacks[transition]) {
                transition = $.mobile.transitionFallbacks[transition];
            }

            return transition;
        };

        // Set the getMaxScrollForTransition to default if no implementation was set by user
        $.mobile.getMaxScrollForTransition = $.mobile.getMaxScrollForTransition || defaultGetMaxScrollForTransition;
    })(jQuery, this);

    (function($, undefined) {

        //define vars for interal use
        var $window = $.mobile.window,
            $html = $('html'),
            $head = $('head'),

            // NOTE: path extensions dependent on core attributes. Moved here to remove deps from
            //       $.mobile.path definition
            path = $.extend($.mobile.path, {

                //return the substring of a filepath before the sub-page key, for making a server request
                getFilePath: function(path) {
                    var splitkey = '&' + $.mobile.subPageUrlKey;
                    return path && path.split(splitkey)[0].split(dialogHashKey)[0];
                },

                //check if the specified url refers to the first page in the main application document.
                isFirstPageUrl: function(url) {
                    // We only deal with absolute paths.
                    var u = path.parseUrl(path.makeUrlAbsolute(url, this.documentBase)),

                        // Does the url have the same path as the document?
                        samePath = u.hrefNoHash === this.documentUrl.hrefNoHash || (this.documentBaseDiffers && u.hrefNoHash === this.documentBase.hrefNoHash),

                        // Get the first page element.
                        fp = $.mobile.firstPage,

                        // Get the id of the first page element if it has one.
                        fpId = fp && fp[0] ? fp[0].id : undefined;

                    // The url refers to the first page if the path matches the document and
                    // it either has no hash value, or the hash is exactly equal to the id of the
                    // first page element.
                    return samePath && (!u.hash || u.hash === "#" || (fpId && u.hash.replace(/^#/, "") === fpId));
                },

                // Some embedded browsers, like the web view in Phone Gap, allow cross-domain XHR
                // requests if the document doing the request was loaded via the file:// protocol.
                // This is usually to allow the application to "phone home" and fetch app specific
                // data. We normally let the browser handle external/cross-domain urls, but if the
                // allowCrossDomainPages option is true, we will allow cross-domain http/https
                // requests to go through our page loading logic.
                isPermittedCrossDomainRequest: function(docUrl, reqUrl) {
                    return $.mobile.allowCrossDomainPages &&
                        docUrl.protocol === "file:" &&
                        reqUrl.search(/^https?:/) !== -1;
                }
            }),

            // used to track last vclicked element to make sure its value is added to form data
            $lastVClicked = null,

            //will be defined when a link is clicked and given an active class
            $activeClickedLink = null,

            // resolved on domready
            domreadyDeferred = $.Deferred(),

            //urlHistory is purely here to make guesses at whether the back or forward button was clicked
            //and provide an appropriate transition
            urlHistory = $.mobile.navigate.history,

            //define first selector to receive focus when a page is shown
            focusable = "[tabindex],a,button:visible,select:visible,input",

            //queue to hold simultanious page transitions
            pageTransitionQueue = [],

            //indicates whether or not page is in process of transitioning
            isPageTransitioning = false,

            //nonsense hash change key for dialogs, so they create a history entry
            dialogHashKey = "&ui-state=dialog",

            //existing base tag?
            $base = $head.children("base"),

            //tuck away the original document URL minus any fragment.
            documentUrl = path.documentUrl,

            //if the document has an embedded base tag, documentBase is set to its
            //initial value. If a base tag does not exist, then we default to the documentUrl.
            documentBase = path.documentBase,

            //cache the comparison once.
            documentBaseDiffers = path.documentBaseDiffers,

            getScreenHeight = $.mobile.getScreenHeight;

        //base element management, defined depending on dynamic base tag support
        var base = $.support.dynamicBaseTag ? {

            //define base element, for use in routing asset urls that are referenced in Ajax-requested markup
            element: ($base.length ? $base : $("<base>", {
                href: documentBase.hrefNoHash
            }).prependTo($head)),

            //set the generated BASE element's href attribute to a new page's base path
            set: function(href) {
                href = path.parseUrl(href).hrefNoHash;
                base.element.attr("href", path.makeUrlAbsolute(href, documentBase));
            },

            //set the generated BASE element's href attribute to a new page's base path
            reset: function() {
                base.element.attr("href", documentBase.hrefNoSearch);
            }

        } : undefined;


        //return the original document url
        $.mobile.getDocumentUrl = path.getDocumentUrl;

        //return the original document base url
        $.mobile.getDocumentBase = path.getDocumentBase;

        /* internal utility functions */

        // NOTE Issue #4950 Android phonegap doesn't navigate back properly
        //      when a full page refresh has taken place. It appears that hashchange
        //      and replacestate history alterations work fine but we need to support
        //      both forms of history traversal in our code that uses backward history
        //      movement
        $.mobile.back = function() {
            var nav = window.navigator;

            // if the setting is on and the navigator object is
            // available use the phonegap navigation capability
            if (this.phonegapNavigationEnabled &&
                nav &&
                nav.app &&
                nav.app.backHistory) {
                nav.app.backHistory();
            } else {
                window.history.back();
            }
        };

        //direct focus to the page title, or otherwise first focusable element
        $.mobile.focusPage = function(page) {
            var autofocus = page.find("[autofocus]"),
                pageTitle = page.find(".ui-title:eq(0)");

            if (autofocus.length) {
                autofocus.focus();
                return;
            }

            if (pageTitle.length) {
                pageTitle.focus();
            } else {
                page.focus();
            }
        };

        //remove active classes after page transition or error
        function removeActiveLinkClass(forceRemoval) {
            if ( !! $activeClickedLink && (!$activeClickedLink.closest("." + $.mobile.activePageClass).length || forceRemoval)) {
                $activeClickedLink.removeClass($.mobile.activeBtnClass);
            }
            $activeClickedLink = null;
        }

        function releasePageTransitionLock() {
            isPageTransitioning = false;
            if (pageTransitionQueue.length > 0) {
                $.mobile.changePage.apply(null, pageTransitionQueue.pop());
            }
        }

        // Save the last scroll distance per page, before it is hidden
        var setLastScrollEnabled = true,
            setLastScroll, delayedSetLastScroll;

        setLastScroll = function() {
            // this barrier prevents setting the scroll value based on the browser
            // scrolling the window based on a hashchange
            if (!setLastScrollEnabled) {
                return;
            }

            var active = $.mobile.urlHistory.getActive();

            if (active) {
                var lastScroll = $window.scrollTop();

                // Set active page's lastScroll prop.
                // If the location we're scrolling to is less than minScrollBack, let it go.
                active.lastScroll = lastScroll < $.mobile.minScrollBack ? $.mobile.defaultHomeScroll : lastScroll;
            }
        };

        // bind to scrollstop to gather scroll position. The delay allows for the hashchange
        // event to fire and disable scroll recording in the case where the browser scrolls
        // to the hash targets location (sometimes the top of the page). once pagechange fires
        // getLastScroll is again permitted to operate
        delayedSetLastScroll = function() {
            setTimeout(setLastScroll, 100);
        };

        // disable an scroll setting when a hashchange has been fired, this only works
        // because the recording of the scroll position is delayed for 100ms after
        // the browser might have changed the position because of the hashchange
        $window.bind($.support.pushState ? "popstate" : "hashchange", function() {
            setLastScrollEnabled = false;
        });

        // handle initial hashchange from chrome :(
        $window.one($.support.pushState ? "popstate" : "hashchange", function() {
            setLastScrollEnabled = true;
        });

        // wait until the mobile page container has been determined to bind to pagechange
        $window.one("pagecontainercreate", function() {
            // once the page has changed, re-enable the scroll recording
            $.mobile.pageContainer.bind("pagechange", function() {

                setLastScrollEnabled = true;

                // remove any binding that previously existed on the get scroll
                // which may or may not be different than the scroll element determined for
                // this page previously
                $window.unbind("scrollstop", delayedSetLastScroll);

                // determine and bind to the current scoll element which may be the window
                // or in the case of touch overflow the element with touch overflow
                $window.bind("scrollstop", delayedSetLastScroll);
            });
        });

        // bind to scrollstop for the first page as "pagechange" won't be fired in that case
        $window.bind("scrollstop", delayedSetLastScroll);

        // No-op implementation of transition degradation
        $.mobile._maybeDegradeTransition = $.mobile._maybeDegradeTransition || function(transition) {
            return transition;
        };

        //function for transitioning between two existing pages
        function transitionPages(toPage, fromPage, transition, reverse) {
            if (fromPage) {
                //trigger before show/hide events
                fromPage.data("mobile-page")._trigger("beforehide", null, {
                    nextPage: toPage
                });
            }

            toPage.data("mobile-page")._trigger("beforeshow", null, {
                prevPage: fromPage || $("")
            });

            //clear page loader
            $.mobile.hidePageLoadingMsg();

            transition = $.mobile._maybeDegradeTransition(transition);

            //find the transition handler for the specified transition. If there
            //isn't one in our transitionHandlers dictionary, use the default one.
            //call the handler immediately to kick-off the transition.
            var th = $.mobile.transitionHandlers[transition || "default"] || $.mobile.defaultTransitionHandler,
                promise = th(transition, reverse, toPage, fromPage);

            promise.done(function() {
                //trigger show/hide events
                if (fromPage) {
                    fromPage.data("mobile-page")._trigger("hide", null, {
                        nextPage: toPage
                    });
                }

                //trigger pageshow, define prevPage as either fromPage or empty jQuery obj
                toPage.data("mobile-page")._trigger("show", null, {
                    prevPage: fromPage || $("")
                });
            });

            return promise;
        }

        //simply set the active page's minimum height to screen height, depending on orientation
        $.mobile.resetActivePageHeight = function resetActivePageHeight(height) {
            var aPage = $("." + $.mobile.activePageClass),
                aPagePadT = parseFloat(aPage.css("padding-top")),
                aPagePadB = parseFloat(aPage.css("padding-bottom")),
                aPageBorderT = parseFloat(aPage.css("border-top-width")),
                aPageBorderB = parseFloat(aPage.css("border-bottom-width"));

            height = (typeof height === "number") ? height : getScreenHeight();

            aPage.css("min-height", height - aPagePadT - aPagePadB - aPageBorderT - aPageBorderB);
        };

        //shared page enhancements
        function enhancePage($page, role) {
            // If a role was specified, make sure the data-role attribute
            // on the page element is in sync.
            if (role) {
                $page.attr("data-" + $.mobile.ns + "role", role);
            }

            //run page plugin
            $page.page();
        }

        // determine the current base url
        function findBaseWithDefault() {
            var closestBase = ($.mobile.activePage && getClosestBaseUrl($.mobile.activePage));
            return closestBase || documentBase.hrefNoHash;
        }

        /* exposed $.mobile methods */

        //animation complete callback
        $.fn.animationComplete = function(callback) {
            if ($.support.cssTransitions) {
                return $(this).one('webkitAnimationEnd animationend', callback);
            } else {
                // defer execution for consistency between webkit/non webkit
                setTimeout(callback, 0);
                return $(this);
            }
        };

        //expose path object on $.mobile
        $.mobile.path = path;

        //expose base object on $.mobile
        $.mobile.base = base;

        //history stack
        $.mobile.urlHistory = urlHistory;

        $.mobile.dialogHashKey = dialogHashKey;

        //enable cross-domain page support
        $.mobile.allowCrossDomainPages = false;

        $.mobile._bindPageRemove = function() {
            var page = $(this);

            // when dom caching is not enabled or the page is embedded bind to remove the page on hide
            if (!page.data("mobile-page").options.domCache &&
                page.is(":jqmData(external-page='true')")) {

                page.bind('pagehide.remove', function(e) {
                    var $this = $(this),
                        prEvent = new $.Event("pageremove");

                    $this.trigger(prEvent);

                    if (!prEvent.isDefaultPrevented()) {
                        $this.removeWithDependents();
                    }
                });
            }
        };

        // Load a page into the DOM.
        $.mobile.loadPage = function(url, options) {
            // This function uses deferred notifications to let callers
            // know when the page is done loading, or if an error has occurred.
            var deferred = $.Deferred(),

                // The default loadPage options with overrides specified by
                // the caller.
                settings = $.extend({}, $.mobile.loadPage.defaults, options),

                // The DOM element for the page after it has been loaded.
                page = null,

                // If the reloadPage option is true, and the page is already
                // in the DOM, dupCachedPage will be set to the page element
                // so that it can be removed after the new version of the
                // page is loaded off the network.
                dupCachedPage = null,

                // The absolute version of the URL passed into the function. This
                // version of the URL may contain dialog/subpage params in it.
                absUrl = path.makeUrlAbsolute(url, findBaseWithDefault());

            // If the caller provided data, and we're using "get" request,
            // append the data to the URL.
            if (settings.data && settings.type === "get") {
                absUrl = path.addSearchParams(absUrl, settings.data);
                settings.data = undefined;
            }

            // If the caller is using a "post" request, reloadPage must be true
            if (settings.data && settings.type === "post") {
                settings.reloadPage = true;
            }

            // The absolute version of the URL minus any dialog/subpage params.
            // In otherwords the real URL of the page to be loaded.
            var fileUrl = path.getFilePath(absUrl),

                // The version of the Url actually stored in the data-url attribute of
                // the page. For embedded pages, it is just the id of the page. For pages
                // within the same domain as the document base, it is the site relative
                // path. For cross-domain pages (Phone Gap only) the entire absolute Url
                // used to load the page.
                dataUrl = path.convertUrlToDataUrl(absUrl);

            // Make sure we have a pageContainer to work with.
            settings.pageContainer = settings.pageContainer || $.mobile.pageContainer;

            // Check to see if the page already exists in the DOM.
            // NOTE do _not_ use the :jqmData psuedo selector because parenthesis
            //      are a valid url char and it breaks on the first occurence
            page = settings.pageContainer.children("[data-" + $.mobile.ns + "url='" + dataUrl + "']");

            // If we failed to find the page, check to see if the url is a
            // reference to an embedded page. If so, it may have been dynamically
            // injected by a developer, in which case it would be lacking a data-url
            // attribute and in need of enhancement.
            if (page.length === 0 && dataUrl && !path.isPath(dataUrl)) {
                page = settings.pageContainer.children("#" + dataUrl)
                    .attr("data-" + $.mobile.ns + "url", dataUrl)
                    .jqmData("url", dataUrl);
            }


            // If we failed to find a page in the DOM, check the URL to see if it
            // refers to the first page in the application. If it isn't a reference
            // to the first page and refers to non-existent embedded page, error out.
            if (page.length === 0) {
                if ($.mobile.firstPage && path.isFirstPageUrl(fileUrl)) {
                    // Check to make sure our cached-first-page is actually
                    // in the DOM. Some user deployed apps are pruning the first
                    // page from the DOM for various reasons, we check for this
                    // case here because we don't want a first-page with an id
                    // falling through to the non-existent embedded page error
                    // case. If the first-page is not in the DOM, then we let
                    // things fall through to the ajax loading code below so
                    // that it gets reloaded.
                    if ($.mobile.firstPage.parent().length) {
                        page = $($.mobile.firstPage);
                    }
                } else if (path.isEmbeddedPage(fileUrl)) {
                    deferred.reject(absUrl, options);
                    return deferred.promise();
                }
            }

            // If the page we are interested in is already in the DOM,
            // and the caller did not indicate that we should force a
            // reload of the file, we are done. Otherwise, track the
            // existing page as a duplicated.
            if (page.length) {
                if (!settings.reloadPage) {
                    enhancePage(page, settings.role);
                    deferred.resolve(absUrl, options, page);
                    //if we are reloading the page make sure we update the base if its not a prefetch 
                    if (base && !options.prefetch) {
                        base.set(url);
                    }
                    return deferred.promise();
                }
                dupCachedPage = page;
            }
            var mpc = settings.pageContainer,
                pblEvent = new $.Event("pagebeforeload"),
                triggerData = {
                    url: url,
                    absUrl: absUrl,
                    dataUrl: dataUrl,
                    deferred: deferred,
                    options: settings
                };

            // Let listeners know we're about to load a page.
            mpc.trigger(pblEvent, triggerData);

            // If the default behavior is prevented, stop here!
            if (pblEvent.isDefaultPrevented()) {
                return deferred.promise();
            }

            if (settings.showLoadMsg) {

                // This configurable timeout allows cached pages a brief delay to load without showing a message
                var loadMsgDelay = setTimeout(function() {
                    $.mobile.showPageLoadingMsg();
                }, settings.loadMsgDelay),

                    // Shared logic for clearing timeout and removing message.
                    hideMsg = function() {

                        // Stop message show timer
                        clearTimeout(loadMsgDelay);

                        // Hide loading message
                        $.mobile.hidePageLoadingMsg();
                    };
            }
            // Reset base to the default document base.
            // only reset if we are not prefetching
            if (base && (typeof options === "undefined" || typeof options.prefetch === "undefined")) {
                base.reset();
            }

            if (!($.mobile.allowCrossDomainPages || path.isSameDomain(documentUrl, absUrl))) {
                deferred.reject(absUrl, options);
            } else {
                // Load the new page.
                $.ajax({
                    url: fileUrl,
                    type: settings.type,
                    data: settings.data,
                    contentType: settings.contentType,
                    dataType: "html",
                    success: function(html, textStatus, xhr) {
                        //pre-parse html to check for a data-url,
                        //use it as the new fileUrl, base path, etc
                        var all = $("<div></div>"),

                            //page title regexp
                            newPageTitle = html.match(/<title[^>]*>([^<]*)/) && RegExp.$1,

                            // TODO handle dialogs again
                            pageElemRegex = new RegExp("(<[^>]+\\bdata-" + $.mobile.ns + "role=[\"']?page[\"']?[^>]*>)"),
                            dataUrlRegex = new RegExp("\\bdata-" + $.mobile.ns + "url=[\"']?([^\"'>]*)[\"']?");


                        // data-url must be provided for the base tag so resource requests can be directed to the
                        // correct url. loading into a temprorary element makes these requests immediately
                        if (pageElemRegex.test(html) &&
                            RegExp.$1 &&
                            dataUrlRegex.test(RegExp.$1) &&
                            RegExp.$1) {
                            url = fileUrl = path.getFilePath($("<div>" + RegExp.$1 + "</div>").text());
                        }
                        //dont update the base tag if we are prefetching
                        if (base && (typeof options === "undefined" || typeof options.prefetch === "undefined")) {
                            base.set(fileUrl);
                        }

                        //workaround to allow scripts to execute when included in page divs
                        all.get(0).innerHTML = html;
                        page = all.find(":jqmData(role='page'), :jqmData(role='dialog')").first();

                        //if page elem couldn't be found, create one and insert the body element's contents
                        if (!page.length) {
                            page = $("<div data-" + $.mobile.ns + "role='page'>" + (html.split(/<\/?body[^>]*>/gmi)[1] || "") + "</div>");
                        }

                        if (newPageTitle && !page.jqmData("title")) {
                            if (~newPageTitle.indexOf("&")) {
                                newPageTitle = $("<div>" + newPageTitle + "</div>").text();
                            }
                            page.jqmData("title", newPageTitle);
                        }

                        //rewrite src and href attrs to use a base url
                        if (!$.support.dynamicBaseTag) {
                            var newPath = path.get(fileUrl);
                            page.find("[src], link[href], a[rel='external'], :jqmData(ajax='false'), a[target]").each(function() {
                                var thisAttr = $(this).is('[href]') ? 'href' :
                                    $(this).is('[src]') ? 'src' : 'action',
                                    thisUrl = $(this).attr(thisAttr);

                                // XXX_jblas: We need to fix this so that it removes the document
                                //            base URL, and then prepends with the new page URL.
                                //if full path exists and is same, chop it - helps IE out
                                thisUrl = thisUrl.replace(location.protocol + '//' + location.host + location.pathname, '');

                                if (!/^(\w+:|#|\/)/.test(thisUrl)) {
                                    $(this).attr(thisAttr, newPath + thisUrl);
                                }
                            });
                        }

                        //append to page and enhance
                        // TODO taging a page with external to make sure that embedded pages aren't removed
                        //      by the various page handling code is bad. Having page handling code in many
                        //      places is bad. Solutions post 1.0
                        page
                            .attr("data-" + $.mobile.ns + "url", path.convertUrlToDataUrl(fileUrl))
                            .attr("data-" + $.mobile.ns + "external-page", true)
                            .appendTo(settings.pageContainer);

                        // wait for page creation to leverage options defined on widget
                        page.one('pagecreate', $.mobile._bindPageRemove);

                        enhancePage(page, settings.role);

                        // Enhancing the page may result in new dialogs/sub pages being inserted
                        // into the DOM. If the original absUrl refers to a sub-page, that is the
                        // real page we are interested in.
                        if (absUrl.indexOf("&" + $.mobile.subPageUrlKey) > -1) {
                            page = settings.pageContainer.children("[data-" + $.mobile.ns + "url='" + dataUrl + "']");
                        }

                        // Remove loading message.
                        if (settings.showLoadMsg) {
                            hideMsg();
                        }

                        // Add the page reference and xhr to our triggerData.
                        triggerData.xhr = xhr;
                        triggerData.textStatus = textStatus;
                        triggerData.page = page;

                        // Let listeners know the page loaded successfully.
                        settings.pageContainer.trigger("pageload", triggerData);

                        deferred.resolve(absUrl, options, page, dupCachedPage);
                    },
                    error: function(xhr, textStatus, errorThrown) {
                        //set base back to current path
                        if (base) {
                            base.set(path.get());
                        }

                        // Add error info to our triggerData.
                        triggerData.xhr = xhr;
                        triggerData.textStatus = textStatus;
                        triggerData.errorThrown = errorThrown;

                        var plfEvent = new $.Event("pageloadfailed");

                        // Let listeners know the page load failed.
                        settings.pageContainer.trigger(plfEvent, triggerData);

                        // If the default behavior is prevented, stop here!
                        // Note that it is the responsibility of the listener/handler
                        // that called preventDefault(), to resolve/reject the
                        // deferred object within the triggerData.
                        if (plfEvent.isDefaultPrevented()) {
                            return;
                        }

                        // Remove loading message.
                        if (settings.showLoadMsg) {

                            // Remove loading message.
                            hideMsg();

                            // show error message
                            $.mobile.showPageLoadingMsg($.mobile.pageLoadErrorMessageTheme, $.mobile.pageLoadErrorMessage, true);

                            // hide after delay
                            setTimeout($.mobile.hidePageLoadingMsg, 1500);
                        }

                        deferred.reject(absUrl, options);
                    }
                });
            }

            return deferred.promise();
        };

        $.mobile.loadPage.defaults = {
            type: "get",
            data: undefined,
            reloadPage: false,
            role: undefined, // By default we rely on the role defined by the @data-role attribute.
            showLoadMsg: false,
            pageContainer: undefined,
            loadMsgDelay: 50 // This delay allows loads that pull from browser cache to occur without showing the loading message.
        };

        // Show a specific page in the page container.
        $.mobile.changePage = function(toPage, options) {
            // If we are in the midst of a transition, queue the current request.
            // We'll call changePage() once we're done with the current transition to
            // service the request.
            if (isPageTransitioning) {
                pageTransitionQueue.unshift(arguments);
                return;
            }

            var settings = $.extend({}, $.mobile.changePage.defaults, options),
                isToPageString;

            // Make sure we have a pageContainer to work with.
            settings.pageContainer = settings.pageContainer || $.mobile.pageContainer;

            // Make sure we have a fromPage.
            settings.fromPage = settings.fromPage || $.mobile.activePage;

            isToPageString = (typeof toPage === "string");

            var mpc = settings.pageContainer,
                pbcEvent = new $.Event("pagebeforechange"),
                triggerData = {
                    toPage: toPage,
                    options: settings
                };

            // NOTE: preserve the original target as the dataUrl value will be simplified
            //       eg, removing ui-state, and removing query params from the hash
            //       this is so that users who want to use query params have access to them
            //       in the event bindings for the page life cycle See issue #5085
            if (isToPageString) {
                // if the toPage is a string simply convert it
                triggerData.absUrl = path.makeUrlAbsolute(toPage, findBaseWithDefault());
            } else {
                // if the toPage is a jQuery object grab the absolute url stored
                // in the loadPage callback where it exists
                triggerData.absUrl = toPage.data('absUrl');
            }

            // Let listeners know we're about to change the current page.
            mpc.trigger(pbcEvent, triggerData);

            // If the default behavior is prevented, stop here!
            if (pbcEvent.isDefaultPrevented()) {
                return;
            }

            // We allow "pagebeforechange" observers to modify the toPage in the trigger
            // data to allow for redirects. Make sure our toPage is updated.
            //
            // We also need to re-evaluate whether it is a string, because an object can
            // also be replaced by a string

            toPage = triggerData.toPage;
            isToPageString = (typeof toPage === "string");

            // Set the isPageTransitioning flag to prevent any requests from
            // entering this method while we are in the midst of loading a page
            // or transitioning.
            isPageTransitioning = true;

            // If the caller passed us a url, call loadPage()
            // to make sure it is loaded into the DOM. We'll listen
            // to the promise object it returns so we know when
            // it is done loading or if an error ocurred.
            if (isToPageString) {
                // preserve the original target as the dataUrl value will be simplified
                // eg, removing ui-state, and removing query params from the hash
                // this is so that users who want to use query params have access to them
                // in the event bindings for the page life cycle See issue #5085
                settings.target = toPage;

                $.mobile.loadPage(toPage, settings)
                    .done(function(url, options, newPage, dupCachedPage) {
                        isPageTransitioning = false;
                        options.duplicateCachedPage = dupCachedPage;

                        // store the original absolute url so that it can be provided
                        // to events in the triggerData of the subsequent changePage call
                        newPage.data('absUrl', triggerData.absUrl);
                        $.mobile.changePage(newPage, options);
                    })
                    .fail(function(url, options) {

                        //clear out the active button state
                        removeActiveLinkClass(true);

                        //release transition lock so navigation is free again
                        releasePageTransitionLock();
                        settings.pageContainer.trigger("pagechangefailed", triggerData);
                    });
                return;
            }

            // If we are going to the first-page of the application, we need to make
            // sure settings.dataUrl is set to the application document url. This allows
            // us to avoid generating a document url with an id hash in the case where the
            // first-page of the document has an id attribute specified.
            if (toPage[0] === $.mobile.firstPage[0] && !settings.dataUrl) {
                settings.dataUrl = documentUrl.hrefNoHash;
            }

            // The caller passed us a real page DOM element. Update our
            // internal state and then trigger a transition to the page.
            var fromPage = settings.fromPage,
                url = (settings.dataUrl && path.convertUrlToDataUrl(settings.dataUrl)) || toPage.jqmData("url"),
                // The pageUrl var is usually the same as url, except when url is obscured as a dialog url. pageUrl always contains the file path
                pageUrl = url,
                fileUrl = path.getFilePath(url),
                active = urlHistory.getActive(),
                activeIsInitialPage = urlHistory.activeIndex === 0,
                historyDir = 0,
                pageTitle = document.title,
                isDialog = settings.role === "dialog" || toPage.jqmData("role") === "dialog";


            // By default, we prevent changePage requests when the fromPage and toPage
            // are the same element, but folks that generate content manually/dynamically
            // and reuse pages want to be able to transition to the same page. To allow
            // this, they will need to change the default value of allowSamePageTransition
            // to true, *OR*, pass it in as an option when they manually call changePage().
            // It should be noted that our default transition animations assume that the
            // formPage and toPage are different elements, so they may behave unexpectedly.
            // It is up to the developer that turns on the allowSamePageTransitiona option
            // to either turn off transition animations, or make sure that an appropriate
            // animation transition is used.
            if (fromPage && fromPage[0] === toPage[0] && !settings.allowSamePageTransition) {
                isPageTransitioning = false;
                mpc.trigger("pagechange", triggerData);

                // Even if there is no page change to be done, we should keep the urlHistory in sync with the hash changes
                if (settings.fromHashChange) {
                    urlHistory.direct({
                        url: url
                    });
                }

                return;
            }

            // We need to make sure the page we are given has already been enhanced.
            enhancePage(toPage, settings.role);

            // If the changePage request was sent from a hashChange event, check to see if the
            // page is already within the urlHistory stack. If so, we'll assume the user hit
            // the forward/back button and will try to match the transition accordingly.
            if (settings.fromHashChange) {
                historyDir = options.direction === "back" ? -1 : 1;
            }

            // Kill the keyboard.
            // XXX_jblas: We need to stop crawling the entire document to kill focus. Instead,
            //            we should be tracking focus with a delegate() handler so we already have
            //            the element in hand at this point.
            // Wrap this in a try/catch block since IE9 throw "Unspecified error" if document.activeElement
            // is undefined when we are in an IFrame.
            try {
                if (document.activeElement && document.activeElement.nodeName.toLowerCase() !== 'body') {
                    $(document.activeElement).blur();
                } else {
                    $("input:focus, textarea:focus, select:focus").blur();
                }
            } catch (e) {}

            // Record whether we are at a place in history where a dialog used to be - if so, do not add a new history entry and do not change the hash either
            var alreadyThere = false;

            // If we're displaying the page as a dialog, we don't want the url
            // for the dialog content to be used in the hash. Instead, we want
            // to append the dialogHashKey to the url of the current page.
            if (isDialog && active) {
                // on the initial page load active.url is undefined and in that case should
                // be an empty string. Moving the undefined -> empty string back into
                // urlHistory.addNew seemed imprudent given undefined better represents
                // the url state

                // If we are at a place in history that once belonged to a dialog, reuse
                // this state without adding to urlHistory and without modifying the hash.
                // However, if a dialog is already displayed at this point, and we're
                // about to display another dialog, then we must add another hash and
                // history entry on top so that one may navigate back to the original dialog
                if (active.url &&
                    active.url.indexOf(dialogHashKey) > -1 &&
                    $.mobile.activePage && !$.mobile.activePage.is(".ui-dialog") &&
                    urlHistory.activeIndex > 0) {
                    settings.changeHash = false;
                    alreadyThere = true;
                }

                // Normally, we tack on a dialog hash key, but if this is the location of a stale dialog,
                // we reuse the URL from the entry
                url = (active.url || "");

                // account for absolute urls instead of just relative urls use as hashes
                if (!alreadyThere && url.indexOf("#") > -1) {
                    url += dialogHashKey;
                } else {
                    url += "#" + dialogHashKey;
                }

                // tack on another dialogHashKey if this is the same as the initial hash
                // this makes sure that a history entry is created for this dialog
                if (urlHistory.activeIndex === 0 && url === urlHistory.initialDst) {
                    url += dialogHashKey;
                }
            }

            // if title element wasn't found, try the page div data attr too
            // If this is a deep-link or a reload ( active === undefined ) then just use pageTitle
            var newPageTitle = (!active) ? pageTitle : toPage.jqmData("title") || toPage.children(":jqmData(role='header')").find(".ui-title").text();
            if ( !! newPageTitle && pageTitle === document.title) {
                pageTitle = newPageTitle;
            }
            if (!toPage.jqmData("title")) {
                toPage.jqmData("title", pageTitle);
            }

            // Make sure we have a transition defined.
            settings.transition = settings.transition ||
                ((historyDir && !activeIsInitialPage) ? active.transition : undefined) ||
                (isDialog ? $.mobile.defaultDialogTransition : $.mobile.defaultPageTransition);

            //add page to history stack if it's not back or forward
            if (!historyDir && alreadyThere) {
                urlHistory.getActive().pageUrl = pageUrl;
            }

            // Set the location hash.
            if (url && !settings.fromHashChange) {
                var params;

                // rebuilding the hash here since we loose it earlier on
                // TODO preserve the originally passed in path
                if (!path.isPath(url) && url.indexOf("#") < 0) {
                    url = "#" + url;
                }

                // TODO the property names here are just silly
                params = {
                    transition: settings.transition,
                    title: pageTitle,
                    pageUrl: pageUrl,
                    role: settings.role
                };

                if (settings.changeHash !== false && $.mobile.hashListeningEnabled) {
                    $.mobile.navigate(url, params, true);
                } else if (toPage[0] !== $.mobile.firstPage[0]) {
                    $.mobile.navigate.history.add(url, params);
                }
            }

            //set page title
            document.title = pageTitle;

            //set "toPage" as activePage
            $.mobile.activePage = toPage;

            // If we're navigating back in the URL history, set reverse accordingly.
            settings.reverse = settings.reverse || historyDir < 0;

            transitionPages(toPage, fromPage, settings.transition, settings.reverse)
                .done(function(name, reverse, $to, $from, alreadyFocused) {
                    removeActiveLinkClass();

                    //if there's a duplicateCachedPage, remove it from the DOM now that it's hidden
                    if (settings.duplicateCachedPage) {
                        settings.duplicateCachedPage.remove();
                    }

                    // Send focus to the newly shown page. Moved from promise .done binding in transitionPages
                    // itself to avoid ie bug that reports offsetWidth as > 0 (core check for visibility)
                    // despite visibility: hidden addresses issue #2965
                    // https://github.com/jquery/jquery-mobile/issues/2965
                    if (!alreadyFocused) {
                        $.mobile.focusPage(toPage);
                    }

                    releasePageTransitionLock();
                    mpc.trigger("pagechange", triggerData);
                });
        };

        $.mobile.changePage.defaults = {
            transition: undefined,
            reverse: false,
            changeHash: true,
            fromHashChange: false,
            role: undefined, // By default we rely on the role defined by the @data-role attribute.
            duplicateCachedPage: undefined,
            pageContainer: undefined,
            showLoadMsg: true, //loading message shows by default when pages are being fetched during changePage
            dataUrl: undefined,
            fromPage: undefined,
            allowSamePageTransition: false
        };

        /* Event Bindings - hashchange, submit, and click */
        function findClosestLink(ele) {
            while (ele) {
                // Look for the closest element with a nodeName of "a".
                // Note that we are checking if we have a valid nodeName
                // before attempting to access it. This is because the
                // node we get called with could have originated from within
                // an embedded SVG document where some symbol instance elements
                // don't have nodeName defined on them, or strings are of type
                // SVGAnimatedString.
                if ((typeof ele.nodeName === "string") && ele.nodeName.toLowerCase() === "a") {
                    break;
                }
                ele = ele.parentNode;
            }
            return ele;
        }

        // The base URL for any given element depends on the page it resides in.
        function getClosestBaseUrl(ele) {
            // Find the closest page and extract out its url.
            var url = $(ele).closest(".ui-page").jqmData("url"),
                base = documentBase.hrefNoHash;

            if (!url || !path.isPath(url)) {
                url = base;
            }

            return path.makeUrlAbsolute(url, base);
        }

        //The following event bindings should be bound after mobileinit has been triggered
        //the following deferred is resolved in the init file
        $.mobile.navreadyDeferred = $.Deferred();
        $.mobile._registerInternalEvents = function() {
            var getAjaxFormData = function($form, calculateOnly) {
                var url, ret = true,
                    formData, vclickedName, method;

                if (!$.mobile.ajaxEnabled ||
                    // test that the form is, itself, ajax false
                    $form.is(":jqmData(ajax='false')") ||
                    // test that $.mobile.ignoreContentEnabled is set and
                    // the form or one of it's parents is ajax=false
                    !$form.jqmHijackable().length ||
                    $form.attr("target")) {
                    return false;
                }

                url = $form.attr("action");
                method = ($form.attr("method") || "get").toLowerCase();

                // If no action is specified, browsers default to using the
                // URL of the document containing the form. Since we dynamically
                // pull in pages from external documents, the form should submit
                // to the URL for the source document of the page containing
                // the form.
                if (!url) {
                    // Get the @data-url for the page containing the form.
                    url = getClosestBaseUrl($form);

                    // NOTE: If the method is "get", we need to strip off the query string
                    // because it will get replaced with the new form data. See issue #5710.
                    if (method === "get") {
                        url = path.parseUrl(url).hrefNoSearch;
                    }

                    if (url === documentBase.hrefNoHash) {
                        // The url we got back matches the document base,
                        // which means the page must be an internal/embedded page,
                        // so default to using the actual document url as a browser
                        // would.
                        url = documentUrl.hrefNoSearch;
                    }
                }

                url = path.makeUrlAbsolute(url, getClosestBaseUrl($form));

                if ((path.isExternal(url) && !path.isPermittedCrossDomainRequest(documentUrl, url))) {
                    return false;
                }

                if (!calculateOnly) {
                    formData = $form.serializeArray();

                    if ($lastVClicked && $lastVClicked[0].form === $form[0]) {
                        vclickedName = $lastVClicked.attr("name");
                        if (vclickedName) {
                            // Make sure the last clicked element is included in the form
                            $.each(formData, function(key, value) {
                                if (value.name === vclickedName) {
                                    // Unset vclickedName - we've found it in the serialized data already
                                    vclickedName = "";
                                    return false;
                                }
                            });
                            if (vclickedName) {
                                formData.push({
                                    name: vclickedName,
                                    value: $lastVClicked.attr("value")
                                });
                            }
                        }
                    }

                    ret = {
                        url: url,
                        options: {
                            type: method,
                            data: $.param(formData),
                            transition: $form.jqmData("transition"),
                            reverse: $form.jqmData("direction") === "reverse",
                            reloadPage: true
                        }
                    };
                }

                return ret;
            };

            //bind to form submit events, handle with Ajax
            $.mobile.document.delegate("form", "submit", function(event) {
                var formData = getAjaxFormData($(this));

                if (formData) {
                    $.mobile.changePage(formData.url, formData.options);
                    event.preventDefault();
                }
            });

            //add active state on vclick
            $.mobile.document.bind("vclick", function(event) {
                var $btn, btnEls, target = event.target,
                    needClosest = false;
                // if this isn't a left click we don't care. Its important to note
                // that when the virtual event is generated it will create the which attr
                if (event.which > 1 || !$.mobile.linkBindingEnabled) {
                    return;
                }

                // Record that this element was clicked, in case we need it for correct
                // form submission during the "submit" handler above
                $lastVClicked = $(target);

                // Try to find a target element to which the active class will be applied
                if ($.data(target, "mobile-button")) {
                    // If the form will not be submitted via AJAX, do not add active class
                    if (!getAjaxFormData($(target).closest("form"), true)) {
                        return;
                    }
                    // We will apply the active state to this button widget - the parent
                    // of the input that was clicked will have the associated data
                    if (target.parentNode) {
                        target = target.parentNode;
                    }
                } else {
                    target = findClosestLink(target);
                    if (!(target && path.parseUrl(target.getAttribute("href") || "#").hash !== "#")) {
                        return;
                    }

                    // TODO teach $.mobile.hijackable to operate on raw dom elements so the
                    // link wrapping can be avoided
                    if (!$(target).jqmHijackable().length) {
                        return;
                    }
                }

                // Avoid calling .closest by using the data set during .buttonMarkup()
                // List items have the button data in the parent of the element clicked
                if ( !! ~target.className.indexOf("ui-link-inherit")) {
                    if (target.parentNode) {
                        btnEls = $.data(target.parentNode, "buttonElements");
                    }
                    // Otherwise, look for the data on the target itself
                } else {
                    btnEls = $.data(target, "buttonElements");
                }
                // If found, grab the button's outer element
                if (btnEls) {
                    target = btnEls.outer;
                } else {
                    needClosest = true;
                }

                $btn = $(target);
                // If the outer element wasn't found by the our heuristics, use .closest()
                if (needClosest) {
                    $btn = $btn.closest(".ui-btn");
                }

                if ($btn.length > 0 && !$btn.hasClass("ui-disabled")) {
                    removeActiveLinkClass(true);
                    $activeClickedLink = $btn;
                    $activeClickedLink.addClass($.mobile.activeBtnClass);
                }
            });

            // click routing - direct to HTTP or Ajax, accordingly
            $.mobile.document.bind("click", function(event) {
                if (!$.mobile.linkBindingEnabled || event.isDefaultPrevented()) {
                    return;
                }

                var link = findClosestLink(event.target),
                    $link = $(link),
                    httpCleanup;

                // If there is no link associated with the click or its not a left
                // click we want to ignore the click
                // TODO teach $.mobile.hijackable to operate on raw dom elements so the link wrapping
                // can be avoided
                if (!link || event.which > 1 || !$link.jqmHijackable().length) {
                    return;
                }

                //remove active link class if external (then it won't be there if you come back)
                httpCleanup = function() {
                    window.setTimeout(function() {
                        removeActiveLinkClass(true);
                    }, 200);
                };

                //if there's a data-rel=back attr, go back in history
                if ($link.is(":jqmData(rel='back')")) {
                    $.mobile.back();
                    return false;
                }

                var baseUrl = getClosestBaseUrl($link),

                    //get href, if defined, otherwise default to empty hash
                    href = path.makeUrlAbsolute($link.attr("href") || "#", baseUrl);

                //if ajax is disabled, exit early
                if (!$.mobile.ajaxEnabled && !path.isEmbeddedPage(href)) {
                    httpCleanup();
                    //use default click handling
                    return;
                }

                // XXX_jblas: Ideally links to application pages should be specified as
                //            an url to the application document with a hash that is either
                //            the site relative path or id to the page. But some of the
                //            internal code that dynamically generates sub-pages for nested
                //            lists and select dialogs, just write a hash in the link they
                //            create. This means the actual URL path is based on whatever
                //            the current value of the base tag is at the time this code
                //            is called. For now we are just assuming that any url with a
                //            hash in it is an application page reference.
                if (href.search("#") !== -1) {
                    href = href.replace(/[^#]*#/, "");
                    if (!href) {
                        //link was an empty hash meant purely
                        //for interaction, so we ignore it.
                        event.preventDefault();
                        return;
                    } else if (path.isPath(href)) {
                        //we have apath so make it the href we want to load.
                        href = path.makeUrlAbsolute(href, baseUrl);
                    } else {
                        //we have a simple id so use the documentUrl as its base.
                        href = path.makeUrlAbsolute("#" + href, documentUrl.hrefNoHash);
                    }
                }

                // Should we handle this link, or let the browser deal with it?
                var useDefaultUrlHandling = $link.is("[rel='external']") || $link.is(":jqmData(ajax='false')") || $link.is("[target]"),

                    // Some embedded browsers, like the web view in Phone Gap, allow cross-domain XHR
                    // requests if the document doing the request was loaded via the file:// protocol.
                    // This is usually to allow the application to "phone home" and fetch app specific
                    // data. We normally let the browser handle external/cross-domain urls, but if the
                    // allowCrossDomainPages option is true, we will allow cross-domain http/https
                    // requests to go through our page loading logic.

                    //check for protocol or rel and its not an embedded page
                    //TODO overlap in logic from isExternal, rel=external check should be
                    //     moved into more comprehensive isExternalLink
                    isExternal = useDefaultUrlHandling || (path.isExternal(href) && !path.isPermittedCrossDomainRequest(documentUrl, href));

                if (isExternal) {
                    httpCleanup();
                    //use default click handling
                    return;
                }

                //use ajax
                var transition = $link.jqmData("transition"),
                    reverse = $link.jqmData("direction") === "reverse" ||
                    // deprecated - remove by 1.0
                    $link.jqmData("back"),

                    //this may need to be more specific as we use data-rel more
                    role = $link.attr("data-" + $.mobile.ns + "rel") || undefined;

                $.mobile.changePage(href, {
                    transition: transition,
                    reverse: reverse,
                    role: role,
                    link: $link
                });
                event.preventDefault();
            });

            //prefetch pages when anchors with data-prefetch are encountered
            $.mobile.document.delegate(".ui-page", "pageshow.prefetch", function() {
                var urls = [];
                $(this).find("a:jqmData(prefetch)").each(function() {
                    var $link = $(this),
                        url = $link.attr("href");

                    if (url && $.inArray(url, urls) === -1) {
                        urls.push(url);

                        $.mobile.loadPage(url, {
                            role: $link.attr("data-" + $.mobile.ns + "rel"),
                            prefetch: true
                        });
                    }
                });
            });

            $.mobile._handleHashChange = function(url, data) {
                //find first page via hash
                var to = path.stripHash(url),
                    //transition is false if it's the first page, undefined otherwise (and may be overridden by default)
                    transition = $.mobile.urlHistory.stack.length === 0 ? "none" : undefined,

                    // default options for the changPage calls made after examining the current state
                    // of the page and the hash, NOTE that the transition is derived from the previous
                    // history entry
                    changePageOptions = {
                        changeHash: false,
                        fromHashChange: true,
                        reverse: data.direction === "back"
                    };

                $.extend(changePageOptions, data, {
                    transition: (urlHistory.getLast() || {}).transition || transition
                });

                // special case for dialogs
                if (urlHistory.activeIndex > 0 && to.indexOf(dialogHashKey) > -1 && urlHistory.initialDst !== to) {

                    // If current active page is not a dialog skip the dialog and continue
                    // in the same direction
                    if ($.mobile.activePage && !$.mobile.activePage.is(".ui-dialog")) {
                        //determine if we're heading forward or backward and continue accordingly past
                        //the current dialog
                        if (data.direction === "back") {
                            $.mobile.back();
                        } else {
                            window.history.forward();
                        }

                        // prevent changePage call
                        return;
                    } else {
                        // if the current active page is a dialog and we're navigating
                        // to a dialog use the dialog objected saved in the stack
                        to = data.pageUrl;
                        var active = $.mobile.urlHistory.getActive();

                        // make sure to set the role, transition and reversal
                        // as most of this is lost by the domCache cleaning
                        $.extend(changePageOptions, {
                            role: active.role,
                            transition: active.transition,
                            reverse: data.direction === "back"
                        });
                    }
                }

                //if to is defined, load it
                if (to) {
                    // At this point, 'to' can be one of 3 things, a cached page element from
                    // a history stack entry, an id, or site-relative/absolute URL. If 'to' is
                    // an id, we need to resolve it against the documentBase, not the location.href,
                    // since the hashchange could've been the result of a forward/backward navigation
                    // that crosses from an external page/dialog to an internal page/dialog.
                    to = !path.isPath(to) ? (path.makeUrlAbsolute('#' + to, documentBase)) : to;

                    // If we're about to go to an initial URL that contains a reference to a non-existent
                    // internal page, go to the first page instead. We know that the initial hash refers to a
                    // non-existent page, because the initial hash did not end up in the initial urlHistory entry
                    if (to === path.makeUrlAbsolute('#' + urlHistory.initialDst, documentBase) &&
                        urlHistory.stack.length && urlHistory.stack[0].url !== urlHistory.initialDst.replace(dialogHashKey, "")) {
                        to = $.mobile.firstPage;
                    }

                    $.mobile.changePage(to, changePageOptions);
                } else {

                    //there's no hash, go to the first page in the dom
                    $.mobile.changePage($.mobile.firstPage, changePageOptions);
                }
            };

            // TODO roll the logic here into the handleHashChange method
            $window.bind("navigate", function(e, data) {
                var url;

                if (e.originalEvent && e.originalEvent.isDefaultPrevented()) {
                    return;
                }

                url = $.event.special.navigate.originalEventName.indexOf("hashchange") > -1 ? data.state.hash : data.state.url;

                if (!url) {
                    url = $.mobile.path.parseLocation().hash;
                }

                if (!url || url === "#" || url.indexOf("#" + $.mobile.path.uiStateKey) === 0) {
                    url = location.href;
                }

                $.mobile._handleHashChange(url, data.state);
            });

            //set page min-heights to be device specific
            $.mobile.document.bind("pageshow", $.mobile.resetActivePageHeight);
            $.mobile.window.bind("throttledresize", $.mobile.resetActivePageHeight);

        }; //navreadyDeferred done callback

        $(function() {
            domreadyDeferred.resolve();
        });

        $.when(domreadyDeferred, $.mobile.navreadyDeferred).done(function() {
            $.mobile._registerInternalEvents();
        });
    })(jQuery);

    /*
     * fallback transition for flip in non-3D supporting browsers (which tend to handle complex transitions poorly in general
     */

    (function($, window, undefined) {

        $.mobile.transitionFallbacks.flip = "fade";

    })(jQuery, this);
    /*
     * fallback transition for flow in non-3D supporting browsers (which tend to handle complex transitions poorly in general
     */

    (function($, window, undefined) {

        $.mobile.transitionFallbacks.flow = "fade";

    })(jQuery, this);
    /*
     * fallback transition for pop in non-3D supporting browsers (which tend to handle complex transitions poorly in general
     */

    (function($, window, undefined) {

        $.mobile.transitionFallbacks.pop = "fade";

    })(jQuery, this);
    /*
     * fallback transition for slide in non-3D supporting browsers (which tend to handle complex transitions poorly in general
     */

    (function($, window, undefined) {

        // Use the simultaneous transitions handler for slide transitions
        $.mobile.transitionHandlers.slide = $.mobile.transitionHandlers.simultaneous;

        // Set the slide transitions's fallback to "fade"
        $.mobile.transitionFallbacks.slide = "fade";

    })(jQuery, this);
    /*
     * fallback transition for slidedown in non-3D supporting browsers (which tend to handle complex transitions poorly in general
     */

    (function($, window, undefined) {

        $.mobile.transitionFallbacks.slidedown = "fade";

    })(jQuery, this);
    /*
     * fallback transition for slidefade in non-3D supporting browsers (which tend to handle complex transitions poorly in general
     */

    (function($, window, undefined) {

        // Set the slide transitions's fallback to "fade"
        $.mobile.transitionFallbacks.slidefade = "fade";

    })(jQuery, this);
    /*
     * fallback transition for slideup in non-3D supporting browsers (which tend to handle complex transitions poorly in general
     */

    (function($, window, undefined) {

        $.mobile.transitionFallbacks.slideup = "fade";

    })(jQuery, this);
    /*
     * fallback transition for turn in non-3D supporting browsers (which tend to handle complex transitions poorly in general
     */

    (function($, window, undefined) {

        $.mobile.transitionFallbacks.turn = "fade";

    })(jQuery, this);

    (function($, undefined) {

        $.mobile.page.prototype.options.degradeInputs = {
            color: false,
            date: false,
            datetime: false,
            "datetime-local": false,
            email: false,
            month: false,
            number: false,
            range: "number",
            search: "text",
            tel: false,
            time: false,
            url: false,
            week: false
        };


        //auto self-init widgets
        $.mobile.document.bind("pagecreate create", function(e) {

            var page = $.mobile.closestPageData($(e.target)),
                options;

            if (!page) {
                return;
            }

            options = page.options;

            // degrade inputs to avoid poorly implemented native functionality
            $(e.target).find("input").not(page.keepNativeSelector()).each(function() {
                var $this = $(this),
                    type = this.getAttribute("type"),
                    optType = options.degradeInputs[type] || "text";

                if (options.degradeInputs[type]) {
                    var html = $("<div>").html($this.clone()).html(),
                        // In IE browsers, the type sometimes doesn't exist in the cloned markup, so we replace the closing tag instead
                        hasType = html.indexOf(" type=") > -1,
                        findstr = hasType ? /\s+type=["']?\w+['"]?/ : /\/?>/,
                        repstr = " type=\"" + optType + "\" data-" + $.mobile.ns + "type=\"" + type + "\"" + (hasType ? "" : ">");

                    $this.replaceWith(html.replace(findstr, repstr));
                }
            });

        });

    })(jQuery);

    (function($, window, undefined) {

        $.widget("mobile.dialog", $.mobile.widget, {
            options: {
                closeBtn: "left",
                closeBtnText: "Close",
                overlayTheme: "a",
                corners: true,
                initSelector: ":jqmData(role='dialog')"
            },

            // Override the theme set by the page plugin on pageshow
            _handlePageBeforeShow: function() {
                this._isCloseable = true;
                if (this.options.overlayTheme) {
                    this.element
                        .page("removeContainerBackground")
                        .page("setContainerBackground", this.options.overlayTheme);
                }
            },

            _handlePageBeforeHide: function() {
                this._isCloseable = false;
            },

            _create: function() {
                var self = this,
                    $el = this.element,
                    cornerClass = !! this.options.corners ? " ui-corner-all" : "",
                    dialogWrap = $("<div/>", {
                        "role": "dialog",
                        "class": "ui-dialog-contain ui-overlay-shadow" + cornerClass
                    });

                $el.addClass("ui-dialog ui-overlay-" + this.options.overlayTheme);

                // Class the markup for dialog styling
                // Set aria role
                $el.wrapInner(dialogWrap);

                /* bind events
			- clicks and submits should use the closing transition that the dialog opened with
				unless a data-transition is specified on the link/form
			- if the click was on the close button, or the link has a data-rel="back" it'll go back in history naturally
		*/
                $el.bind("vclick submit", function(event) {
                    var $target = $(event.target).closest(event.type === "vclick" ? "a" : "form"),
                        active;

                    if ($target.length && !$target.jqmData("transition")) {

                        active = $.mobile.urlHistory.getActive() || {};

                        $target.attr("data-" + $.mobile.ns + "transition", (active.transition || $.mobile.defaultDialogTransition))
                            .attr("data-" + $.mobile.ns + "direction", "reverse");
                    }
                });

                this._on($el, {
                    pagebeforeshow: "_handlePageBeforeShow",
                    pagebeforehide: "_handlePageBeforeHide"
                });

                $.extend(this, {
                    _createComplete: false
                });

                this._setCloseBtn(this.options.closeBtn);
            },

            _setCloseBtn: function(value) {
                var self = this,
                    btn, location;

                if (this._headerCloseButton) {
                    this._headerCloseButton.remove();
                    this._headerCloseButton = null;
                }
                if (value !== "none") {
                    // Sanitize value
                    location = (value === "left" ? "left" : "right");
                    btn = $("<a href='#' class='ui-btn-" + location + "' data-" + $.mobile.ns + "icon='delete' data-" + $.mobile.ns + "iconpos='notext'>" + this.options.closeBtnText + "</a>");
                    this.element.children().find(":jqmData(role='header')").first().prepend(btn);
                    if (this._createComplete && $.fn.buttonMarkup) {
                        btn.buttonMarkup();
                    }
                    this._createComplete = true;

                    // this must be an anonymous function so that select menu dialogs can replace
                    // the close method. This is a change from previously just defining data-rel=back
                    // on the button and letting nav handle it
                    //
                    // Use click rather than vclick in order to prevent the possibility of unintentionally
                    // reopening the dialog if the dialog opening item was directly under the close button.
                    btn.bind("click", function() {
                        self.close();
                    });

                    this._headerCloseButton = btn;
                }
            },

            _setOption: function(key, value) {
                if (key === "closeBtn") {
                    this._setCloseBtn(value);
                }
                this._super(key, value);
            },

            // Close method goes back in history
            close: function() {
                var idx, dst, hist = $.mobile.navigate.history;

                if (this._isCloseable) {
                    this._isCloseable = false;
                    // If the hash listening is enabled and there is at least one preceding history
                    // entry it's ok to go back. Initial pages with the dialog hash state are an example
                    // where the stack check is necessary
                    if ($.mobile.hashListeningEnabled && hist.activeIndex > 0) {
                        $.mobile.back();
                    } else {
                        idx = Math.max(0, hist.activeIndex - 1);
                        dst = hist.stack[idx].pageUrl || hist.stack[idx].url;
                        hist.previousIndex = hist.activeIndex;
                        hist.activeIndex = idx;
                        if (!$.mobile.path.isPath(dst)) {
                            dst = $.mobile.path.makeUrlAbsolute("#" + dst);
                        }

                        $.mobile.changePage(dst, {
                            direction: "back",
                            changeHash: false,
                            fromHashChange: true
                        });
                    }
                }
            }
        });

        //auto self-init widgets
        $.mobile.document.delegate($.mobile.dialog.prototype.options.initSelector, "pagecreate", function() {
            $.mobile.dialog.prototype.enhance(this);
        });

    })(jQuery, this);

    (function($, undefined) {

        $.mobile.page.prototype.options.backBtnText = "Back";
        $.mobile.page.prototype.options.addBackBtn = false;
        $.mobile.page.prototype.options.backBtnTheme = null;
        $.mobile.page.prototype.options.headerTheme = "a";
        $.mobile.page.prototype.options.footerTheme = "a";
        $.mobile.page.prototype.options.contentTheme = null;

        // NOTE bind used to force this binding to run before the buttonMarkup binding
        //      which expects .ui-footer top be applied in its gigantic selector
        // TODO remove the buttonMarkup giant selector and move it to the various modules
        //      on which it depends
        $.mobile.document.bind("pagecreate", function(e) {
            var $page = $(e.target),
                o = $page.data("mobile-page").options,
                pageRole = $page.jqmData("role"),
                pageTheme = o.theme;

            $(":jqmData(role='header'), :jqmData(role='footer'), :jqmData(role='content')", $page)
                .jqmEnhanceable()
                .each(function() {

                    var $this = $(this),
                        role = $this.jqmData("role"),
                        theme = $this.jqmData("theme"),
                        contentTheme = theme || o.contentTheme || (pageRole === "dialog" && pageTheme),
                        $headeranchors,
                        leftbtn,
                        rightbtn,
                        backBtn;

                    $this.addClass("ui-" + role);

                    //apply theming and markup modifications to page,header,content,footer
                    if (role === "header" || role === "footer") {

                        var thisTheme = theme || (role === "header" ? o.headerTheme : o.footerTheme) || pageTheme;

                        $this
                        //add theme class
                        .addClass("ui-bar-" + thisTheme)
                        // Add ARIA role
                        .attr("role", role === "header" ? "banner" : "contentinfo");

                        if (role === "header") {
                            // Right,left buttons
                            $headeranchors = $this.children("a, button");
                            leftbtn = $headeranchors.hasClass("ui-btn-left");
                            rightbtn = $headeranchors.hasClass("ui-btn-right");

                            leftbtn = leftbtn || $headeranchors.eq(0).not(".ui-btn-right").addClass("ui-btn-left").length;

                            rightbtn = rightbtn || $headeranchors.eq(1).addClass("ui-btn-right").length;
                        }

                        // Auto-add back btn on pages beyond first view
                        if (o.addBackBtn &&
                            role === "header" &&
                            $(".ui-page").length > 1 &&
                            $page.jqmData("url") !== $.mobile.path.stripHash(location.hash) && !leftbtn) {

                            backBtn = $("<a href='javascript:void(0);' class='ui-btn-left' data-" + $.mobile.ns + "rel='back' data-" + $.mobile.ns + "icon='arrow-l'>" + o.backBtnText + "</a>")
                            // If theme is provided, override default inheritance
                            .attr("data-" + $.mobile.ns + "theme", o.backBtnTheme || thisTheme)
                                .prependTo($this);
                        }

                        // Page title
                        $this.children("h1, h2, h3, h4, h5, h6")
                            .addClass("ui-title")
                        // Regardless of h element number in src, it becomes h1 for the enhanced page
                        .attr({
                            "role": "heading",
                            "aria-level": "1"
                        });

                    } else if (role === "content") {
                        if (contentTheme) {
                            $this.addClass("ui-body-" + (contentTheme));
                        }

                        // Add ARIA role
                        $this.attr("role", "main");
                    }
                });
        });

    })(jQuery);

    (function($, undefined) {

        // This function calls getAttribute, which should be safe for data-* attributes
        var getAttrFixed = function(e, key) {
            var value = e.getAttribute(key);

            return value === "true" ? true :
                value === "false" ? false :
                value === null ? undefined : value;
        };

        $.fn.buttonMarkup = function(options) {
            var $workingSet = this,
                nsKey = "data-" + $.mobile.ns,
                key;

            // Enforce options to be of type string
            options = (options && ($.type(options) === "object")) ? options : {};
            for (var i = 0; i < $workingSet.length; i++) {
                var el = $workingSet.eq(i),
                    e = el[0],
                    o = $.extend({}, $.fn.buttonMarkup.defaults, {
                        icon: options.icon !== undefined ? options.icon : getAttrFixed(e, nsKey + "icon"),
                        iconpos: options.iconpos !== undefined ? options.iconpos : getAttrFixed(e, nsKey + "iconpos"),
                        theme: options.theme !== undefined ? options.theme : getAttrFixed(e, nsKey + "theme") || $.mobile.getInheritedTheme(el, "c"),
                        inline: options.inline !== undefined ? options.inline : getAttrFixed(e, nsKey + "inline"),
                        shadow: options.shadow !== undefined ? options.shadow : getAttrFixed(e, nsKey + "shadow"),
                        corners: options.corners !== undefined ? options.corners : getAttrFixed(e, nsKey + "corners"),
                        iconshadow: options.iconshadow !== undefined ? options.iconshadow : getAttrFixed(e, nsKey + "iconshadow"),
                        mini: options.mini !== undefined ? options.mini : getAttrFixed(e, nsKey + "mini")
                    }, options),

                    // Classes Defined
                    innerClass = "ui-btn-inner",
                    textClass = "ui-btn-text",
                    buttonClass, iconClass,
                    hover = false,
                    state = "up",
                    // Button inner markup
                    buttonInner,
                    buttonText,
                    buttonIcon,
                    buttonElements;

                for (key in o) {
                    if (o[key] === undefined || o[key] === null) {
                        el.removeAttr(nsKey + key);
                    } else {
                        e.setAttribute(nsKey + key, o[key]);
                    }
                }

                // Check if this element is already enhanced
                buttonElements = $.data(((e.tagName === "INPUT" || e.tagName === "BUTTON") ? e.parentNode : e), "buttonElements");

                if (buttonElements) {
                    e = buttonElements.outer;
                    el = $(e);
                    buttonInner = buttonElements.inner;
                    buttonText = buttonElements.text;
                    // We will recreate this icon below
                    $(buttonElements.icon).remove();
                    buttonElements.icon = null;
                    hover = buttonElements.hover;
                    state = buttonElements.state;
                } else {
                    buttonInner = document.createElement(o.wrapperEls);
                    buttonText = document.createElement(o.wrapperEls);
                }
                buttonIcon = o.icon ? document.createElement("span") : null;

                if (attachEvents && !buttonElements) {
                    attachEvents();
                }

                // if not, try to find closest theme container
                if (!o.theme) {
                    o.theme = $.mobile.getInheritedTheme(el, "c");
                }

                buttonClass = "ui-btn ";
                buttonClass += (hover ? "ui-btn-hover-" + o.theme : "");
                buttonClass += (state ? " ui-btn-" + state + "-" + o.theme : "");
                buttonClass += o.shadow ? " ui-shadow" : "";
                buttonClass += o.corners ? " ui-btn-corner-all" : "";

                if (o.mini !== undefined) {
                    // Used to control styling in headers/footers, where buttons default to `mini` style.
                    buttonClass += o.mini === true ? " ui-mini" : " ui-fullsize";
                }

                if (o.inline !== undefined) {
                    // Used to control styling in headers/footers, where buttons default to `inline` style.
                    buttonClass += o.inline === true ? " ui-btn-inline" : " ui-btn-block";
                }

                if (o.icon) {
                    o.icon = "ui-icon-" + o.icon;
                    o.iconpos = o.iconpos || "left";

                    iconClass = "ui-icon " + o.icon;

                    if (o.iconshadow) {
                        iconClass += " ui-icon-shadow";
                    }
                }

                if (o.iconpos) {
                    buttonClass += " ui-btn-icon-" + o.iconpos;

                    if (o.iconpos === "notext" && !el.attr("title")) {
                        el.attr("title", el.getEncodedText());
                    }
                }

                if (buttonElements) {
                    el.removeClass(buttonElements.bcls || "");
                }
                el.removeClass("ui-link").addClass(buttonClass);

                buttonInner.className = innerClass;
                buttonText.className = textClass;
                if (!buttonElements) {
                    buttonInner.appendChild(buttonText);
                }
                if (buttonIcon) {
                    buttonIcon.className = iconClass;
                    if (!(buttonElements && buttonElements.icon)) {
                        buttonIcon.innerHTML = "&#160;";
                        buttonInner.appendChild(buttonIcon);
                    }
                }

                while (e.firstChild && !buttonElements) {
                    buttonText.appendChild(e.firstChild);
                }

                if (!buttonElements) {
                    e.appendChild(buttonInner);
                }

                // Assign a structure containing the elements of this button to the elements of this button. This
                // will allow us to recognize this as an already-enhanced button in future calls to buttonMarkup().
                buttonElements = {
                    hover: hover,
                    state: state,
                    bcls: buttonClass,
                    outer: e,
                    inner: buttonInner,
                    text: buttonText,
                    icon: buttonIcon
                };

                $.data(e, 'buttonElements', buttonElements);
                $.data(buttonInner, 'buttonElements', buttonElements);
                $.data(buttonText, 'buttonElements', buttonElements);
                if (buttonIcon) {
                    $.data(buttonIcon, 'buttonElements', buttonElements);
                }
            }

            return this;
        };

        $.fn.buttonMarkup.defaults = {
            corners: true,
            shadow: true,
            iconshadow: true,
            wrapperEls: "span"
        };

        function closestEnabledButton(element) {
            var cname;

            while (element) {
                // Note that we check for typeof className below because the element we
                // handed could be in an SVG DOM where className on SVG elements is defined to
                // be of a different type (SVGAnimatedString). We only operate on HTML DOM
                // elements, so we look for plain "string".
                cname = (typeof element.className === 'string') && (element.className + ' ');
                if (cname && cname.indexOf("ui-btn ") > -1 && cname.indexOf("ui-disabled ") < 0) {
                    break;
                }

                element = element.parentNode;
            }

            return element;
        }

        function updateButtonClass($btn, classToRemove, classToAdd, hover, state) {
            var buttonElements = $.data($btn[0], "buttonElements");
            $btn.removeClass(classToRemove).addClass(classToAdd);
            if (buttonElements) {
                buttonElements.bcls = $(document.createElement("div"))
                    .addClass(buttonElements.bcls + " " + classToAdd)
                    .removeClass(classToRemove)
                    .attr("class");
                if (hover !== undefined) {
                    buttonElements.hover = hover;
                }
                buttonElements.state = state;
            }
        }

        var attachEvents = function() {
            var hoverDelay = $.mobile.buttonMarkup.hoverDelay,
                hov, foc;

            $.mobile.document.bind({
                "vmousedown vmousecancel vmouseup vmouseover vmouseout focus blur scrollstart": function(event) {
                    var theme,
                        $btn = $(closestEnabledButton(event.target)),
                        isTouchEvent = event.originalEvent && /^touch/.test(event.originalEvent.type),
                        evt = event.type;

                    if ($btn.length) {
                        theme = $btn.attr("data-" + $.mobile.ns + "theme");

                        if (evt === "vmousedown") {
                            if (isTouchEvent) {
                                // Use a short delay to determine if the user is scrolling before highlighting
                                hov = setTimeout(function() {
                                    updateButtonClass($btn, "ui-btn-up-" + theme, "ui-btn-down-" + theme, undefined, "down");
                                }, hoverDelay);
                            } else {
                                updateButtonClass($btn, "ui-btn-up-" + theme, "ui-btn-down-" + theme, undefined, "down");
                            }
                        } else if (evt === "vmousecancel" || evt === "vmouseup") {
                            updateButtonClass($btn, "ui-btn-down-" + theme, "ui-btn-up-" + theme, undefined, "up");
                        } else if (evt === "vmouseover" || evt === "focus") {
                            if (isTouchEvent) {
                                // Use a short delay to determine if the user is scrolling before highlighting
                                foc = setTimeout(function() {
                                    updateButtonClass($btn, "ui-btn-up-" + theme, "ui-btn-hover-" + theme, true, "");
                                }, hoverDelay);
                            } else {
                                updateButtonClass($btn, "ui-btn-up-" + theme, "ui-btn-hover-" + theme, true, "");
                            }
                        } else if (evt === "vmouseout" || evt === "blur" || evt === "scrollstart") {
                            updateButtonClass($btn, "ui-btn-hover-" + theme + " ui-btn-down-" + theme, "ui-btn-up-" + theme, false, "up");
                            if (hov) {
                                clearTimeout(hov);
                            }
                            if (foc) {
                                clearTimeout(foc);
                            }
                        }
                    }
                },
                "focusin focus": function(event) {
                    $(closestEnabledButton(event.target)).addClass($.mobile.focusClass);
                },
                "focusout blur": function(event) {
                    $(closestEnabledButton(event.target)).removeClass($.mobile.focusClass);
                }
            });

            attachEvents = null;
        };

        //links in bars, or those with  data-role become buttons
        //auto self-init widgets
        $.mobile.document.bind("pagecreate create", function(e) {

            $(":jqmData(role='button'), .ui-bar > a, .ui-header > a, .ui-footer > a, .ui-bar > :jqmData(role='controlgroup') > a", e.target)
                .jqmEnhanceable()
                .not("button, input, .ui-btn, :jqmData(role='none'), :jqmData(role='nojs')")
                .buttonMarkup();
        });

    })(jQuery);


    (function($, undefined) {

        $.widget("mobile.collapsible", $.mobile.widget, {
            options: {
                expandCueText: " click to expand contents",
                collapseCueText: " click to collapse contents",
                collapsed: true,
                heading: "h1,h2,h3,h4,h5,h6,legend",
                collapsedIcon: "plus",
                expandedIcon: "minus",
                iconpos: "left",
                theme: null,
                contentTheme: null,
                inset: true,
                corners: true,
                mini: false,
                initSelector: ":jqmData(role='collapsible')"
            },
            _create: function() {

                var $el = this.element,
                    o = this.options,
                    collapsible = $el.addClass("ui-collapsible"),
                    collapsibleHeading = $el.children(o.heading).first(),
                    collapsibleContent = collapsible.wrapInner("<div class='ui-collapsible-content'></div>").children(".ui-collapsible-content"),
                    collapsibleSet = $el.closest(":jqmData(role='collapsible-set')").addClass("ui-collapsible-set"),
                    collapsibleClasses = "";

                // Replace collapsibleHeading if it's a legend
                if (collapsibleHeading.is("legend")) {
                    collapsibleHeading = $("<div role='heading'>" + collapsibleHeading.html() + "</div>").insertBefore(collapsibleHeading);
                    collapsibleHeading.next().remove();
                }

                // If we are in a collapsible set
                if (collapsibleSet.length) {
                    // Inherit the theme from collapsible-set
                    if (!o.theme) {
                        o.theme = collapsibleSet.jqmData("theme") || $.mobile.getInheritedTheme(collapsibleSet, "c");
                    }
                    // Inherit the content-theme from collapsible-set
                    if (!o.contentTheme) {
                        o.contentTheme = collapsibleSet.jqmData("content-theme");
                    }

                    // Get the preference for collapsed icon in the set, but override with data- attribute on the individual collapsible
                    o.collapsedIcon = $el.jqmData("collapsed-icon") || collapsibleSet.jqmData("collapsed-icon") || o.collapsedIcon;

                    // Get the preference for expanded icon in the set, but override with data- attribute on the individual collapsible
                    o.expandedIcon = $el.jqmData("expanded-icon") || collapsibleSet.jqmData("expanded-icon") || o.expandedIcon;

                    // Gets the preference icon position in the set, but override with data- attribute on the individual collapsible
                    o.iconpos = $el.jqmData("iconpos") || collapsibleSet.jqmData("iconpos") || o.iconpos;

                    // Inherit the preference for inset from collapsible-set or set the default value to ensure equalty within a set
                    if (collapsibleSet.jqmData("inset") !== undefined) {
                        o.inset = collapsibleSet.jqmData("inset");
                    } else {
                        o.inset = true;
                    }
                    // Set corners for individual collapsibles to false when in a collapsible-set
                    o.corners = false;
                    // Gets the preference for mini in the set
                    if (!o.mini) {
                        o.mini = collapsibleSet.jqmData("mini");
                    }
                } else {
                    // get inherited theme if not a set and no theme has been set
                    if (!o.theme) {
                        o.theme = $.mobile.getInheritedTheme($el, "c");
                    }
                }

                if ( !! o.inset) {
                    collapsibleClasses += " ui-collapsible-inset";
                    if ( !! o.corners) {
                        collapsibleClasses += " ui-corner-all";
                    }
                }
                if (o.contentTheme) {
                    collapsibleClasses += " ui-collapsible-themed-content";
                    collapsibleContent.addClass("ui-body-" + o.contentTheme);
                }
                if (collapsibleClasses !== "") {
                    collapsible.addClass(collapsibleClasses);
                }

                collapsibleHeading
                //drop heading in before content
                .insertBefore(collapsibleContent)
                //modify markup & attributes
                .addClass("ui-collapsible-heading")
                    .append("<span class='ui-collapsible-heading-status'></span>")
                    .wrapInner("<a href='#' class='ui-collapsible-heading-toggle'></a>")
                    .find("a")
                    .first()
                    .buttonMarkup({
                        shadow: false,
                        corners: false,
                        iconpos: o.iconpos,
                        icon: o.collapsedIcon,
                        mini: o.mini,
                        theme: o.theme
                    });

                //events
                collapsible
                    .bind("expand collapse", function(event) {
                        if (!event.isDefaultPrevented()) {
                            var $this = $(this),
                                isCollapse = (event.type === "collapse");

                            event.preventDefault();

                            collapsibleHeading
                                .toggleClass("ui-collapsible-heading-collapsed", isCollapse)
                                .find(".ui-collapsible-heading-status")
                                .text(isCollapse ? o.expandCueText : o.collapseCueText)
                                .end()
                                .find(".ui-icon")
                                .toggleClass("ui-icon-" + o.expandedIcon, !isCollapse)
                            // logic or cause same icon for expanded/collapsed state would remove the ui-icon-class
                            .toggleClass("ui-icon-" + o.collapsedIcon, (isCollapse || o.expandedIcon === o.collapsedIcon))
                                .end()
                                .find("a").first().removeClass($.mobile.activeBtnClass);

                            $this.toggleClass("ui-collapsible-collapsed", isCollapse);
                            collapsibleContent.toggleClass("ui-collapsible-content-collapsed", isCollapse).attr("aria-hidden", isCollapse);

                            collapsibleContent.trigger("updatelayout");
                        }
                    })
                    .trigger(o.collapsed ? "collapse" : "expand");

                collapsibleHeading
                    .bind("tap", function(event) {
                        collapsibleHeading.find("a").first().addClass($.mobile.activeBtnClass);
                    })
                    .bind("click", function(event) {

                        var type = collapsibleHeading.is(".ui-collapsible-heading-collapsed") ? "expand" : "collapse";

                        collapsible.trigger(type);

                        event.preventDefault();
                        event.stopPropagation();
                    });
            }
        });

        //auto self-init widgets
        $.mobile.document.bind("pagecreate create", function(e) {
            $.mobile.collapsible.prototype.enhanceWithin(e.target);
        });

    })(jQuery);

    (function($, undefined) {

        $.mobile.behaviors.addFirstLastClasses = {
            _getVisibles: function($els, create) {
                var visibles;

                if (create) {
                    visibles = $els.not(".ui-screen-hidden");
                } else {
                    visibles = $els.filter(":visible");
                    if (visibles.length === 0) {
                        visibles = $els.not(".ui-screen-hidden");
                    }
                }

                return visibles;
            },

            _addFirstLastClasses: function($els, $visibles, create) {
                $els.removeClass("ui-first-child ui-last-child");
                $visibles.eq(0).addClass("ui-first-child").end().last().addClass("ui-last-child");
                if (!create) {
                    this.element.trigger("updatelayout");
                }
            }
        };

    })(jQuery);

    (function($, undefined) {

        $.widget("mobile.collapsibleset", $.mobile.widget, $.extend({
            options: {
                initSelector: ":jqmData(role='collapsible-set')"
            },
            _create: function() {
                var $el = this.element.addClass("ui-collapsible-set"),
                    o = this.options;

                // Inherit the theme from collapsible-set
                if (!o.theme) {
                    o.theme = $.mobile.getInheritedTheme($el, "c");
                }
                // Inherit the content-theme from collapsible-set
                if (!o.contentTheme) {
                    o.contentTheme = $el.jqmData("content-theme");
                }
                // Inherit the corner styling from collapsible-set
                if (!o.corners) {
                    o.corners = $el.jqmData("corners");
                }

                if ($el.jqmData("inset") !== undefined) {
                    o.inset = $el.jqmData("inset");
                }
                o.inset = o.inset !== undefined ? o.inset : true;
                o.corners = o.corners !== undefined ? o.corners : true;

                if ( !! o.corners && !! o.inset) {
                    $el.addClass("ui-corner-all");
                }

                // Initialize the collapsible set if it's not already initialized
                if (!$el.jqmData("collapsiblebound")) {
                    $el
                        .jqmData("collapsiblebound", true)
                        .bind("expand", function(event) {
                            var closestCollapsible = $(event.target)
                                .closest(".ui-collapsible");
                            if (closestCollapsible.parent().is(":jqmData(role='collapsible-set')")) {
                                closestCollapsible
                                    .siblings(".ui-collapsible")
                                    .trigger("collapse");
                            }
                        });
                }
            },

            _init: function() {
                var $el = this.element,
                    collapsiblesInSet = $el.children(":jqmData(role='collapsible')"),
                    expanded = collapsiblesInSet.filter(":jqmData(collapsed='false')");
                this._refresh("true");

                // Because the corners are handled by the collapsible itself and the default state is collapsed
                // That was causing https://github.com/jquery/jquery-mobile/issues/4116
                expanded.trigger("expand");
            },

            _refresh: function(create) {
                var collapsiblesInSet = this.element.children(":jqmData(role='collapsible')");

                $.mobile.collapsible.prototype.enhance(collapsiblesInSet.not(".ui-collapsible"));

                this._addFirstLastClasses(collapsiblesInSet, this._getVisibles(collapsiblesInSet, create), create);
            },

            refresh: function() {
                this._refresh(false);
            }
        }, $.mobile.behaviors.addFirstLastClasses));

        //auto self-init widgets
        $.mobile.document.bind("pagecreate create", function(e) {
            $.mobile.collapsibleset.prototype.enhanceWithin(e.target);
        });

    })(jQuery);

    (function($, undefined) {

        // filter function removes whitespace between label and form element so we can use inline-block (nodeType 3 = text)
        $.fn.fieldcontain = function(options) {
            return this
                .addClass("ui-field-contain ui-body ui-br")
                .contents().filter(function() {
                    return (this.nodeType === 3 && !/\S/.test(this.nodeValue));
                }).remove();
        };

        //auto self-init widgets
        $(document).bind("pagecreate create", function(e) {
            $(":jqmData(role='fieldcontain')", e.target).jqmEnhanceable().fieldcontain();
        });

    })(jQuery);

    (function($, undefined) {

        $.fn.grid = function(options) {
            return this.each(function() {

                var $this = $(this),
                    o = $.extend({
                        grid: null
                    }, options),
                    $kids = $this.children(),
                    gridCols = {
                        solo: 1,
                        a: 2,
                        b: 3,
                        c: 4,
                        d: 5
                    },
                    grid = o.grid,
                    iterator;

                if (!grid) {
                    if ($kids.length <= 5) {
                        for (var letter in gridCols) {
                            if (gridCols[letter] === $kids.length) {
                                grid = letter;
                            }
                        }
                    } else {
                        grid = "a";
                        $this.addClass("ui-grid-duo");
                    }
                }
                iterator = gridCols[grid];

                $this.addClass("ui-grid-" + grid);

                $kids.filter(":nth-child(" + iterator + "n+1)").addClass("ui-block-a");

                if (iterator > 1) {
                    $kids.filter(":nth-child(" + iterator + "n+2)").addClass("ui-block-b");
                }
                if (iterator > 2) {
                    $kids.filter(":nth-child(" + iterator + "n+3)").addClass("ui-block-c");
                }
                if (iterator > 3) {
                    $kids.filter(":nth-child(" + iterator + "n+4)").addClass("ui-block-d");
                }
                if (iterator > 4) {
                    $kids.filter(":nth-child(" + iterator + "n+5)").addClass("ui-block-e");
                }
            });
        };
    })(jQuery);

    (function($, undefined) {

        $.widget("mobile.navbar", $.mobile.widget, {
            options: {
                iconpos: "top",
                grid: null,
                initSelector: ":jqmData(role='navbar')"
            },

            _create: function() {

                var $navbar = this.element,
                    $navbtns = $navbar.find("a"),
                    iconpos = $navbtns.filter(":jqmData(icon)").length ?
                        this.options.iconpos : undefined;

                $navbar.addClass("ui-navbar ui-mini")
                    .attr("role", "navigation")
                    .find("ul")
                    .jqmEnhanceable()
                    .grid({
                        grid: this.options.grid
                    });

                $navbtns.buttonMarkup({
                    corners: false,
                    shadow: false,
                    inline: true,
                    iconpos: iconpos
                });

                $navbar.delegate("a", "vclick", function(event) {
                    // ui-btn-inner is returned as target
                    var target = $(event.target).is("a") ? $(this) : $(this).parent("a");

                    if (!target.is(".ui-disabled, .ui-btn-active")) {
                        $navbtns.removeClass($.mobile.activeBtnClass);
                        $(this).addClass($.mobile.activeBtnClass);

                        // The code below is a workaround to fix #1181
                        var activeBtn = $(this);

                        $(document).one("pagehide", function() {
                            activeBtn.removeClass($.mobile.activeBtnClass);
                        });
                    }
                });

                // Buttons in the navbar with ui-state-persist class should regain their active state before page show
                $navbar.closest(".ui-page").bind("pagebeforeshow", function() {
                    $navbtns.filter(".ui-state-persist").addClass($.mobile.activeBtnClass);
                });
            }
        });

        //auto self-init widgets
        $.mobile.document.bind("pagecreate create", function(e) {
            $.mobile.navbar.prototype.enhanceWithin(e.target);
        });

    })(jQuery);

    (function($, undefined) {

        //Keeps track of the number of lists per page UID
        //This allows support for multiple nested list in the same page
        //https://github.com/jquery/jquery-mobile/issues/1617
        var listCountPerPage = {};

        $.widget("mobile.listview", $.mobile.widget, $.extend({

            options: {
                theme: null,
                countTheme: "c",
                headerTheme: "b",
                dividerTheme: "b",
                icon: "arrow-r",
                splitIcon: "arrow-r",
                splitTheme: "b",
                corners: true,
                shadow: true,
                inset: false,
                initSelector: ":jqmData(role='listview')"
            },

            _create: function() {
                var t = this,
                    listviewClasses = "";

                listviewClasses += t.options.inset ? " ui-listview-inset" : "";

                if ( !! t.options.inset) {
                    listviewClasses += t.options.corners ? " ui-corner-all" : "";
                    listviewClasses += t.options.shadow ? " ui-shadow" : "";
                }

                // create listview markup
                t.element.addClass(function(i, orig) {
                    return orig + " ui-listview" + listviewClasses;
                });

                t.refresh(true);
            },

            // This is a generic utility method for finding the first
            // node with a given nodeName. It uses basic DOM traversal
            // to be fast and is meant to be a substitute for simple
            // $.fn.closest() and $.fn.children() calls on a single
            // element. Note that callers must pass both the lowerCase
            // and upperCase version of the nodeName they are looking for.
            // The main reason for this is that this function will be
            // called many times and we want to avoid having to lowercase
            // the nodeName from the element every time to ensure we have
            // a match. Note that this function lives here for now, but may
            // be moved into $.mobile if other components need a similar method.
            _findFirstElementByTagName: function(ele, nextProp, lcName, ucName) {
                var dict = {};
                dict[lcName] = dict[ucName] = true;
                while (ele) {
                    if (dict[ele.nodeName]) {
                        return ele;
                    }
                    ele = ele[nextProp];
                }
                return null;
            },
            _getChildrenByTagName: function(ele, lcName, ucName) {
                var results = [],
                    dict = {};
                dict[lcName] = dict[ucName] = true;
                ele = ele.firstChild;
                while (ele) {
                    if (dict[ele.nodeName]) {
                        results.push(ele);
                    }
                    ele = ele.nextSibling;
                }
                return $(results);
            },

            _addThumbClasses: function(containers) {
                var i, img, len = containers.length;
                for (i = 0; i < len; i++) {
                    img = $(this._findFirstElementByTagName(containers[i].firstChild, "nextSibling", "img", "IMG"));
                    if (img.length) {
                        img.addClass("ui-li-thumb");
                        $(this._findFirstElementByTagName(img[0].parentNode, "parentNode", "li", "LI")).addClass(img.is(".ui-li-icon") ? "ui-li-has-icon" : "ui-li-has-thumb");
                    }
                }
            },

            refresh: function(create) {
                this.parentPage = this.element.closest(".ui-page");
                this._createSubPages();

                var o = this.options,
                    $list = this.element,
                    self = this,
                    dividertheme = $list.jqmData("dividertheme") || o.dividerTheme,
                    listsplittheme = $list.jqmData("splittheme"),
                    listspliticon = $list.jqmData("spliticon"),
                    listicon = $list.jqmData("icon"),
                    li = this._getChildrenByTagName($list[0], "li", "LI"),
                    ol = !! $.nodeName($list[0], "ol"),
                    jsCount = !$.support.cssPseudoElement,
                    start = $list.attr("start"),
                    itemClassDict = {},
                    item, itemClass, itemTheme,
                    a, last, splittheme, counter, startCount, newStartCount, countParent, icon, imgParents, img, linkIcon;

                if (ol && jsCount) {
                    $list.find(".ui-li-dec").remove();
                }

                if (ol) {
                    // Check if a start attribute has been set while taking a value of 0 into account
                    if (start || start === 0) {
                        if (!jsCount) {
                            startCount = parseInt(start, 10) - 1;
                            $list.css("counter-reset", "listnumbering " + startCount);
                        } else {
                            counter = parseInt(start, 10);
                        }
                    } else if (jsCount) {
                        counter = 1;
                    }
                }

                if (!o.theme) {
                    o.theme = $.mobile.getInheritedTheme(this.element, "c");
                }

                for (var pos = 0, numli = li.length; pos < numli; pos++) {
                    item = li.eq(pos);
                    itemClass = "ui-li";

                    // If we're creating the element, we update it regardless
                    if (create || !item.hasClass("ui-li")) {
                        itemTheme = item.jqmData("theme") || o.theme;
                        a = this._getChildrenByTagName(item[0], "a", "A");
                        var isDivider = (item.jqmData("role") === "list-divider");

                        if (a.length && !isDivider) {
                            icon = item.jqmData("icon");

                            item.buttonMarkup({
                                wrapperEls: "div",
                                shadow: false,
                                corners: false,
                                iconpos: "right",
                                icon: a.length > 1 || icon === false ? false : icon || listicon || o.icon,
                                theme: itemTheme
                            });

                            if ((icon !== false) && (a.length === 1)) {
                                item.addClass("ui-li-has-arrow");
                            }

                            a.first().removeClass("ui-link").addClass("ui-link-inherit");

                            if (a.length > 1) {
                                itemClass += " ui-li-has-alt";

                                last = a.last();
                                splittheme = listsplittheme || last.jqmData("theme") || o.splitTheme;
                                linkIcon = last.jqmData("icon");

                                last.appendTo(item)
                                    .attr("title", $.trim(last.getEncodedText()))
                                    .addClass("ui-li-link-alt")
                                    .empty()
                                    .buttonMarkup({
                                        shadow: false,
                                        corners: false,
                                        theme: itemTheme,
                                        icon: false,
                                        iconpos: "notext"
                                    })
                                    .find(".ui-btn-inner")
                                    .append(
                                        $(document.createElement("span")).buttonMarkup({
                                            shadow: true,
                                            corners: true,
                                            theme: splittheme,
                                            iconpos: "notext",
                                            // link icon overrides list item icon overrides ul element overrides options
                                            icon: linkIcon || icon || listspliticon || o.splitIcon
                                        })
                                );
                            }
                        } else if (isDivider) {

                            itemClass += " ui-li-divider ui-bar-" + (item.jqmData("theme") || dividertheme);
                            item.attr("role", "heading");

                            if (ol) {
                                //reset counter when a divider heading is encountered
                                if (start || start === 0) {
                                    if (!jsCount) {
                                        newStartCount = parseInt(start, 10) - 1;
                                        item.css("counter-reset", "listnumbering " + newStartCount);
                                    } else {
                                        counter = parseInt(start, 10);
                                    }
                                } else if (jsCount) {
                                    counter = 1;
                                }
                            }

                        } else {
                            itemClass += " ui-li-static ui-btn-up-" + itemTheme;
                        }
                    }

                    if (ol && jsCount && itemClass.indexOf("ui-li-divider") < 0) {
                        countParent = itemClass.indexOf("ui-li-static") > 0 ? item : item.find(".ui-link-inherit");

                        countParent.addClass("ui-li-jsnumbering")
                            .prepend("<span class='ui-li-dec'>" + (counter++) + ". </span>");
                    }

                    // Instead of setting item class directly on the list item and its
                    // btn-inner at this point in time, push the item into a dictionary
                    // that tells us what class to set on it so we can do this after this
                    // processing loop is finished.

                    if (!itemClassDict[itemClass]) {
                        itemClassDict[itemClass] = [];
                    }

                    itemClassDict[itemClass].push(item[0]);
                }

                // Set the appropriate listview item classes on each list item
                // and their btn-inner elements. The main reason we didn't do this
                // in the for-loop above is because we can eliminate per-item function overhead
                // by calling addClass() and children() once or twice afterwards. This
                // can give us a significant boost on platforms like WP7.5.

                for (itemClass in itemClassDict) {
                    $(itemClassDict[itemClass]).addClass(itemClass).children(".ui-btn-inner").addClass(itemClass);
                }

                $list.find("h1, h2, h3, h4, h5, h6").addClass("ui-li-heading")
                    .end()

                .find("p, dl").addClass("ui-li-desc")
                    .end()

                .find(".ui-li-aside").each(function() {
                    var $this = $(this);
                    $this.prependTo($this.parent()); //shift aside to front for css float
                })
                    .end()

                .find(".ui-li-count").each(function() {
                    $(this).closest("li").addClass("ui-li-has-count");
                }).addClass("ui-btn-up-" + ($list.jqmData("counttheme") || this.options.countTheme) + " ui-btn-corner-all");

                // The idea here is to look at the first image in the list item
                // itself, and any .ui-link-inherit element it may contain, so we
                // can place the appropriate classes on the image and list item.
                // Note that we used to use something like:
                //
                //    li.find(">img:eq(0), .ui-link-inherit>img:eq(0)").each( ... );
                //
                // But executing a find() like that on Windows Phone 7.5 took a
                // really long time. Walking things manually with the code below
                // allows the 400 listview item page to load in about 3 seconds as
                // opposed to 30 seconds.

                this._addThumbClasses(li);
                this._addThumbClasses($list.find(".ui-link-inherit"));

                this._addFirstLastClasses(li, this._getVisibles(li, create), create);
                // autodividers binds to this to redraw dividers after the listview refresh
                this._trigger("afterrefresh");
            },

            //create a string for ID/subpage url creation
            _idStringEscape: function(str) {
                return str.replace(/[^a-zA-Z0-9]/g, '-');
            },

            _createSubPages: function() {
                var parentList = this.element,
                    parentPage = parentList.closest(".ui-page"),
                    parentUrl = parentPage.jqmData("url"),
                    parentId = parentUrl || parentPage[0][$.expando],
                    parentListId = parentList.attr("id"),
                    o = this.options,
                    dns = "data-" + $.mobile.ns,
                    self = this,
                    persistentFooterID = parentPage.find(":jqmData(role='footer')").jqmData("id"),
                    hasSubPages;

                if (typeof listCountPerPage[parentId] === "undefined") {
                    listCountPerPage[parentId] = -1;
                }

                parentListId = parentListId || ++listCountPerPage[parentId];

                $(parentList.find("li>ul, li>ol").toArray().reverse()).each(function(i) {
                    var self = this,
                        list = $(this),
                        listId = list.attr("id") || parentListId + "-" + i,
                        parent = list.parent(),
                        nodeElsFull = $(list.prevAll().toArray().reverse()),
                        nodeEls = nodeElsFull.length ? nodeElsFull : $("<span>" + $.trim(parent.contents()[0].nodeValue) + "</span>"),
                        title = nodeEls.first().getEncodedText(), //url limits to first 30 chars of text
                        id = (parentUrl || "") + "&" + $.mobile.subPageUrlKey + "=" + listId,
                        theme = list.jqmData("theme") || o.theme,
                        countTheme = list.jqmData("counttheme") || parentList.jqmData("counttheme") || o.countTheme,
                        newPage, anchor;

                    //define hasSubPages for use in later removal
                    hasSubPages = true;

                    newPage = list.detach()
                        .wrap("<div " + dns + "role='page' " + dns + "url='" + id + "' " + dns + "theme='" + theme + "' " + dns + "count-theme='" + countTheme + "'><div " + dns + "role='content'></div></div>")
                        .parent()
                        .before("<div " + dns + "role='header' " + dns + "theme='" + o.headerTheme + "'><div class='ui-title'>" + title + "</div></div>")
                        .after(persistentFooterID ? $("<div " + dns + "role='footer' " + dns + "id='" + persistentFooterID + "'>") : "")
                        .parent()
                        .appendTo($.mobile.pageContainer);

                    newPage.page();

                    anchor = parent.find('a:first');

                    if (!anchor.length) {
                        anchor = $("<a/>").html(nodeEls || title).prependTo(parent.empty());
                    }

                    anchor.attr("href", "#" + id);

                }).listview();

                // on pagehide, remove any nested pages along with the parent page, as long as they aren't active
                // and aren't embedded
                if (hasSubPages &&
                    parentPage.is(":jqmData(external-page='true')") &&
                    parentPage.data("mobile-page").options.domCache === false) {

                    var newRemove = function(e, ui) {
                        var nextPage = ui.nextPage,
                            npURL,
                            prEvent = new $.Event("pageremove");

                        if (ui.nextPage) {
                            npURL = nextPage.jqmData("url");
                            if (npURL.indexOf(parentUrl + "&" + $.mobile.subPageUrlKey) !== 0) {
                                self.childPages().remove();
                                parentPage.trigger(prEvent);
                                if (!prEvent.isDefaultPrevented()) {
                                    parentPage.removeWithDependents();
                                }
                            }
                        }
                    };

                    // unbind the original page remove and replace with our specialized version
                    parentPage
                        .unbind("pagehide.remove")
                        .bind("pagehide.remove", newRemove);
                }
            },

            // TODO sort out a better way to track sub pages of the listview this is brittle
            childPages: function() {
                var parentUrl = this.parentPage.jqmData("url");

                return $(":jqmData(url^='" + parentUrl + "&" + $.mobile.subPageUrlKey + "')");
            }
        }, $.mobile.behaviors.addFirstLastClasses));

        //auto self-init widgets
        $.mobile.document.bind("pagecreate create", function(e) {
            $.mobile.listview.prototype.enhanceWithin(e.target);
        });

    })(jQuery);

    (function($) {
        var meta = $("meta[name=viewport]"),
            initialContent = meta.attr("content"),
            disabledZoom = initialContent + ",maximum-scale=1, user-scalable=no",
            enabledZoom = initialContent + ",maximum-scale=10, user-scalable=yes",
            disabledInitially = /(user-scalable[\s]*=[\s]*no)|(maximum-scale[\s]*=[\s]*1)[$,\s]/.test(initialContent);

        $.mobile.zoom = $.extend({}, {
            enabled: !disabledInitially,
            locked: false,
            disable: function(lock) {
                if (!disabledInitially && !$.mobile.zoom.locked) {
                    meta.attr("content", disabledZoom);
                    $.mobile.zoom.enabled = false;
                    $.mobile.zoom.locked = lock || false;
                }
            },
            enable: function(unlock) {
                if (!disabledInitially && (!$.mobile.zoom.locked || unlock === true)) {
                    meta.attr("content", enabledZoom);
                    $.mobile.zoom.enabled = true;
                    $.mobile.zoom.locked = false;
                }
            },
            restore: function() {
                if (!disabledInitially) {
                    meta.attr("content", initialContent);
                    $.mobile.zoom.enabled = true;
                }
            }
        });

    }(jQuery));

    (function($, undefined) {

        $.widget("mobile.textinput", $.mobile.widget, {
            options: {
                theme: null,
                mini: false,
                // This option defaults to true on iOS devices.
                preventFocusZoom: /iPhone|iPad|iPod/.test(navigator.platform) && navigator.userAgent.indexOf("AppleWebKit") > -1,
                initSelector: "input[type='text'], input[type='search'], :jqmData(type='search'), input[type='number'], :jqmData(type='number'), input[type='password'], input[type='email'], input[type='url'], input[type='tel'], textarea, input[type='time'], input[type='date'], input[type='month'], input[type='week'], input[type='datetime'], input[type='datetime-local'], input[type='color'], input:not([type]), input[type='file']",
                clearBtn: false,
                clearSearchButtonText: null, //deprecating for 1.3...
                clearBtnText: "clear text",
                disabled: false
            },

            _create: function() {

                var self = this,
                    input = this.element,
                    o = this.options,
                    theme = o.theme || $.mobile.getInheritedTheme(this.element, "c"),
                    themeclass = " ui-body-" + theme,
                    miniclass = o.mini ? " ui-mini" : "",
                    isSearch = input.is("[type='search'], :jqmData(type='search')"),
                    focusedEl,
                    clearbtn,
                    clearBtnText = o.clearSearchButtonText || o.clearBtnText,
                    clearBtnBlacklist = input.is("textarea, :jqmData(type='range')"),
                    inputNeedsClearBtn = !! o.clearBtn && !clearBtnBlacklist,
                    inputNeedsWrap = input.is("input") && !input.is(":jqmData(type='range')");

                function toggleClear() {
                    setTimeout(function() {
                        clearbtn.toggleClass("ui-input-clear-hidden", !input.val());
                    }, 0);
                }

                $("label[for='" + input.attr("id") + "']").addClass("ui-input-text");

                focusedEl = input.addClass("ui-input-text ui-body-" + theme);

                // XXX: Temporary workaround for issue 785 (Apple bug 8910589).
                //      Turn off autocorrect and autocomplete on non-iOS 5 devices
                //      since the popup they use can't be dismissed by the user. Note
                //      that we test for the presence of the feature by looking for
                //      the autocorrect property on the input element. We currently
                //      have no test for iOS 5 or newer so we're temporarily using
                //      the touchOverflow support flag for jQM 1.0. Yes, I feel dirty. - jblas
                if (typeof input[0].autocorrect !== "undefined" && !$.support.touchOverflow) {
                    // Set the attribute instead of the property just in case there
                    // is code that attempts to make modifications via HTML.
                    input[0].setAttribute("autocorrect", "off");
                    input[0].setAttribute("autocomplete", "off");
                }

                //"search" and "text" input widgets
                if (isSearch) {
                    focusedEl = input.wrap("<div class='ui-input-search ui-shadow-inset ui-btn-corner-all ui-btn-shadow ui-icon-searchfield" + themeclass + miniclass + "'></div>").parent();
                } else if (inputNeedsWrap) {
                    focusedEl = input.wrap("<div class='ui-input-text ui-shadow-inset ui-corner-all ui-btn-shadow" + themeclass + miniclass + "'></div>").parent();
                }

                if (inputNeedsClearBtn || isSearch) {
                    clearbtn = $("<a href='#' class='ui-input-clear' title='" + clearBtnText + "'>" + clearBtnText + "</a>")
                        .bind("click", function(event) {
                            input
                                .val("")
                                .focus()
                                .trigger("change");
                            clearbtn.addClass("ui-input-clear-hidden");
                            event.preventDefault();
                        })
                        .appendTo(focusedEl)
                        .buttonMarkup({
                            icon: "delete",
                            iconpos: "notext",
                            corners: true,
                            shadow: true,
                            mini: o.mini
                        });

                    if (!isSearch) {
                        focusedEl.addClass("ui-input-has-clear");
                    }

                    toggleClear();

                    input.bind("paste cut keyup input focus change blur", toggleClear);
                } else if (!inputNeedsWrap && !isSearch) {
                    input.addClass("ui-corner-all ui-shadow-inset" + themeclass + miniclass);
                }

                input.focus(function() {
                    // In many situations, iOS will zoom into the input upon tap, this prevents that from happening
                    if (o.preventFocusZoom) {
                        $.mobile.zoom.disable(true);
                    }
                    focusedEl.addClass($.mobile.focusClass);
                })
                    .blur(function() {
                        focusedEl.removeClass($.mobile.focusClass);
                        if (o.preventFocusZoom) {
                            $.mobile.zoom.enable(true);
                        }
                    });

                // Autogrow
                if (input.is("textarea")) {
                    var extraLineHeight = 15,
                        keyupTimeoutBuffer = 100,
                        keyupTimeout;

                    this._keyup = function() {
                        var scrollHeight = input[0].scrollHeight,
                            clientHeight = input[0].clientHeight;

                        if (clientHeight < scrollHeight) {
                            var paddingTop = parseFloat(input.css("padding-top")),
                                paddingBottom = parseFloat(input.css("padding-bottom")),
                                paddingHeight = paddingTop + paddingBottom;

                            input.height(scrollHeight - paddingHeight + extraLineHeight);
                        }
                    };

                    input.on("keyup change input paste", function() {
                        clearTimeout(keyupTimeout);
                        keyupTimeout = setTimeout(self._keyup, keyupTimeoutBuffer);
                    });

                    // binding to pagechange here ensures that for pages loaded via
                    // ajax the height is recalculated without user input
                    this._on(true, $.mobile.document, {
                        "pagechange": "_keyup"
                    });

                    // Issue 509: the browser is not providing scrollHeight properly until the styles load
                    if ($.trim(input.val())) {
                        // bind to the window load to make sure the height is calculated based on BOTH
                        // the DOM and CSS
                        this._on(true, $.mobile.window, {
                            "load": "_keyup"
                        });
                    }
                }
                if (input.attr("disabled")) {
                    this.disable();
                }
            },

            disable: function() {
                var $el,
                    isSearch = this.element.is("[type='search'], :jqmData(type='search')"),
                    inputNeedsWrap = this.element.is("input") && !this.element.is(":jqmData(type='range')"),
                    parentNeedsDisabled = this.element.attr("disabled", true) && (inputNeedsWrap || isSearch);

                if (parentNeedsDisabled) {
                    $el = this.element.parent();
                } else {
                    $el = this.element;
                }
                $el.addClass("ui-disabled");
                return this._setOption("disabled", true);
            },

            enable: function() {
                var $el,
                    isSearch = this.element.is("[type='search'], :jqmData(type='search')"),
                    inputNeedsWrap = this.element.is("input") && !this.element.is(":jqmData(type='range')"),
                    parentNeedsEnabled = this.element.attr("disabled", false) && (inputNeedsWrap || isSearch);

                if (parentNeedsEnabled) {
                    $el = this.element.parent();
                } else {
                    $el = this.element;
                }
                $el.removeClass("ui-disabled");
                return this._setOption("disabled", false);
            }
        });

        //auto self-init widgets
        $.mobile.document.bind("pagecreate create", function(e) {
            $.mobile.textinput.prototype.enhanceWithin(e.target, true);
        });

    })(jQuery);

    (function($, undefined) {

        $.mobile.listview.prototype.options.filter = false;
        $.mobile.listview.prototype.options.filterPlaceholder = "Filter items...";
        $.mobile.listview.prototype.options.filterTheme = "c";
        $.mobile.listview.prototype.options.filterReveal = false;
        // TODO rename callback/deprecate and default to the item itself as the first argument
        var defaultFilterCallback = function(text, searchValue, item) {
            return text.toString().toLowerCase().indexOf(searchValue) === -1;
        };

        $.mobile.listview.prototype.options.filterCallback = defaultFilterCallback;

        $.mobile.document.delegate("ul, ol", "listviewcreate", function() {
            var list = $(this),
                listview = list.data("mobile-listview");

            if (!listview || !listview.options.filter) {
                return;
            }

            if (listview.options.filterReveal) {
                list.children().addClass("ui-screen-hidden");
            }

            var wrapper = $("<form>", {
                "class": "ui-listview-filter ui-bar-" + listview.options.filterTheme,
                "role": "search"
            }).submit(function(e) {
                e.preventDefault();
                search.blur();
            }),
                onKeyUp = function(e) {
                    var $this = $(this),
                        val = this.value.toLowerCase(),
                        listItems = null,
                        li = list.children(),
                        lastval = $this.jqmData("lastval") + "",
                        childItems = false,
                        itemtext = "",
                        item,
                        // Check if a custom filter callback applies
                        isCustomFilterCallback = listview.options.filterCallback !== defaultFilterCallback;

                    if (lastval && lastval === val) {
                        // Execute the handler only once per value change
                        return;
                    }

                    listview._trigger("beforefilter", "beforefilter", {
                        input: this
                    });

                    // Change val as lastval for next execution
                    $this.jqmData("lastval", val);
                    if (isCustomFilterCallback || val.length < lastval.length || val.indexOf(lastval) !== 0) {

                        // Custom filter callback applies or removed chars or pasted something totally different, check all items
                        listItems = list.children();
                    } else {

                        // Only chars added, not removed, only use visible subset
                        listItems = list.children(":not(.ui-screen-hidden)");

                        if (!listItems.length && listview.options.filterReveal) {
                            listItems = list.children(".ui-screen-hidden");
                        }
                    }

                    if (val) {

                        // This handles hiding regular rows without the text we search for
                        // and any list dividers without regular rows shown under it

                        for (var i = listItems.length - 1; i >= 0; i--) {
                            item = $(listItems[i]);
                            itemtext = item.jqmData("filtertext") || item.text();

                            if (item.is("li:jqmData(role=list-divider)")) {

                                item.toggleClass("ui-filter-hidequeue", !childItems);

                                // New bucket!
                                childItems = false;

                            } else if (listview.options.filterCallback(itemtext, val, item)) {

                                //mark to be hidden
                                item.toggleClass("ui-filter-hidequeue", true);
                            } else {

                                // There's a shown item in the bucket
                                childItems = true;
                            }
                        }

                        // Show items, not marked to be hidden
                        listItems
                            .filter(":not(.ui-filter-hidequeue)")
                            .toggleClass("ui-screen-hidden", false);

                        // Hide items, marked to be hidden
                        listItems
                            .filter(".ui-filter-hidequeue")
                            .toggleClass("ui-screen-hidden", true)
                            .toggleClass("ui-filter-hidequeue", false);

                    } else {

                        //filtervalue is empty => show all
                        listItems.toggleClass("ui-screen-hidden", !! listview.options.filterReveal);
                    }
                    listview._addFirstLastClasses(li, listview._getVisibles(li, false), false);
                },
                search = $("<input>", {
                    placeholder: listview.options.filterPlaceholder
                })
                    .attr("data-" + $.mobile.ns + "type", "search")
                    .jqmData("lastval", "")
                    .bind("keyup change input", onKeyUp)
                    .appendTo(wrapper)
                    .textinput();

            if (listview.options.inset) {
                wrapper.addClass("ui-listview-filter-inset");
            }

            wrapper.bind("submit", function() {
                return false;
            })
                .insertBefore(list);
        });

    })(jQuery);

    (function($, undefined) {

        $.mobile.listview.prototype.options.autodividers = false;
        $.mobile.listview.prototype.options.autodividersSelector = function(elt) {
            // look for the text in the given element
            var text = $.trim(elt.text()) || null;

            if (!text) {
                return null;
            }

            // create the text for the divider (first uppercased letter)
            text = text.slice(0, 1).toUpperCase();

            return text;
        };

        $.mobile.document.delegate("ul,ol", "listviewcreate", function() {

            var list = $(this),
                listview = list.data("mobile-listview");

            if (!listview || !listview.options.autodividers) {
                return;
            }

            var replaceDividers = function() {
                list.find("li:jqmData(role='list-divider')").remove();

                var lis = list.find('li'),
                    lastDividerText = null,
                    li, dividerText;

                for (var i = 0; i < lis.length; i++) {
                    li = lis[i];
                    dividerText = listview.options.autodividersSelector($(li));

                    if (dividerText && lastDividerText !== dividerText) {
                        var divider = document.createElement('li');
                        divider.appendChild(document.createTextNode(dividerText));
                        divider.setAttribute('data-' + $.mobile.ns + 'role', 'list-divider');
                        li.parentNode.insertBefore(divider, li);
                    }

                    lastDividerText = dividerText;
                }
            };

            var afterListviewRefresh = function() {
                list.unbind('listviewafterrefresh', afterListviewRefresh);
                replaceDividers();
                listview.refresh();
                list.bind('listviewafterrefresh', afterListviewRefresh);
            };

            afterListviewRefresh();
        });

    })(jQuery);

    (function($, undefined) {

        $(document).bind("pagecreate create", function(e) {
            $(":jqmData(role='nojs')", e.target).addClass("ui-nojs");

        });

    })(jQuery);

    (function($, undefined) {

        $.mobile.behaviors.formReset = {
            _handleFormReset: function() {
                this._on(this.element.closest("form"), {
                    reset: function() {
                        this._delay("_reset");
                    }
                });
            }
        };

    })(jQuery);

    /*
     * "checkboxradio" plugin
     */

    (function($, undefined) {

        $.widget("mobile.checkboxradio", $.mobile.widget, $.extend({
            options: {
                theme: null,
                mini: false,
                initSelector: "input[type='checkbox'],input[type='radio']"
            },
            _create: function() {
                var self = this,
                    input = this.element,
                    o = this.options,
                    inheritAttr = function(input, dataAttr) {
                        return input.jqmData(dataAttr) || input.closest("form, fieldset").jqmData(dataAttr);
                    },
                    // NOTE: Windows Phone could not find the label through a selector
                    // filter works though.
                    parentLabel = $(input).closest("label"),
                    label = parentLabel.length ? parentLabel : $(input).closest("form, fieldset, :jqmData(role='page'), :jqmData(role='dialog')").find("label").filter("[for='" + input[0].id + "']").first(),
                    inputtype = input[0].type,
                    mini = inheritAttr(input, "mini") || o.mini,
                    checkedState = inputtype + "-on",
                    uncheckedState = inputtype + "-off",
                    iconpos = inheritAttr(input, "iconpos"),
                    checkedClass = "ui-" + checkedState,
                    uncheckedClass = "ui-" + uncheckedState;

                if (inputtype !== "checkbox" && inputtype !== "radio") {
                    return;
                }

                // Expose for other methods
                $.extend(this, {
                    label: label,
                    inputtype: inputtype,
                    checkedClass: checkedClass,
                    uncheckedClass: uncheckedClass,
                    checkedicon: checkedState,
                    uncheckedicon: uncheckedState
                });

                // If there's no selected theme check the data attr
                if (!o.theme) {
                    o.theme = $.mobile.getInheritedTheme(this.element, "c");
                }

                label.buttonMarkup({
                    theme: o.theme,
                    icon: uncheckedState,
                    shadow: false,
                    mini: mini,
                    iconpos: iconpos
                });

                // Wrap the input + label in a div
                var wrapper = document.createElement('div');
                wrapper.className = 'ui-' + inputtype;

                input.add(label).wrapAll(wrapper);

                label.bind({
                    vmouseover: function(event) {
                        if ($(this).parent().is(".ui-disabled")) {
                            event.stopPropagation();
                        }
                    },

                    vclick: function(event) {
                        if (input.is(":disabled")) {
                            event.preventDefault();
                            return;
                        }

                        self._cacheVals();

                        input.prop("checked", inputtype === "radio" && true || !input.prop("checked"));

                        // trigger click handler's bound directly to the input as a substitute for
                        // how label clicks behave normally in the browsers
                        // TODO: it would be nice to let the browser's handle the clicks and pass them
                        //       through to the associate input. we can swallow that click at the parent
                        //       wrapper element level
                        input.triggerHandler('click');

                        // Input set for common radio buttons will contain all the radio
                        // buttons, but will not for checkboxes. clearing the checked status
                        // of other radios ensures the active button state is applied properly
                        self._getInputSet().not(input).prop("checked", false);

                        self._updateAll();
                        return false;
                    }
                });

                input
                    .bind({
                        vmousedown: function() {
                            self._cacheVals();
                        },

                        vclick: function() {
                            var $this = $(this);

                            // Adds checked attribute to checked input when keyboard is used
                            if ($this.is(":checked")) {

                                $this.prop("checked", true);
                                self._getInputSet().not($this).prop("checked", false);
                            } else {

                                $this.prop("checked", false);
                            }

                            self._updateAll();
                        },

                        focus: function() {
                            label.addClass($.mobile.focusClass);
                        },

                        blur: function() {
                            label.removeClass($.mobile.focusClass);
                        }
                    });

                this._handleFormReset();
                this.refresh();
            },

            _cacheVals: function() {
                this._getInputSet().each(function() {
                    $(this).jqmData("cacheVal", this.checked);
                });
            },

            //returns either a set of radios with the same name attribute, or a single checkbox
            _getInputSet: function() {
                if (this.inputtype === "checkbox") {
                    return this.element;
                }

                return this.element.closest("form, :jqmData(role='page'), :jqmData(role='dialog')")
                    .find("input[name='" + this.element[0].name + "'][type='" + this.inputtype + "']");
            },

            _updateAll: function() {
                var self = this;

                this._getInputSet().each(function() {
                    var $this = $(this);

                    if (this.checked || self.inputtype === "checkbox") {
                        $this.trigger("change");
                    }
                })
                    .checkboxradio("refresh");
            },

            _reset: function() {
                this.refresh();
            },

            refresh: function() {
                var input = this.element[0],
                    active = " " + $.mobile.activeBtnClass,
                    checkedClass = this.checkedClass + (this.element.parents(".ui-controlgroup-horizontal").length ? active : ""),
                    label = this.label;

                if (input.checked) {
                    label.removeClass(this.uncheckedClass + active).addClass(checkedClass).buttonMarkup({
                        icon: this.checkedicon
                    });
                } else {
                    label.removeClass(checkedClass).addClass(this.uncheckedClass).buttonMarkup({
                        icon: this.uncheckedicon
                    });
                }

                if (input.disabled) {
                    this.disable();
                } else {
                    this.enable();
                }
            },

            disable: function() {
                this.element.prop("disabled", true).parent().addClass("ui-disabled");
            },

            enable: function() {
                this.element.prop("disabled", false).parent().removeClass("ui-disabled");
            }
        }, $.mobile.behaviors.formReset));

        //auto self-init widgets
        $.mobile.document.bind("pagecreate create", function(e) {
            $.mobile.checkboxradio.prototype.enhanceWithin(e.target, true);
        });

    })(jQuery);

    (function($, undefined) {

        $.widget("mobile.button", $.mobile.widget, {
            options: {
                theme: null,
                icon: null,
                iconpos: null,
                corners: true,
                shadow: true,
                iconshadow: true,
                inline: null,
                mini: null,
                initSelector: "button, [type='button'], [type='submit'], [type='reset']"
            },
            _create: function() {
                var $el = this.element,
                    $button,
                    // create a copy of this.options we can pass to buttonMarkup
                    o = (function(tdo) {
                        var key, ret = {};

                        for (key in tdo) {
                            if (tdo[key] !== null && key !== "initSelector") {
                                ret[key] = tdo[key];
                            }
                        }

                        return ret;
                    })(this.options),
                    classes = "",
                    $buttonPlaceholder;

                // if this is a link, check if it's been enhanced and, if not, use the right function
                if ($el[0].tagName === "A") {
                    if (!$el.hasClass("ui-btn")) {
                        $el.buttonMarkup();
                    }
                    return;
                }

                // get the inherited theme
                // TODO centralize for all widgets
                if (!this.options.theme) {
                    this.options.theme = $.mobile.getInheritedTheme(this.element, "c");
                }

                // TODO: Post 1.1--once we have time to test thoroughly--any classes manually applied to the original element should be carried over to the enhanced element, with an `-enhanced` suffix. See https://github.com/jquery/jquery-mobile/issues/3577
                /* if ( $el[0].className.length ) {
			classes = $el[0].className;
		} */
                if ( !! ~$el[0].className.indexOf("ui-btn-left")) {
                    classes = "ui-btn-left";
                }

                if ( !! ~$el[0].className.indexOf("ui-btn-right")) {
                    classes = "ui-btn-right";
                }

                if ($el.attr("type") === "submit" || $el.attr("type") === "reset") {
                    if (classes) {
                        classes += " ui-submit";
                    } else {
                        classes = "ui-submit";
                    }
                }
                $("label[for='" + $el.attr("id") + "']").addClass("ui-submit");

                // Add ARIA role
                this.button = $("<div></div>")[$el.html() ? "html" : "text"]($el.html() || $el.val())
                    .insertBefore($el)
                    .buttonMarkup(o)
                    .addClass(classes)
                    .append($el.addClass("ui-btn-hidden"));

                $button = this.button;

                $el.bind({
                    focus: function() {
                        $button.addClass($.mobile.focusClass);
                    },

                    blur: function() {
                        $button.removeClass($.mobile.focusClass);
                    }
                });

                this.refresh();
            },

            _setOption: function(key, value) {
                var op = {};

                op[key] = value;
                if (key !== "initSelector") {
                    this.button.buttonMarkup(op);
                    // Record the option change in the options and in the DOM data-* attributes
                    this.element.attr("data-" + ($.mobile.ns || "") + (key.replace(/([A-Z])/, "-$1").toLowerCase()), value);
                }
                this._super("_setOption", key, value);
            },

            enable: function() {
                this.element.attr("disabled", false);
                this.button.removeClass("ui-disabled").attr("aria-disabled", false);
                return this._setOption("disabled", false);
            },

            disable: function() {
                this.element.attr("disabled", true);
                this.button.addClass("ui-disabled").attr("aria-disabled", true);
                return this._setOption("disabled", true);
            },

            refresh: function() {
                var $el = this.element;

                if ($el.prop("disabled")) {
                    this.disable();
                } else {
                    this.enable();
                }

                // Grab the button's text element from its implementation-independent data item
                $(this.button.data('buttonElements').text)[$el.html() ? "html" : "text"]($el.html() || $el.val());
            }
        });

        //auto self-init widgets
        $.mobile.document.bind("pagecreate create", function(e) {
            $.mobile.button.prototype.enhanceWithin(e.target, true);
        });

    })(jQuery);

    (function($, undefined) {

        $.widget("mobile.slider", $.mobile.widget, $.extend({
            widgetEventPrefix: "slide",

            options: {
                theme: null,
                trackTheme: null,
                disabled: false,
                initSelector: "input[type='range'], :jqmData(type='range'), :jqmData(role='slider')",
                mini: false,
                highlight: false
            },

            _create: function() {

                // TODO: Each of these should have comments explain what they're for
                var self = this,
                    control = this.element,
                    parentTheme = $.mobile.getInheritedTheme(control, "c"),
                    theme = this.options.theme || parentTheme,
                    trackTheme = this.options.trackTheme || parentTheme,
                    cType = control[0].nodeName.toLowerCase(),
                    isSelect = this.isToggleSwitch = cType === "select",
                    isRangeslider = control.parent().is(":jqmData(role='rangeslider')"),
                    selectClass = (this.isToggleSwitch) ? "ui-slider-switch" : "",
                    controlID = control.attr("id"),
                    $label = $("[for='" + controlID + "']"),
                    labelID = $label.attr("id") || controlID + "-label",
                    label = $label.attr("id", labelID),
                    min = !this.isToggleSwitch ? parseFloat(control.attr("min")) : 0,
                    max = !this.isToggleSwitch ? parseFloat(control.attr("max")) : control.find("option").length - 1,
                    step = window.parseFloat(control.attr("step") || 1),
                    miniClass = (this.options.mini || control.jqmData("mini")) ? " ui-mini" : "",
                    domHandle = document.createElement("a"),
                    handle = $(domHandle),
                    domSlider = document.createElement("div"),
                    slider = $(domSlider),
                    valuebg = this.options.highlight && !this.isToggleSwitch ? (function() {
                        var bg = document.createElement("div");
                        bg.className = "ui-slider-bg " + $.mobile.activeBtnClass + " ui-btn-corner-all";
                        return $(bg).prependTo(slider);
                    })() : false,
                    options,
                    wrapper;

                domHandle.setAttribute("href", "#");
                domSlider.setAttribute("role", "application");
                domSlider.className = [this.isToggleSwitch ? "ui-slider " : "ui-slider-track ", selectClass, " ui-btn-down-", trackTheme, " ui-btn-corner-all", miniClass].join("");
                domHandle.className = "ui-slider-handle";
                domSlider.appendChild(domHandle);

                handle.buttonMarkup({
                    corners: true,
                    theme: theme,
                    shadow: true
                })
                    .attr({
                        "role": "slider",
                        "aria-valuemin": min,
                        "aria-valuemax": max,
                        "aria-valuenow": this._value(),
                        "aria-valuetext": this._value(),
                        "title": this._value(),
                        "aria-labelledby": labelID
                    });

                $.extend(this, {
                    slider: slider,
                    handle: handle,
                    type: cType,
                    step: step,
                    max: max,
                    min: min,
                    valuebg: valuebg,
                    isRangeslider: isRangeslider,
                    dragging: false,
                    beforeStart: null,
                    userModified: false,
                    mouseMoved: false
                });

                if (this.isToggleSwitch) {
                    wrapper = document.createElement("div");
                    wrapper.className = "ui-slider-inneroffset";

                    for (var j = 0, length = domSlider.childNodes.length; j < length; j++) {
                        wrapper.appendChild(domSlider.childNodes[j]);
                    }

                    domSlider.appendChild(wrapper);

                    // slider.wrapInner( "<div class='ui-slider-inneroffset'></div>" );

                    // make the handle move with a smooth transition
                    handle.addClass("ui-slider-handle-snapping");

                    options = control.find("option");

                    for (var i = 0, optionsCount = options.length; i < optionsCount; i++) {
                        var side = !i ? "b" : "a",
                            sliderTheme = !i ? " ui-btn-down-" + trackTheme : (" " + $.mobile.activeBtnClass),
                            sliderLabel = document.createElement("div"),
                            sliderImg = document.createElement("span");

                        sliderImg.className = ["ui-slider-label ui-slider-label-", side, sliderTheme, " ui-btn-corner-all"].join("");
                        sliderImg.setAttribute("role", "img");
                        sliderImg.appendChild(document.createTextNode(options[i].innerHTML));
                        $(sliderImg).prependTo(slider);
                    }

                    self._labels = $(".ui-slider-label", slider);

                }

                label.addClass("ui-slider");

                // monitor the input for updated values
                control.addClass(this.isToggleSwitch ? "ui-slider-switch" : "ui-slider-input");

                this._on(control, {
                    "change": "_controlChange",
                    "keyup": "_controlKeyup",
                    "blur": "_controlBlur",
                    "vmouseup": "_controlVMouseUp"
                });

                slider.bind("vmousedown", $.proxy(this._sliderVMouseDown, this))
                    .bind("vclick", false);

                // We have to instantiate a new function object for the unbind to work properly
                // since the method itself is defined in the prototype (causing it to unbind everything)
                this._on(document, {
                    "vmousemove": "_preventDocumentDrag"
                });
                this._on(slider.add(document), {
                    "vmouseup": "_sliderVMouseUp"
                });

                slider.insertAfter(control);

                // wrap in a div for styling purposes
                if (!this.isToggleSwitch && !isRangeslider) {
                    wrapper = this.options.mini ? "<div class='ui-slider ui-mini'>" : "<div class='ui-slider'>";

                    control.add(slider).wrapAll(wrapper);
                }

                // Only add focus class to toggle switch, sliders get it automatically from ui-btn
                if (this.isToggleSwitch) {
                    this.handle.bind({
                        focus: function() {
                            slider.addClass($.mobile.focusClass);
                        },

                        blur: function() {
                            slider.removeClass($.mobile.focusClass);
                        }
                    });
                }

                // bind the handle event callbacks and set the context to the widget instance
                this._on(this.handle, {
                    "vmousedown": "_handleVMouseDown",
                    "keydown": "_handleKeydown",
                    "keyup": "_handleKeyup"
                });

                this.handle.bind("vclick", false);

                this._handleFormReset();

                this.refresh(undefined, undefined, true);
            },

            _controlChange: function(event) {
                // if the user dragged the handle, the "change" event was triggered from inside refresh(); don't call refresh() again
                if (this._trigger("controlchange", event) === false) {
                    return false;
                }
                if (!this.mouseMoved) {
                    this.refresh(this._value(), true);
                }
            },

            _controlKeyup: function(event) { // necessary?
                this.refresh(this._value(), true, true);
            },

            _controlBlur: function(event) {
                this.refresh(this._value(), true);
            },

            // it appears the clicking the up and down buttons in chrome on
            // range/number inputs doesn't trigger a change until the field is
            // blurred. Here we check thif the value has changed and refresh
            _controlVMouseUp: function(event) {
                this._checkedRefresh();
            },

            // NOTE force focus on handle
            _handleVMouseDown: function(event) {
                this.handle.focus();
            },

            _handleKeydown: function(event) {
                var index = this._value();
                if (this.options.disabled) {
                    return;
                }

                // In all cases prevent the default and mark the handle as active
                switch (event.keyCode) {
                    case $.mobile.keyCode.HOME:
                    case $.mobile.keyCode.END:
                    case $.mobile.keyCode.PAGE_UP:
                    case $.mobile.keyCode.PAGE_DOWN:
                    case $.mobile.keyCode.UP:
                    case $.mobile.keyCode.RIGHT:
                    case $.mobile.keyCode.DOWN:
                    case $.mobile.keyCode.LEFT:
                        event.preventDefault();

                        if (!this._keySliding) {
                            this._keySliding = true;
                            this.handle.addClass("ui-state-active");
                        }

                        break;
                }

                // move the slider according to the keypress
                switch (event.keyCode) {
                    case $.mobile.keyCode.HOME:
                        this.refresh(this.min);
                        break;
                    case $.mobile.keyCode.END:
                        this.refresh(this.max);
                        break;
                    case $.mobile.keyCode.PAGE_UP:
                    case $.mobile.keyCode.UP:
                    case $.mobile.keyCode.RIGHT:
                        this.refresh(index + this.step);
                        break;
                    case $.mobile.keyCode.PAGE_DOWN:
                    case $.mobile.keyCode.DOWN:
                    case $.mobile.keyCode.LEFT:
                        this.refresh(index - this.step);
                        break;
                }
            }, // remove active mark

            _handleKeyup: function(event) {
                if (this._keySliding) {
                    this._keySliding = false;
                    this.handle.removeClass("ui-state-active");
                }
            },

            _sliderVMouseDown: function(event) {
                // NOTE: we don't do this in refresh because we still want to
                //       support programmatic alteration of disabled inputs
                if (this.options.disabled || !(event.which === 1 || event.which === 0 || event.which === undefined)) {
                    return false;
                }
                if (this._trigger("beforestart", event) === false) {
                    return false;
                }
                this.dragging = true;
                this.userModified = false;
                this.mouseMoved = false;

                if (this.isToggleSwitch) {
                    this.beforeStart = this.element[0].selectedIndex;
                }


                this.refresh(event);
                this._trigger("start");
                return false;
            },

            _sliderVMouseUp: function() {
                if (this.dragging) {
                    this.dragging = false;

                    if (this.isToggleSwitch) {
                        // make the handle move with a smooth transition
                        this.handle.addClass("ui-slider-handle-snapping");

                        if (this.mouseMoved) {
                            // this is a drag, change the value only if user dragged enough
                            if (this.userModified) {
                                this.refresh(this.beforeStart === 0 ? 1 : 0);
                            } else {
                                this.refresh(this.beforeStart);
                            }
                        } else {
                            // this is just a click, change the value
                            this.refresh(this.beforeStart === 0 ? 1 : 0);
                        }
                    }

                    this.mouseMoved = false;
                    this._trigger("stop");
                    return false;
                }
            },

            _preventDocumentDrag: function(event) {
                // NOTE: we don't do this in refresh because we still want to
                //       support programmatic alteration of disabled inputs
                if (this._trigger("drag", event) === false) {
                    return false;
                }
                if (this.dragging && !this.options.disabled) {

                    // this.mouseMoved must be updated before refresh() because it will be used in the control "change" event
                    this.mouseMoved = true;

                    if (this.isToggleSwitch) {
                        // make the handle move in sync with the mouse
                        this.handle.removeClass("ui-slider-handle-snapping");
                    }

                    this.refresh(event);

                    // only after refresh() you can calculate this.userModified
                    this.userModified = this.beforeStart !== this.element[0].selectedIndex;
                    return false;
                }
            },

            _checkedRefresh: function() {
                if (this.value !== this._value()) {
                    this.refresh(this._value());
                }
            },

            _value: function() {
                return this.isToggleSwitch ? this.element[0].selectedIndex : parseFloat(this.element.val());
            },


            _reset: function() {
                this.refresh(undefined, false, true);
            },

            refresh: function(val, isfromControl, preventInputUpdate) {
                // NOTE: we don't return here because we want to support programmatic
                //       alteration of the input value, which should still update the slider

                var self = this,
                    parentTheme = $.mobile.getInheritedTheme(this.element, "c"),
                    theme = this.options.theme || parentTheme,
                    trackTheme = this.options.trackTheme || parentTheme,
                    left, width, data, tol;

                self.slider[0].className = [this.isToggleSwitch ? "ui-slider ui-slider-switch" : "ui-slider-track", " ui-btn-down-" + trackTheme, ' ui-btn-corner-all', (this.options.mini) ? " ui-mini" : ""].join("");
                if (this.options.disabled || this.element.attr("disabled")) {
                    this.disable();
                }

                // set the stored value for comparison later
                this.value = this._value();
                if (this.options.highlight && !this.isToggleSwitch && this.slider.find(".ui-slider-bg").length === 0) {
                    this.valuebg = (function() {
                        var bg = document.createElement("div");
                        bg.className = "ui-slider-bg " + $.mobile.activeBtnClass + " ui-btn-corner-all";
                        return $(bg).prependTo(self.slider);
                    })();
                }
                this.handle.buttonMarkup({
                    corners: true,
                    theme: theme,
                    shadow: true
                });

                var pxStep, percent,
                    control = this.element,
                    isInput = !this.isToggleSwitch,
                    optionElements = isInput ? [] : control.find("option"),
                    min = isInput ? parseFloat(control.attr("min")) : 0,
                    max = isInput ? parseFloat(control.attr("max")) : optionElements.length - 1,
                    step = (isInput && parseFloat(control.attr("step")) > 0) ? parseFloat(control.attr("step")) : 1;

                if (typeof val === "object") {
                    data = val;
                    // a slight tolerance helped get to the ends of the slider
                    tol = 8;

                    left = this.slider.offset().left;
                    width = this.slider.width();
                    pxStep = width / ((max - min) / step);
                    if (!this.dragging ||
                        data.pageX < left - tol ||
                        data.pageX > left + width + tol) {
                        return;
                    }
                    if (pxStep > 1) {
                        percent = ((data.pageX - left) / width) * 100;
                    } else {
                        percent = Math.round(((data.pageX - left) / width) * 100);
                    }
                } else {
                    if (val == null) {
                        val = isInput ? parseFloat(control.val() || 0) : control[0].selectedIndex;
                    }
                    percent = (parseFloat(val) - min) / (max - min) * 100;
                }

                if (isNaN(percent)) {
                    return;
                }

                var newval = (percent / 100) * (max - min) + min;

                //from jQuery UI slider, the following source will round to the nearest step
                var valModStep = (newval - min) % step;
                var alignValue = newval - valModStep;

                if (Math.abs(valModStep) * 2 >= step) {
                    alignValue += (valModStep > 0) ? step : (-step);
                }

                var percentPerStep = 100 / ((max - min) / step);
                // Since JavaScript has problems with large floats, round
                // the final value to 5 digits after the decimal point (see jQueryUI: #4124)
                newval = parseFloat(alignValue.toFixed(5));

                if (typeof pxStep === "undefined") {
                    pxStep = width / ((max - min) / step);
                }
                if (pxStep > 1 && isInput) {
                    percent = (newval - min) * percentPerStep * (1 / step);
                }
                if (percent < 0) {
                    percent = 0;
                }

                if (percent > 100) {
                    percent = 100;
                }

                if (newval < min) {
                    newval = min;
                }

                if (newval > max) {
                    newval = max;
                }

                this.handle.css("left", percent + "%");

                this.handle[0].setAttribute("aria-valuenow", isInput ? newval : optionElements.eq(newval).attr("value"));

                this.handle[0].setAttribute("aria-valuetext", isInput ? newval : optionElements.eq(newval).getEncodedText());

                this.handle[0].setAttribute("title", isInput ? newval : optionElements.eq(newval).getEncodedText());

                if (this.valuebg) {
                    this.valuebg.css("width", percent + "%");
                }

                // drag the label widths
                if (this._labels) {
                    var handlePercent = this.handle.width() / this.slider.width() * 100,
                        aPercent = percent && handlePercent + (100 - handlePercent) * percent / 100,
                        bPercent = percent === 100 ? 0 : Math.min(handlePercent + 100 - aPercent, 100);

                    this._labels.each(function() {
                        var ab = $(this).is(".ui-slider-label-a");
                        $(this).width((ab ? aPercent : bPercent) + "%");
                    });
                }

                if (!preventInputUpdate) {
                    var valueChanged = false;

                    // update control"s value
                    if (isInput) {
                        valueChanged = control.val() !== newval;
                        control.val(newval);
                    } else {
                        valueChanged = control[0].selectedIndex !== newval;
                        control[0].selectedIndex = newval;
                    }
                    if (this._trigger("beforechange", val) === false) {
                        return false;
                    }
                    if (!isfromControl && valueChanged) {
                        control.trigger("change");
                    }
                }
            },

            enable: function() {
                this.element.attr("disabled", false);
                this.slider.removeClass("ui-disabled").attr("aria-disabled", false);
                return this._setOption("disabled", false);
            },

            disable: function() {
                this.element.attr("disabled", true);
                this.slider.addClass("ui-disabled").attr("aria-disabled", true);
                return this._setOption("disabled", true);
            }

        }, $.mobile.behaviors.formReset));

        //auto self-init widgets
        $.mobile.document.bind("pagecreate create", function(e) {
            $.mobile.slider.prototype.enhanceWithin(e.target, true);
        });

    })(jQuery);

    (function($, undefined) {
        $.widget("mobile.rangeslider", $.mobile.widget, {

            options: {
                theme: null,
                trackTheme: null,
                disabled: false,
                initSelector: ":jqmData(role='rangeslider')",
                mini: false,
                highlight: true
            },

            _create: function() {
                var secondLabel,
                    $el = this.element,
                    elClass = this.options.mini ? "ui-rangeslider ui-mini" : "ui-rangeslider",
                    _inputFirst = $el.find("input").first(),
                    _inputLast = $el.find("input").last(),
                    label = $el.find("label").first(),
                    _sliderFirst = $.data(_inputFirst.get(0), "mobileSlider").slider,
                    _sliderLast = $.data(_inputLast.get(0), "mobileSlider").slider,
                    firstHandle = $.data(_inputFirst.get(0), "mobileSlider").handle,
                    _sliders = $("<div class=\"ui-rangeslider-sliders\" />").appendTo($el);

                if ($el.find("label").length > 1) {
                    secondLabel = $el.find("label").last().hide();
                }

                _inputFirst.addClass("ui-rangeslider-first");
                _inputLast.addClass("ui-rangeslider-last");
                $el.addClass(elClass);

                _sliderFirst.appendTo(_sliders);
                _sliderLast.appendTo(_sliders);
                label.prependTo($el);
                firstHandle.prependTo(_sliderLast);

                $.extend(this, {
                    _inputFirst: _inputFirst,
                    _inputLast: _inputLast,
                    _sliderFirst: _sliderFirst,
                    _sliderLast: _sliderLast,
                    _targetVal: null,
                    _sliderTarget: false,
                    _sliders: _sliders,
                    _proxy: false
                });

                this.refresh();
                this._on(this.element.find("input.ui-slider-input"), {
                    "slidebeforestart": "_slidebeforestart",
                    "slidestop": "_slidestop",
                    "slidedrag": "_slidedrag",
                    "slidebeforechange": "_change",
                    "blur": "_change",
                    "keyup": "_change"
                });
                this._on({
                    "mousedown": "_change"
                });
                this._on(this.element.closest("form"), {
                    "reset": "_handleReset"
                });
                this._on(firstHandle, {
                    "vmousedown": "_dragFirstHandle"
                });
            },
            _handleReset: function() {
                var self = this;
                //we must wait for the stack to unwind before updateing other wise sliders will not have updated yet
                setTimeout(function() {
                    self._updateHighlight();
                }, 0);
            },

            _dragFirstHandle: function(event) {
                //if the first handle is dragged send the event to the first slider
                $.data(this._inputFirst.get(0), "mobileSlider").dragging = true;
                $.data(this._inputFirst.get(0), "mobileSlider").refresh(event);
                return false;
            },

            _slidedrag: function(event) {
                var first = $(event.target).is(this._inputFirst),
                    otherSlider = (first) ? this._inputLast : this._inputFirst;

                this._sliderTarget = false;
                //if the drag was initiated on an extreme and the other handle is focused send the events to
                //the closest handle
                if ((this._proxy === "first" && first) || (this._proxy === "last" && !first)) {
                    $.data(otherSlider.get(0), "mobileSlider").dragging = true;
                    $.data(otherSlider.get(0), "mobileSlider").refresh(event);
                    return false;
                }
            },

            _slidestop: function(event) {
                var first = $(event.target).is(this._inputFirst);

                this._proxy = false;
                //this stops dragging of the handle and brings the active track to the front 
                //this makes clicks on the track go the the last handle used
                this.element.find("input").trigger("vmouseup");
                this._sliderFirst.css("z-index", first ? 1 : "");
            },

            _slidebeforestart: function(event) {
                this._sliderTarget = false;
                //if the track is the target remember this and the original value
                if ($(event.originalEvent.target).hasClass("ui-slider-track")) {
                    this._sliderTarget = true;
                    this._targetVal = $(event.target).val();
                }
            },

            _setOption: function(options) {
                this._superApply(options);
                this.refresh();
            },

            refresh: function() {
                var $el = this.element,
                    o = this.options;

                $el.find("input").slider({
                    theme: o.theme,
                    trackTheme: o.trackTheme,
                    disabled: o.disabled,
                    mini: o.mini,
                    highlight: o.highlight
                }).slider("refresh");
                this._updateHighlight();
            },

            _change: function(event) {
                if (event.type === "keyup") {
                    this._updateHighlight();
                    return false;
                }

                var self = this,
                    min = parseFloat(this._inputFirst.val(), 10),
                    max = parseFloat(this._inputLast.val(), 10),
                    first = $(event.target).hasClass("ui-rangeslider-first"),
                    thisSlider = first ? this._inputFirst : this._inputLast,
                    otherSlider = first ? this._inputLast : this._inputFirst;


                if ((this._inputFirst.val() > this._inputLast.val() && event.type === "mousedown" && !$(event.target).hasClass("ui-slider-handle"))) {
                    thisSlider.blur();
                } else if (event.type === "mousedown") {
                    return;
                }
                if (min > max && !this._sliderTarget) {
                    //this prevents min from being greater then max
                    thisSlider.val(first ? max : min).slider("refresh");
                    this._trigger("normalize");
                } else if (min > max) {
                    //this makes it so clicks on the target on either extreme go to the closest handle
                    thisSlider.val(this._targetVal).slider("refresh");

                    //You must wait for the stack to unwind so first slider is updated before updating second
                    setTimeout(function() {
                        otherSlider.val(first ? min : max).slider("refresh");
                        $.data(otherSlider.get(0), "mobileSlider").handle.focus();
                        self._sliderFirst.css("z-index", first ? "" : 1);
                        self._trigger("normalize");
                    }, 0);
                    this._proxy = (first) ? "first" : "last";
                }
                //fixes issue where when both _sliders are at min they cannot be adjusted
                if (min === max) {
                    $.data(thisSlider.get(0), "mobileSlider").handle.css("z-index", 1);
                    $.data(otherSlider.get(0), "mobileSlider").handle.css("z-index", 0);
                } else {
                    $.data(otherSlider.get(0), "mobileSlider").handle.css("z-index", "");
                    $.data(thisSlider.get(0), "mobileSlider").handle.css("z-index", "");
                }

                this._updateHighlight();

                if (min >= max) {
                    return false;
                }
            },

            _updateHighlight: function() {
                var min = parseInt($.data(this._inputFirst.get(0), "mobileSlider").handle.get(0).style.left, 10),
                    max = parseInt($.data(this._inputLast.get(0), "mobileSlider").handle.get(0).style.left, 10),
                    width = (max - min);

                this.element.find(".ui-slider-bg").css({
                    "margin-left": min + "%",
                    "width": width + "%"
                });
            },

            _destroy: function() {
                this.element.removeClass("ui-rangeslider ui-mini").find("label").show();
                this._inputFirst.after(this._sliderFirst);
                this._inputLast.after(this._sliderLast);
                this._sliders.remove();
                this.element.find("input").removeClass("ui-rangeslider-first ui-rangeslider-last").slider("destroy");
            }

        });

        $.widget("mobile.rangeslider", $.mobile.rangeslider, $.mobile.behaviors.formReset);

        //auto self-init widgets
        $(document).bind("pagecreate create", function(e) {
            $.mobile.rangeslider.prototype.enhanceWithin(e.target, true);
        });

    })(jQuery);

    (function($, undefined) {

        $.widget("mobile.selectmenu", $.mobile.widget, $.extend({
            options: {
                theme: null,
                disabled: false,
                icon: "arrow-d",
                iconpos: "right",
                inline: false,
                corners: true,
                shadow: true,
                iconshadow: true,
                overlayTheme: "a",
                dividerTheme: "b",
                hidePlaceholderMenuItems: true,
                closeText: "Close",
                nativeMenu: true,
                // This option defaults to true on iOS devices.
                preventFocusZoom: /iPhone|iPad|iPod/.test(navigator.platform) && navigator.userAgent.indexOf("AppleWebKit") > -1,
                initSelector: "select:not( :jqmData(role='slider') )",
                mini: false
            },

            _button: function() {
                return $("<div/>");
            },

            _setDisabled: function(value) {
                this.element.attr("disabled", value);
                this.button.attr("aria-disabled", value);
                return this._setOption("disabled", value);
            },

            _focusButton: function() {
                var self = this;

                setTimeout(function() {
                    self.button.focus();
                }, 40);
            },

            _selectOptions: function() {
                return this.select.find("option");
            },

            // setup items that are generally necessary for select menu extension
            _preExtension: function() {
                var classes = "";
                // TODO: Post 1.1--once we have time to test thoroughly--any classes manually applied to the original element should be carried over to the enhanced element, with an `-enhanced` suffix. See https://github.com/jquery/jquery-mobile/issues/3577
                /* if ( $el[0].className.length ) {
			classes = $el[0].className;
		} */
                if ( !! ~this.element[0].className.indexOf("ui-btn-left")) {
                    classes = " ui-btn-left";
                }

                if ( !! ~this.element[0].className.indexOf("ui-btn-right")) {
                    classes = " ui-btn-right";
                }

                this.select = this.element.removeClass("ui-btn-left ui-btn-right").wrap("<div class='ui-select" + classes + "'>");
                this.selectID = this.select.attr("id");
                this.label = $("label[for='" + this.selectID + "']").addClass("ui-select");
                this.isMultiple = this.select[0].multiple;
                if (!this.options.theme) {
                    this.options.theme = $.mobile.getInheritedTheme(this.select, "c");
                }
            },

            _destroy: function() {
                var wrapper = this.element.parents(".ui-select");
                if (wrapper.length > 0) {
                    if (wrapper.is(".ui-btn-left, .ui-btn-right")) {
                        this.element.addClass(wrapper.is(".ui-btn-left") ? "ui-btn-left" : "ui-btn-right");
                    }
                    this.element.insertAfter(wrapper);
                    wrapper.remove();
                }
            },

            _create: function() {
                this._preExtension();

                // Allows for extension of the native select for custom selects and other plugins
                // see select.custom for example extension
                // TODO explore plugin registration
                this._trigger("beforeCreate");

                this.button = this._button();

                var self = this,

                    options = this.options,

                    inline = options.inline || this.select.jqmData("inline"),
                    mini = options.mini || this.select.jqmData("mini"),
                    iconpos = options.icon ? (options.iconpos || this.select.jqmData("iconpos")) : false,

                    // IE throws an exception at options.item() function when
                    // there is no selected item
                    // select first in this case
                    selectedIndex = this.select[0].selectedIndex === -1 ? 0 : this.select[0].selectedIndex,

                    // TODO values buttonId and menuId are undefined here
                    button = this.button
                        .insertBefore(this.select)
                        .buttonMarkup({
                            theme: options.theme,
                            icon: options.icon,
                            iconpos: iconpos,
                            inline: inline,
                            corners: options.corners,
                            shadow: options.shadow,
                            iconshadow: options.iconshadow,
                            mini: mini
                        });

                this.setButtonText();

                // Opera does not properly support opacity on select elements
                // In Mini, it hides the element, but not its text
                // On the desktop,it seems to do the opposite
                // for these reasons, using the nativeMenu option results in a full native select in Opera
                if (options.nativeMenu && window.opera && window.opera.version) {
                    button.addClass("ui-select-nativeonly");
                }

                // Add counter for multi selects
                if (this.isMultiple) {
                    this.buttonCount = $("<span>")
                        .addClass("ui-li-count ui-btn-up-c ui-btn-corner-all")
                        .hide()
                        .appendTo(button.addClass('ui-li-has-count'));
                }

                // Disable if specified
                if (options.disabled || this.element.attr('disabled')) {
                    this.disable();
                }

                // Events on native select
                this.select.change(function() {
                    self.refresh();

                    if ( !! options.nativeMenu) {
                        this.blur();
                    }
                });

                this._handleFormReset();

                this.build();
            },

            build: function() {
                var self = this;

                this.select
                    .appendTo(self.button)
                    .bind("vmousedown", function() {
                        // Add active class to button
                        self.button.addClass($.mobile.activeBtnClass);
                    })
                    .bind("focus", function() {
                        self.button.addClass($.mobile.focusClass);
                    })
                    .bind("blur", function() {
                        self.button.removeClass($.mobile.focusClass);
                    })
                    .bind("focus vmouseover", function() {
                        self.button.trigger("vmouseover");
                    })
                    .bind("vmousemove", function() {
                        // Remove active class on scroll/touchmove
                        self.button.removeClass($.mobile.activeBtnClass);
                    })
                    .bind("change blur vmouseout", function() {
                        self.button.trigger("vmouseout")
                            .removeClass($.mobile.activeBtnClass);
                    })
                    .bind("change blur", function() {
                        self.button.removeClass("ui-btn-down-" + self.options.theme);
                    });

                // In many situations, iOS will zoom into the select upon tap, this prevents that from happening
                self.button.bind("vmousedown", function() {
                    if (self.options.preventFocusZoom) {
                        $.mobile.zoom.disable(true);
                    }
                });
                self.label.bind("click focus", function() {
                    if (self.options.preventFocusZoom) {
                        $.mobile.zoom.disable(true);
                    }
                });
                self.select.bind("focus", function() {
                    if (self.options.preventFocusZoom) {
                        $.mobile.zoom.disable(true);
                    }
                });
                self.button.bind("mouseup", function() {
                    if (self.options.preventFocusZoom) {
                        setTimeout(function() {
                            $.mobile.zoom.enable(true);
                        }, 0);
                    }
                });
                self.select.bind("blur", function() {
                    if (self.options.preventFocusZoom) {
                        $.mobile.zoom.enable(true);
                    }
                });

            },

            selected: function() {
                return this._selectOptions().filter(":selected");
            },

            selectedIndices: function() {
                var self = this;

                return this.selected().map(function() {
                    return self._selectOptions().index(this);
                }).get();
            },

            setButtonText: function() {
                var self = this,
                    selected = this.selected(),
                    text = this.placeholder,
                    span = $(document.createElement("span"));

                this.button.find(".ui-btn-text").html(function() {
                    if (selected.length) {
                        text = selected.map(function() {
                            return $(this).text();
                        }).get().join(", ");
                    } else {
                        text = self.placeholder;
                    }

                    // TODO possibly aggregate multiple select option classes
                    return span.text(text)
                        .addClass(self.select.attr("class"))
                        .addClass(selected.attr("class"));
                });
            },

            setButtonCount: function() {
                var selected = this.selected();

                // multiple count inside button
                if (this.isMultiple) {
                    this.buttonCount[selected.length > 1 ? "show" : "hide"]().text(selected.length);
                }
            },

            _reset: function() {
                this.refresh();
            },

            refresh: function() {
                this.setButtonText();
                this.setButtonCount();
            },

            // open and close preserved in native selects
            // to simplify users code when looping over selects
            open: $.noop,
            close: $.noop,

            disable: function() {
                this._setDisabled(true);
                this.button.addClass("ui-disabled");
            },

            enable: function() {
                this._setDisabled(false);
                this.button.removeClass("ui-disabled");
            }
        }, $.mobile.behaviors.formReset));

        //auto self-init widgets
        $.mobile.document.bind("pagecreate create", function(e) {
            $.mobile.selectmenu.prototype.enhanceWithin(e.target, true);
        });
    })(jQuery);

    (function($, undefined) {

        function fitSegmentInsideSegment(winSize, segSize, offset, desired) {
            var ret = desired;

            if (winSize < segSize) {
                // Center segment if it's bigger than the window
                ret = offset + (winSize - segSize) / 2;
            } else {
                // Otherwise center it at the desired coordinate while keeping it completely inside the window
                ret = Math.min(Math.max(offset, desired - segSize / 2), offset + winSize - segSize);
            }

            return ret;
        }

        function windowCoords() {
            var $win = $.mobile.window;

            return {
                x: $win.scrollLeft(),
                y: $win.scrollTop(),
                cx: (window.innerWidth || $win.width()),
                cy: (window.innerHeight || $win.height())
            };
        }

        $.widget("mobile.popup", $.mobile.widget, {
            options: {
                theme: null,
                overlayTheme: null,
                shadow: true,
                corners: true,
                transition: "none",
                positionTo: "origin",
                tolerance: null,
                initSelector: ":jqmData(role='popup')",
                closeLinkSelector: "a:jqmData(rel='back')",
                closeLinkEvents: "click.popup",
                navigateEvents: "navigate.popup",
                closeEvents: "navigate.popup pagebeforechange.popup",
                dismissible: true,

                // NOTE Windows Phone 7 has a scroll position caching issue that
                //      requires us to disable popup history management by default
                //      https://github.com/jquery/jquery-mobile/issues/4784
                //
                // NOTE this option is modified in _create!
                history: !$.mobile.browser.oldIE
            },

            _eatEventAndClose: function(e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                if (this.options.dismissible) {
                    this.close();
                }
                return false;
            },

            // Make sure the screen size is increased beyond the page height if the popup's causes the document to increase in height
            _resizeScreen: function() {
                var popupHeight = this._ui.container.outerHeight(true);

                this._ui.screen.removeAttr("style");
                if (popupHeight > this._ui.screen.height()) {
                    this._ui.screen.height(popupHeight);
                }
            },

            _handleWindowKeyUp: function(e) {
                if (this._isOpen && e.keyCode === $.mobile.keyCode.ESCAPE) {
                    return this._eatEventAndClose(e);
                }
            },

            _expectResizeEvent: function() {
                var winCoords = windowCoords();

                if (this._resizeData) {
                    if (winCoords.x === this._resizeData.winCoords.x &&
                        winCoords.y === this._resizeData.winCoords.y &&
                        winCoords.cx === this._resizeData.winCoords.cx &&
                        winCoords.cy === this._resizeData.winCoords.cy) {
                        // timeout not refreshed
                        return false;
                    } else {
                        // clear existing timeout - it will be refreshed below
                        clearTimeout(this._resizeData.timeoutId);
                    }
                }

                this._resizeData = {
                    timeoutId: setTimeout($.proxy(this, "_resizeTimeout"), 200),
                    winCoords: winCoords
                };

                return true;
            },

            _resizeTimeout: function() {
                if (this._isOpen) {
                    if (!this._expectResizeEvent()) {
                        if (this._ui.container.hasClass("ui-popup-hidden")) {
                            // effectively rapid-open the popup while leaving the screen intact
                            this._ui.container.removeClass("ui-popup-hidden");
                            this.reposition({
                                positionTo: "window"
                            });
                            this._ignoreResizeEvents();
                        }

                        this._resizeScreen();
                        this._resizeData = null;
                        this._orientationchangeInProgress = false;
                    }
                } else {
                    this._resizeData = null;
                    this._orientationchangeInProgress = false;
                }
            },

            _ignoreResizeEvents: function() {
                var self = this;

                if (this._ignoreResizeTo) {
                    clearTimeout(this._ignoreResizeTo);
                }
                this._ignoreResizeTo = setTimeout(function() {
                    self._ignoreResizeTo = 0;
                }, 1000);
            },

            _handleWindowResize: function(e) {
                if (this._isOpen && this._ignoreResizeTo === 0) {
                    if ((this._expectResizeEvent() || this._orientationchangeInProgress) && !this._ui.container.hasClass("ui-popup-hidden")) {
                        // effectively rapid-close the popup while leaving the screen intact
                        this._ui.container
                            .addClass("ui-popup-hidden")
                            .removeAttr("style");
                    }
                }
            },

            _handleWindowOrientationchange: function(e) {
                if (!this._orientationchangeInProgress && this._isOpen && this._ignoreResizeTo === 0) {
                    this._expectResizeEvent();
                    this._orientationchangeInProgress = true;
                }
            },

            // When the popup is open, attempting to focus on an element that is not a
            // child of the popup will redirect focus to the popup
            _handleDocumentFocusIn: function(e) {
                var tgt = e.target,
                    $tgt, ui = this._ui;

                if (!this._isOpen) {
                    return;
                }

                if (tgt !== ui.container[0]) {
                    $tgt = $(e.target);
                    if (0 === $tgt.parents().filter(ui.container[0]).length) {
                        $(document.activeElement).one("focus", function(e) {
                            $tgt.blur();
                        });
                        ui.focusElement.focus();
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        return false;
                    } else if (ui.focusElement[0] === ui.container[0]) {
                        ui.focusElement = $tgt;
                    }
                }

                this._ignoreResizeEvents();
            },

            _create: function() {
                var ui = {
                    screen: $("<div class='ui-screen-hidden ui-popup-screen'></div>"),
                    placeholder: $("<div style='display: none;'><!-- placeholder --></div>"),
                    container: $("<div class='ui-popup-container ui-popup-hidden'></div>")
                },
                    thisPage = this.element.closest(".ui-page"),
                    myId = this.element.attr("id"),
                    o = this.options,
                    key, value;

                // We need to adjust the history option to be false if there's no AJAX nav.
                // We can't do it in the option declarations because those are run before
                // it is determined whether there shall be AJAX nav.
                o.history = o.history && $.mobile.ajaxEnabled && $.mobile.hashListeningEnabled;

                if (thisPage.length === 0) {
                    thisPage = $("body");
                }

                // define the container for navigation event bindings
                // TODO this would be nice at the the mobile widget level
                o.container = o.container || $.mobile.pageContainer || thisPage;

                // Apply the proto
                thisPage.append(ui.screen);
                ui.container.insertAfter(ui.screen);
                // Leave a placeholder where the element used to be
                ui.placeholder.insertAfter(this.element);
                if (myId) {
                    ui.screen.attr("id", myId + "-screen");
                    ui.container.attr("id", myId + "-popup");
                    ui.placeholder.html("<!-- placeholder for " + myId + " -->");
                }
                ui.container.append(this.element);
                ui.focusElement = ui.container;

                // Add class to popup element
                this.element.addClass("ui-popup");

                // Define instance variables
                $.extend(this, {
                    _scrollTop: 0,
                    _page: thisPage,
                    _ui: ui,
                    _fallbackTransition: "",
                    _currentTransition: false,
                    _prereqs: null,
                    _isOpen: false,
                    _tolerance: null,
                    _resizeData: null,
                    _ignoreResizeTo: 0,
                    _orientationchangeInProgress: false
                });

                // This duplicates the code from the various option setters below for
                // better performance. It must be kept in sync with those setters.
                this._applyTheme(this.element, o.theme, "body");
                this._applyTheme(this._ui.screen, o.overlayTheme, "overlay");
                this._applyTransition(o.transition);
                this.element
                    .toggleClass("ui-overlay-shadow", o.shadow)
                    .toggleClass("ui-corner-all", o.corners);
                this._setTolerance(o.tolerance);

                ui.screen.bind("vclick", $.proxy(this, "_eatEventAndClose"));

                this._on($.mobile.window, {
                    orientationchange: $.proxy(this, "_handleWindowOrientationchange"),
                    resize: $.proxy(this, "_handleWindowResize"),
                    keyup: $.proxy(this, "_handleWindowKeyUp")
                });
                this._on($.mobile.document, {
                    focusin: $.proxy(this, "_handleDocumentFocusIn")
                });
            },

            _applyTheme: function(dst, theme, prefix) {
                var classes = (dst.attr("class") || "").split(" "),
                    alreadyAdded = true,
                    currentTheme = null,
                    matches,
                    themeStr = String(theme);

                while (classes.length > 0) {
                    currentTheme = classes.pop();
                    matches = (new RegExp("^ui-" + prefix + "-([a-z])$")).exec(currentTheme);
                    if (matches && matches.length > 1) {
                        currentTheme = matches[1];
                        break;
                    } else {
                        currentTheme = null;
                    }
                }

                if (theme !== currentTheme) {
                    dst.removeClass("ui-" + prefix + "-" + currentTheme);
                    if (!(theme === null || theme === "none")) {
                        dst.addClass("ui-" + prefix + "-" + themeStr);
                    }
                }
            },

            _setTheme: function(value) {
                this._applyTheme(this.element, value, "body");
            },

            _setOverlayTheme: function(value) {
                this._applyTheme(this._ui.screen, value, "overlay");

                if (this._isOpen) {
                    this._ui.screen.addClass("in");
                }
            },

            _setShadow: function(value) {
                this.element.toggleClass("ui-overlay-shadow", value);
            },

            _setCorners: function(value) {
                this.element.toggleClass("ui-corner-all", value);
            },

            _applyTransition: function(value) {
                this._ui.container.removeClass(this._fallbackTransition);
                if (value && value !== "none") {
                    this._fallbackTransition = $.mobile._maybeDegradeTransition(value);
                    if (this._fallbackTransition === "none") {
                        this._fallbackTransition = "";
                    }
                    this._ui.container.addClass(this._fallbackTransition);
                }
            },

            _setTransition: function(value) {
                if (!this._currentTransition) {
                    this._applyTransition(value);
                }
            },

            _setTolerance: function(value) {
                var tol = {
                    t: 30,
                    r: 15,
                    b: 30,
                    l: 15
                };

                if (value !== undefined) {
                    var ar = String(value).split(",");

                    $.each(ar, function(idx, val) {
                        ar[idx] = parseInt(val, 10);
                    });

                    switch (ar.length) {
                        // All values are to be the same
                        case 1:
                            if (!isNaN(ar[0])) {
                                tol.t = tol.r = tol.b = tol.l = ar[0];
                            }
                            break;

                            // The first value denotes top/bottom tolerance, and the second value denotes left/right tolerance
                        case 2:
                            if (!isNaN(ar[0])) {
                                tol.t = tol.b = ar[0];
                            }
                            if (!isNaN(ar[1])) {
                                tol.l = tol.r = ar[1];
                            }
                            break;

                            // The array contains values in the order top, right, bottom, left
                        case 4:
                            if (!isNaN(ar[0])) {
                                tol.t = ar[0];
                            }
                            if (!isNaN(ar[1])) {
                                tol.r = ar[1];
                            }
                            if (!isNaN(ar[2])) {
                                tol.b = ar[2];
                            }
                            if (!isNaN(ar[3])) {
                                tol.l = ar[3];
                            }
                            break;

                        default:
                            break;
                    }
                }

                this._tolerance = tol;
            },

            _setOption: function(key, value) {
                var setter = "_set" + key.charAt(0).toUpperCase() + key.slice(1);

                if (this[setter] !== undefined) {
                    this[setter](value);
                }

                this._super(key, value);
            },

            // Try and center the overlay over the given coordinates
            _placementCoords: function(desired) {
                // rectangle within which the popup must fit
                var
                winCoords = windowCoords(),
                    rc = {
                        x: this._tolerance.l,
                        y: winCoords.y + this._tolerance.t,
                        cx: winCoords.cx - this._tolerance.l - this._tolerance.r,
                        cy: winCoords.cy - this._tolerance.t - this._tolerance.b
                    },
                    menuSize, ret;

                // Clamp the width of the menu before grabbing its size
                this._ui.container.css("max-width", rc.cx);
                menuSize = {
                    cx: this._ui.container.outerWidth(true),
                    cy: this._ui.container.outerHeight(true)
                };

                // Center the menu over the desired coordinates, while not going outside
                // the window tolerances. This will center wrt. the window if the popup is too large.
                ret = {
                    x: fitSegmentInsideSegment(rc.cx, menuSize.cx, rc.x, desired.x),
                    y: fitSegmentInsideSegment(rc.cy, menuSize.cy, rc.y, desired.y)
                };

                // Make sure the top of the menu is visible
                ret.y = Math.max(0, ret.y);

                // If the height of the menu is smaller than the height of the document
                // align the bottom with the bottom of the document

                // fix for $.mobile.document.height() bug in core 1.7.2.
                var docEl = document.documentElement,
                    docBody = document.body,
                    docHeight = Math.max(docEl.clientHeight, docBody.scrollHeight, docBody.offsetHeight, docEl.scrollHeight, docEl.offsetHeight);

                ret.y -= Math.min(ret.y, Math.max(0, ret.y + menuSize.cy - docHeight));

                return {
                    left: ret.x,
                    top: ret.y
                };
            },

            _createPrereqs: function(screenPrereq, containerPrereq, whenDone) {
                var self = this,
                    prereqs;

                // It is important to maintain both the local variable prereqs and self._prereqs. The local variable remains in
                // the closure of the functions which call the callbacks passed in. The comparison between the local variable and
                // self._prereqs is necessary, because once a function has been passed to .animationComplete() it will be called
                // next time an animation completes, even if that's not the animation whose end the function was supposed to catch
                // (for example, if an abort happens during the opening animation, the .animationComplete handler is not called for
                // that animation anymore, but the handler remains attached, so it is called the next time the popup is opened
                // - making it stale. Comparing the local variable prereqs to the widget-level variable self._prereqs ensures that
                // callbacks triggered by a stale .animationComplete will be ignored.

                prereqs = {
                    screen: $.Deferred(),
                    container: $.Deferred()
                };

                prereqs.screen.then(function() {
                    if (prereqs === self._prereqs) {
                        screenPrereq();
                    }
                });

                prereqs.container.then(function() {
                    if (prereqs === self._prereqs) {
                        containerPrereq();
                    }
                });

                $.when(prereqs.screen, prereqs.container).done(function() {
                    if (prereqs === self._prereqs) {
                        self._prereqs = null;
                        whenDone();
                    }
                });

                self._prereqs = prereqs;
            },

            _animate: function(args) {
                // NOTE before removing the default animation of the screen
                //      this had an animate callback that would resolve the deferred
                //      now the deferred is resolved immediately
                // TODO remove the dependency on the screen deferred
                this._ui.screen
                    .removeClass(args.classToRemove)
                    .addClass(args.screenClassToAdd);

                args.prereqs.screen.resolve();

                if (args.transition && args.transition !== "none") {
                    if (args.applyTransition) {
                        this._applyTransition(args.transition);
                    }
                    if (this._fallbackTransition) {
                        this._ui.container
                            .animationComplete($.proxy(args.prereqs.container, "resolve"))
                            .addClass(args.containerClassToAdd)
                            .removeClass(args.classToRemove);
                        return;
                    }
                }
                this._ui.container.removeClass(args.classToRemove);
                args.prereqs.container.resolve();
            },

            // The desired coordinates passed in will be returned untouched if no reference element can be identified via
            // desiredPosition.positionTo. Nevertheless, this function ensures that its return value always contains valid
            // x and y coordinates by specifying the center middle of the window if the coordinates are absent.
            // options: { x: coordinate, y: coordinate, positionTo: string: "origin", "window", or jQuery selector
            _desiredCoords: function(o) {
                var dst = null,
                    offset, winCoords = windowCoords(),
                    x = o.x,
                    y = o.y,
                    pTo = o.positionTo;

                // Establish which element will serve as the reference
                if (pTo && pTo !== "origin") {
                    if (pTo === "window") {
                        x = winCoords.cx / 2 + winCoords.x;
                        y = winCoords.cy / 2 + winCoords.y;
                    } else {
                        try {
                            dst = $(pTo);
                        } catch (e) {
                            dst = null;
                        }
                        if (dst) {
                            dst.filter(":visible");
                            if (dst.length === 0) {
                                dst = null;
                            }
                        }
                    }
                }

                // If an element was found, center over it
                if (dst) {
                    offset = dst.offset();
                    x = offset.left + dst.outerWidth() / 2;
                    y = offset.top + dst.outerHeight() / 2;
                }

                // Make sure x and y are valid numbers - center over the window
                if ($.type(x) !== "number" || isNaN(x)) {
                    x = winCoords.cx / 2 + winCoords.x;
                }
                if ($.type(y) !== "number" || isNaN(y)) {
                    y = winCoords.cy / 2 + winCoords.y;
                }

                return {
                    x: x,
                    y: y
                };
            },

            _reposition: function(o) {
                // We only care about position-related parameters for repositioning
                o = {
                    x: o.x,
                    y: o.y,
                    positionTo: o.positionTo
                };
                this._trigger("beforeposition", undefined, o);
                this._ui.container.offset(this._placementCoords(this._desiredCoords(o)));
            },

            reposition: function(o) {
                if (this._isOpen) {
                    this._reposition(o);
                }
            },

            _openPrereqsComplete: function() {
                this._ui.container.addClass("ui-popup-active");
                this._isOpen = true;
                this._resizeScreen();
                this._ui.container.attr("tabindex", "0").focus();
                this._ignoreResizeEvents();
                this._trigger("afteropen");
            },

            _open: function(options) {
                var o = $.extend({}, this.options, options),
                    // TODO move blacklist to private method
                    androidBlacklist = (function() {
                        var w = window,
                            ua = navigator.userAgent,
                            // Rendering engine is Webkit, and capture major version
                            wkmatch = ua.match(/AppleWebKit\/([0-9\.]+)/),
                            wkversion = !! wkmatch && wkmatch[1],
                            androidmatch = ua.match(/Android (\d+(?:\.\d+))/),
                            andversion = !! androidmatch && androidmatch[1],
                            chromematch = ua.indexOf("Chrome") > -1;

                        // Platform is Android, WebKit version is greater than 534.13 ( Android 3.2.1 ) and not Chrome.
                        if (androidmatch !== null && andversion === "4.0" && wkversion && wkversion > 534.13 && !chromematch) {
                            return true;
                        }
                        return false;
                    }());

                // Count down to triggering "popupafteropen" - we have two prerequisites:
                // 1. The popup window animation completes (container())
                // 2. The screen opacity animation completes (screen())
                this._createPrereqs(
                    $.noop,
                    $.noop,
                    $.proxy(this, "_openPrereqsComplete"));

                this._currentTransition = o.transition;
                this._applyTransition(o.transition);

                if (!this.options.theme) {
                    this._setTheme(this._page.jqmData("theme") || $.mobile.getInheritedTheme(this._page, "c"));
                }

                this._ui.screen.removeClass("ui-screen-hidden");
                this._ui.container.removeClass("ui-popup-hidden");

                // Give applications a chance to modify the contents of the container before it appears
                this._reposition(o);

                if (this.options.overlayTheme && androidBlacklist) {
                    /* TODO:
			The native browser on Android 4.0.X ("Ice Cream Sandwich") suffers from an issue where the popup overlay appears to be z-indexed
			above the popup itself when certain other styles exist on the same page -- namely, any element set to `position: fixed` and certain
			types of input. These issues are reminiscent of previously uncovered bugs in older versions of Android's native browser:
			https://github.com/scottjehl/Device-Bugs/issues/3

			This fix closes the following bugs ( I use "closes" with reluctance, and stress that this issue should be revisited as soon as possible ):

			https://github.com/jquery/jquery-mobile/issues/4816
			https://github.com/jquery/jquery-mobile/issues/4844
			https://github.com/jquery/jquery-mobile/issues/4874
			*/

                    // TODO sort out why this._page isn't working
                    this.element.closest(".ui-page").addClass("ui-popup-open");
                }
                this._animate({
                    additionalCondition: true,
                    transition: o.transition,
                    classToRemove: "",
                    screenClassToAdd: "in",
                    containerClassToAdd: "in",
                    applyTransition: false,
                    prereqs: this._prereqs
                });
            },

            _closePrereqScreen: function() {
                this._ui.screen
                    .removeClass("out")
                    .addClass("ui-screen-hidden");
            },

            _closePrereqContainer: function() {
                this._ui.container
                    .removeClass("reverse out")
                    .addClass("ui-popup-hidden")
                    .removeAttr("style");
            },

            _closePrereqsDone: function() {
                var container = this._ui.container;

                container.removeAttr("tabindex");

                // remove the global mutex for popups
                $.mobile.popup.active = undefined;

                // Blur elements inside the container, including the container
                $(":focus", container[0]).add(container[0]).blur();

                // alert users that the popup is closed
                this._trigger("afterclose");
            },

            _close: function(immediate) {
                this._ui.container.removeClass("ui-popup-active");
                this._page.removeClass("ui-popup-open");

                this._isOpen = false;

                // Count down to triggering "popupafterclose" - we have two prerequisites:
                // 1. The popup window reverse animation completes (container())
                // 2. The screen opacity animation completes (screen())
                this._createPrereqs(
                    $.proxy(this, "_closePrereqScreen"),
                    $.proxy(this, "_closePrereqContainer"),
                    $.proxy(this, "_closePrereqsDone"));

                this._animate({
                    additionalCondition: this._ui.screen.hasClass("in"),
                    transition: (immediate ? "none" : (this._currentTransition)),
                    classToRemove: "in",
                    screenClassToAdd: "out",
                    containerClassToAdd: "reverse out",
                    applyTransition: true,
                    prereqs: this._prereqs
                });
            },

            _unenhance: function() {
                // Put the element back to where the placeholder was and remove the "ui-popup" class
                this._setTheme("none");
                this.element
                // Cannot directly insertAfter() - we need to detach() first, because
                // insertAfter() will do nothing if the payload div was not attached
                // to the DOM at the time the widget was created, and so the payload
                // will remain inside the container even after we call insertAfter().
                // If that happens and we remove the container a few lines below, we
                // will cause an infinite recursion - #5244
                .detach()
                    .insertAfter(this._ui.placeholder)
                    .removeClass("ui-popup ui-overlay-shadow ui-corner-all");
                this._ui.screen.remove();
                this._ui.container.remove();
                this._ui.placeholder.remove();
            },

            _destroy: function() {
                if ($.mobile.popup.active === this) {
                    this.element.one("popupafterclose", $.proxy(this, "_unenhance"));
                    this.close();
                } else {
                    this._unenhance();
                }
            },

            _closePopup: function(e, data) {
                var parsedDst, toUrl, o = this.options,
                    immediate = false;

                // restore location on screen
                window.scrollTo(0, this._scrollTop);

                if (e && e.type === "pagebeforechange" && data) {
                    // Determine whether we need to rapid-close the popup, or whether we can
                    // take the time to run the closing transition
                    if (typeof data.toPage === "string") {
                        parsedDst = data.toPage;
                    } else {
                        parsedDst = data.toPage.jqmData("url");
                    }
                    parsedDst = $.mobile.path.parseUrl(parsedDst);
                    toUrl = parsedDst.pathname + parsedDst.search + parsedDst.hash;

                    if (this._myUrl !== $.mobile.path.makeUrlAbsolute(toUrl)) {
                        // Going to a different page - close immediately
                        immediate = true;
                    } else {
                        e.preventDefault();
                    }
                }

                // remove nav bindings
                o.container.unbind(o.closeEvents);
                // unbind click handlers added when history is disabled
                this.element.undelegate(o.closeLinkSelector, o.closeLinkEvents);

                this._close(immediate);
            },

            // any navigation event after a popup is opened should close the popup
            // NOTE the pagebeforechange is bound to catch navigation events that don't
            //      alter the url (eg, dialogs from popups)
            _bindContainerClose: function() {
                this.options.container
                    .one(this.options.closeEvents, $.proxy(this, "_closePopup"));
            },

            // TODO no clear deliniation of what should be here and
            // what should be in _open. Seems to be "visual" vs "history" for now
            open: function(options) {
                var self = this,
                    opts = this.options,
                    url, hashkey, activePage, currentIsDialog, hasHash, urlHistory;

                // make sure open is idempotent
                if ($.mobile.popup.active) {
                    return;
                }

                // set the global popup mutex
                $.mobile.popup.active = this;
                this._scrollTop = $.mobile.window.scrollTop();

                // if history alteration is disabled close on navigate events
                // and leave the url as is
                if (!(opts.history)) {
                    self._open(options);
                    self._bindContainerClose();

                    // When histoy is disabled we have to grab the data-rel
                    // back link clicks so we can close the popup instead of
                    // relying on history to do it for us
                    self.element
                        .delegate(opts.closeLinkSelector, opts.closeLinkEvents, function(e) {
                            self.close();
                            e.preventDefault();
                        });

                    return;
                }

                // cache some values for min/readability
                urlHistory = $.mobile.urlHistory;
                hashkey = $.mobile.dialogHashKey;
                activePage = $.mobile.activePage;
                currentIsDialog = activePage.is(".ui-dialog");
                this._myUrl = url = urlHistory.getActive().url;
                hasHash = (url.indexOf(hashkey) > -1) && !currentIsDialog && (urlHistory.activeIndex > 0);

                if (hasHash) {
                    self._open(options);
                    self._bindContainerClose();
                    return;
                }

                // if the current url has no dialog hash key proceed as normal
                // otherwise, if the page is a dialog simply tack on the hash key
                if (url.indexOf(hashkey) === -1 && !currentIsDialog) {
                    url = url + (url.indexOf("#") > -1 ? hashkey : "#" + hashkey);
                } else {
                    url = $.mobile.path.parseLocation().hash + hashkey;
                }

                // Tack on an extra hashkey if this is the first page and we've just reconstructed the initial hash
                if (urlHistory.activeIndex === 0 && url === urlHistory.initialDst) {
                    url += hashkey;
                }

                // swallow the the initial navigation event, and bind for the next
                $(window).one("beforenavigate", function(e) {
                    e.preventDefault();
                    self._open(options);
                    self._bindContainerClose();
                });

                this.urlAltered = true;
                $.mobile.navigate(url, {
                    role: "dialog"
                });
            },

            close: function() {
                // make sure close is idempotent
                if ($.mobile.popup.active !== this) {
                    return;
                }

                this._scrollTop = $.mobile.window.scrollTop();

                if (this.options.history && this.urlAltered) {
                    $.mobile.back();
                    this.urlAltered = false;
                } else {
                    // simulate the nav bindings having fired
                    this._closePopup();
                }
            }
        });


        // TODO this can be moved inside the widget
        $.mobile.popup.handleLink = function($link) {
            var closestPage = $link.closest(":jqmData(role='page')"),
                scope = ((closestPage.length === 0) ? $("body") : closestPage),
                // NOTE make sure to get only the hash, ie7 (wp7) return the absolute href
                //      in this case ruining the element selection
                popup = $($.mobile.path.parseUrl($link.attr("href")).hash, scope[0]),
                offset;

            if (popup.data("mobile-popup")) {
                offset = $link.offset();
                popup.popup("open", {
                    x: offset.left + $link.outerWidth() / 2,
                    y: offset.top + $link.outerHeight() / 2,
                    transition: $link.jqmData("transition"),
                    positionTo: $link.jqmData("position-to")
                });
            }

            //remove after delay
            setTimeout(function() {
                // Check if we are in a listview
                var $parent = $link.parent().parent();
                if ($parent.hasClass("ui-li")) {
                    $link = $parent.parent();
                }
                $link.removeClass($.mobile.activeBtnClass);
            }, 300);
        };

        // TODO move inside _create
        $.mobile.document.bind("pagebeforechange", function(e, data) {
            if (data.options.role === "popup") {
                $.mobile.popup.handleLink(data.options.link);
                e.preventDefault();
            }
        });

        $.mobile.document.bind("pagecreate create", function(e) {
            $.mobile.popup.prototype.enhanceWithin(e.target, true);
        });

    })(jQuery);

    /*
     * custom "selectmenu" plugin
     */

    (function($, undefined) {
        var extendSelect = function(widget) {

            var select = widget.select,
                origDestroy = widget._destroy,
                selectID = widget.selectID,
                prefix = (selectID ? selectID : (($.mobile.ns || "") + "uuid-" + widget.uuid)),
                popupID = prefix + "-listbox",
                dialogID = prefix + "-dialog",
                label = widget.label,
                thisPage = widget.select.closest(".ui-page"),
                selectOptions = widget._selectOptions(),
                isMultiple = widget.isMultiple = widget.select[0].multiple,
                buttonId = selectID + "-button",
                menuId = selectID + "-menu",
                menuPage = $("<div data-" + $.mobile.ns + "role='dialog' id='" + dialogID + "' data-" + $.mobile.ns + "theme='" + widget.options.theme + "' data-" + $.mobile.ns + "overlay-theme='" + widget.options.overlayTheme + "'>" +
                    "<div data-" + $.mobile.ns + "role='header'>" +
                    "<div class='ui-title'>" + label.getEncodedText() + "</div>" +
                    "</div>" +
                    "<div data-" + $.mobile.ns + "role='content'></div>" +
                    "</div>"),

                listbox = $("<div id='" + popupID + "' class='ui-selectmenu'>").insertAfter(widget.select).popup({
                    theme: widget.options.overlayTheme
                }),

                list = $("<ul>", {
                    "class": "ui-selectmenu-list",
                    "id": menuId,
                    "role": "listbox",
                    "aria-labelledby": buttonId
                }).attr("data-" + $.mobile.ns + "theme", widget.options.theme)
                    .attr("data-" + $.mobile.ns + "divider-theme", widget.options.dividerTheme)
                    .appendTo(listbox),


                header = $("<div>", {
                    "class": "ui-header ui-bar-" + widget.options.theme
                }).prependTo(listbox),

                headerTitle = $("<h1>", {
                    "class": "ui-title"
                }).appendTo(header),

                menuPageContent,
                menuPageClose,
                headerClose;

            if (widget.isMultiple) {
                headerClose = $("<a>", {
                    "text": widget.options.closeText,
                    "href": "#",
                    "class": "ui-btn-left"
                }).attr("data-" + $.mobile.ns + "iconpos", "notext").attr("data-" + $.mobile.ns + "icon", "delete").appendTo(header).buttonMarkup();
            }

            $.extend(widget, {
                select: widget.select,
                selectID: selectID,
                buttonId: buttonId,
                menuId: menuId,
                popupID: popupID,
                dialogID: dialogID,
                thisPage: thisPage,
                menuPage: menuPage,
                label: label,
                selectOptions: selectOptions,
                isMultiple: isMultiple,
                theme: widget.options.theme,
                listbox: listbox,
                list: list,
                header: header,
                headerTitle: headerTitle,
                headerClose: headerClose,
                menuPageContent: menuPageContent,
                menuPageClose: menuPageClose,
                placeholder: "",

                build: function() {
                    var self = this,
                        escapeId = function(id) {
                            return id.replace(/([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g, "\\$1");
                        };

                    // Create list from select, update state
                    self.refresh();

                    if (self._origTabIndex === undefined) {
                        // Map undefined to false, because self._origTabIndex === undefined
                        // indicates that we have not yet checked whether the select has
                        // originally had a tabindex attribute, whereas false indicates that
                        // we have checked the select for such an attribute, and have found
                        // none present.
                        self._origTabIndex = (self.select[0].getAttribute("tabindex") === null) ? false : self.select.attr("tabindex");
                    }
                    self.select.attr("tabindex", "-1").focus(function() {
                        $(this).blur();
                        self.button.focus();
                    });

                    // Button events
                    self.button.bind("vclick keydown", function(event) {
                        if (self.options.disabled || self.isOpen) {
                            return;
                        }

                        if (event.type === "vclick" ||
                            event.keyCode && (event.keyCode === $.mobile.keyCode.ENTER ||
                                event.keyCode === $.mobile.keyCode.SPACE)) {

                            self._decideFormat();
                            if (self.menuType === "overlay") {
                                self.button.attr("href", "#" + escapeId(self.popupID)).attr("data-" + ($.mobile.ns || "") + "rel", "popup");
                            } else {
                                self.button.attr("href", "#" + escapeId(self.dialogID)).attr("data-" + ($.mobile.ns || "") + "rel", "dialog");
                            }
                            self.isOpen = true;
                            // Do not prevent default, so the navigation may have a chance to actually open the chosen format
                        }
                    });

                    // Events for list items
                    self.list.attr("role", "listbox")
                        .bind("focusin", function(e) {
                            $(e.target)
                                .attr("tabindex", "0")
                                .trigger("vmouseover");

                        })
                        .bind("focusout", function(e) {
                            $(e.target)
                                .attr("tabindex", "-1")
                                .trigger("vmouseout");
                        })
                        .delegate("li:not(.ui-disabled, .ui-li-divider)", "click", function(event) {

                            // index of option tag to be selected
                            var oldIndex = self.select[0].selectedIndex,
                                newIndex = self.list.find("li:not(.ui-li-divider)").index(this),
                                option = self._selectOptions().eq(newIndex)[0];

                            // toggle selected status on the tag for multi selects
                            option.selected = self.isMultiple ? !option.selected : true;

                            // toggle checkbox class for multiple selects
                            if (self.isMultiple) {
                                $(this).find(".ui-icon")
                                    .toggleClass("ui-icon-checkbox-on", option.selected)
                                    .toggleClass("ui-icon-checkbox-off", !option.selected);
                            }

                            // trigger change if value changed
                            if (self.isMultiple || oldIndex !== newIndex) {
                                self.select.trigger("change");
                            }

                            // hide custom select for single selects only - otherwise focus clicked item
                            // We need to grab the clicked item the hard way, because the list may have been rebuilt
                            if (self.isMultiple) {
                                self.list.find("li:not(.ui-li-divider)").eq(newIndex)
                                    .addClass("ui-btn-down-" + widget.options.theme).find("a").first().focus();
                            } else {
                                self.close();
                            }

                            event.preventDefault();
                        })
                        .keydown(function(event) { //keyboard events for menu items
                            var target = $(event.target),
                                li = target.closest("li"),
                                prev, next;

                            // switch logic based on which key was pressed
                            switch (event.keyCode) {
                                // up or left arrow keys
                                case 38:
                                    prev = li.prev().not(".ui-selectmenu-placeholder");

                                    if (prev.is(".ui-li-divider")) {
                                        prev = prev.prev();
                                    }

                                    // if there's a previous option, focus it
                                    if (prev.length) {
                                        target
                                            .blur()
                                            .attr("tabindex", "-1");

                                        prev.addClass("ui-btn-down-" + widget.options.theme).find("a").first().focus();
                                    }

                                    return false;
                                    // down or right arrow keys
                                case 40:
                                    next = li.next();

                                    if (next.is(".ui-li-divider")) {
                                        next = next.next();
                                    }

                                    // if there's a next option, focus it
                                    if (next.length) {
                                        target
                                            .blur()
                                            .attr("tabindex", "-1");

                                        next.addClass("ui-btn-down-" + widget.options.theme).find("a").first().focus();
                                    }

                                    return false;
                                    // If enter or space is pressed, trigger click
                                case 13:
                                case 32:
                                    target.trigger("click");

                                    return false;
                            }
                        });

                    // button refocus ensures proper height calculation
                    // by removing the inline style and ensuring page inclusion
                    self.menuPage.bind("pagehide", function() {
                        // TODO centralize page removal binding / handling in the page plugin.
                        // Suggestion from @jblas to do refcounting
                        //
                        // TODO extremely confusing dependency on the open method where the pagehide.remove
                        // bindings are stripped to prevent the parent page from disappearing. The way
                        // we're keeping pages in the DOM right now sucks
                        //
                        // rebind the page remove that was unbound in the open function
                        // to allow for the parent page removal from actions other than the use
                        // of a dialog sized custom select
                        //
                        // doing this here provides for the back button on the custom select dialog
                        $.mobile._bindPageRemove.call(self.thisPage);
                    });

                    // Events on the popup
                    self.listbox.bind("popupafterclose", function(event) {
                        self.close();
                    });

                    // Close button on small overlays
                    if (self.isMultiple) {
                        self.headerClose.click(function() {
                            if (self.menuType === "overlay") {
                                self.close();
                                return false;
                            }
                        });
                    }

                    // track this dependency so that when the parent page
                    // is removed on pagehide it will also remove the menupage
                    self.thisPage.addDependents(this.menuPage);
                },

                _isRebuildRequired: function() {
                    var list = this.list.find("li"),
                        options = this._selectOptions();

                    // TODO exceedingly naive method to determine difference
                    // ignores value changes etc in favor of a forcedRebuild
                    // from the user in the refresh method
                    return options.text() !== list.text();
                },

                selected: function() {
                    return this._selectOptions().filter(":selected:not( :jqmData(placeholder='true') )");
                },

                refresh: function(forceRebuild, foo) {
                    var self = this,
                        select = this.element,
                        isMultiple = this.isMultiple,
                        indicies;

                    if (forceRebuild || this._isRebuildRequired()) {
                        self._buildList();
                    }

                    indicies = this.selectedIndices();

                    self.setButtonText();
                    self.setButtonCount();

                    self.list.find("li:not(.ui-li-divider)")
                        .removeClass($.mobile.activeBtnClass)
                        .attr("aria-selected", false)
                        .each(function(i) {

                            if ($.inArray(i, indicies) > -1) {
                                var item = $(this);

                                // Aria selected attr
                                item.attr("aria-selected", true);

                                // Multiple selects: add the "on" checkbox state to the icon
                                if (self.isMultiple) {
                                    item.find(".ui-icon").removeClass("ui-icon-checkbox-off").addClass("ui-icon-checkbox-on");
                                } else {
                                    if (item.is(".ui-selectmenu-placeholder")) {
                                        item.next().addClass($.mobile.activeBtnClass);
                                    } else {
                                        item.addClass($.mobile.activeBtnClass);
                                    }
                                }
                            }
                        });
                },

                close: function() {
                    if (this.options.disabled || !this.isOpen) {
                        return;
                    }

                    var self = this;

                    if (self.menuType === "page") {
                        self.menuPage.dialog("close");
                        self.list.appendTo(self.listbox);
                    } else {
                        self.listbox.popup("close");
                    }

                    self._focusButton();
                    // allow the dialog to be closed again
                    self.isOpen = false;
                },

                open: function() {
                    this.button.click();
                },

                _decideFormat: function() {
                    var self = this,
                        $window = $.mobile.window,
                        selfListParent = self.list.parent(),
                        menuHeight = selfListParent.outerHeight(),
                        menuWidth = selfListParent.outerWidth(),
                        activePage = $("." + $.mobile.activePageClass),
                        scrollTop = $window.scrollTop(),
                        btnOffset = self.button.offset().top,
                        screenHeight = $window.height(),
                        screenWidth = $window.width();

                    function focusMenuItem() {
                        var selector = self.list.find("." + $.mobile.activeBtnClass + " a");
                        if (selector.length === 0) {
                            selector = self.list.find("li.ui-btn:not( :jqmData(placeholder='true') ) a");
                        }
                        selector.first().focus().closest("li").addClass("ui-btn-down-" + widget.options.theme);
                    }

                    if (menuHeight > screenHeight - 80 || !$.support.scrollTop) {

                        self.menuPage.appendTo($.mobile.pageContainer).page();
                        self.menuPageContent = menuPage.find(".ui-content");
                        self.menuPageClose = menuPage.find(".ui-header a");

                        // prevent the parent page from being removed from the DOM,
                        // otherwise the results of selecting a list item in the dialog
                        // fall into a black hole
                        self.thisPage.unbind("pagehide.remove");

                        //for WebOS/Opera Mini (set lastscroll using button offset)
                        if (scrollTop === 0 && btnOffset > screenHeight) {
                            self.thisPage.one("pagehide", function() {
                                $(this).jqmData("lastScroll", btnOffset);
                            });
                        }

                        self.menuPage
                            .one("pageshow", function() {
                                focusMenuItem();
                            })
                            .one("pagehide", function() {
                                self.close();
                            });

                        self.menuType = "page";
                        self.menuPageContent.append(self.list);
                        self.menuPage.find("div .ui-title").text(self.label.text());
                    } else {
                        self.menuType = "overlay";

                        self.listbox.one("popupafteropen", focusMenuItem);
                    }
                },

                _buildList: function() {
                    var self = this,
                        o = this.options,
                        placeholder = this.placeholder,
                        needPlaceholder = true,
                        optgroups = [],
                        lis = [],
                        dataIcon = self.isMultiple ? "checkbox-off" : "false";

                    self.list.empty().filter(".ui-listview").listview("destroy");

                    var $options = self.select.find("option"),
                        numOptions = $options.length,
                        select = this.select[0],
                        dataPrefix = 'data-' + $.mobile.ns,
                        dataIndexAttr = dataPrefix + 'option-index',
                        dataIconAttr = dataPrefix + 'icon',
                        dataRoleAttr = dataPrefix + 'role',
                        dataPlaceholderAttr = dataPrefix + 'placeholder',
                        fragment = document.createDocumentFragment(),
                        isPlaceholderItem = false,
                        optGroup;

                    for (var i = 0; i < numOptions; i++, isPlaceholderItem = false) {
                        var option = $options[i],
                            $option = $(option),
                            parent = option.parentNode,
                            text = $option.text(),
                            anchor = document.createElement('a'),
                            classes = [];

                        anchor.setAttribute('href', '#');
                        anchor.appendChild(document.createTextNode(text));

                        // Are we inside an optgroup?
                        if (parent !== select && parent.nodeName.toLowerCase() === "optgroup") {
                            var optLabel = parent.getAttribute('label');
                            if (optLabel !== optGroup) {
                                var divider = document.createElement('li');
                                divider.setAttribute(dataRoleAttr, 'list-divider');
                                divider.setAttribute('role', 'option');
                                divider.setAttribute('tabindex', '-1');
                                divider.appendChild(document.createTextNode(optLabel));
                                fragment.appendChild(divider);
                                optGroup = optLabel;
                            }
                        }

                        if (needPlaceholder && (!option.getAttribute("value") || text.length === 0 || $option.jqmData("placeholder"))) {
                            needPlaceholder = false;
                            isPlaceholderItem = true;

                            // If we have identified a placeholder, record the fact that it was
                            // us who have added the placeholder to the option and mark it
                            // retroactively in the select as well
                            if (null === option.getAttribute(dataPlaceholderAttr)) {
                                this._removePlaceholderAttr = true;
                            }
                            option.setAttribute(dataPlaceholderAttr, true);
                            if (o.hidePlaceholderMenuItems) {
                                classes.push("ui-selectmenu-placeholder");
                            }
                            if (placeholder !== text) {
                                placeholder = self.placeholder = text;
                            }
                        }

                        var item = document.createElement('li');
                        if (option.disabled) {
                            classes.push("ui-disabled");
                            item.setAttribute('aria-disabled', true);
                        }
                        item.setAttribute(dataIndexAttr, i);
                        item.setAttribute(dataIconAttr, dataIcon);
                        if (isPlaceholderItem) {
                            item.setAttribute(dataPlaceholderAttr, true);
                        }
                        item.className = classes.join(" ");
                        item.setAttribute('role', 'option');
                        anchor.setAttribute('tabindex', '-1');
                        item.appendChild(anchor);
                        fragment.appendChild(item);
                    }

                    self.list[0].appendChild(fragment);

                    // Hide header if it's not a multiselect and there's no placeholder
                    if (!this.isMultiple && !placeholder.length) {
                        this.header.hide();
                    } else {
                        this.headerTitle.text(this.placeholder);
                    }

                    // Now populated, create listview
                    self.list.listview();
                },

                _button: function() {
                    return $("<a>", {
                        "href": "#",
                        "role": "button",
                        // TODO value is undefined at creation
                        "id": this.buttonId,
                        "aria-haspopup": "true",

                        // TODO value is undefined at creation
                        "aria-owns": this.menuId
                    });
                },

                _destroy: function() {
                    this.close();

                    // Restore the tabindex attribute to its original value
                    if (this._origTabIndex !== undefined) {
                        if (this._origTabIndex !== false) {
                            this.select.attr("tabindex", this._origTabIndex);
                        } else {
                            this.select.removeAttr("tabindex");
                        }
                    }

                    // Remove the placeholder attribute if we were the ones to add it
                    if (this._removePlaceholderAttr) {
                        this._selectOptions().removeAttr("data-" + $.mobile.ns + "placeholder");
                    }

                    // Remove the popup
                    this.listbox.remove();

                    // Remove the dialog
                    this.menuPage.remove();

                    // Chain up
                    origDestroy.apply(this, arguments);
                }
            });
        };

        // issue #3894 - core doesn't trigger events on disabled delegates
        $.mobile.document.bind("selectmenubeforecreate", function(event) {
            var selectmenuWidget = $(event.target).data("mobile-selectmenu");

            if (!selectmenuWidget.options.nativeMenu &&
                selectmenuWidget.element.parents(":jqmData(role='popup')").length === 0) {
                extendSelect(selectmenuWidget);
            }
        });
    })(jQuery);

    (function($, undefined) {

        $.widget("mobile.controlgroup", $.mobile.widget, $.extend({
            options: {
                shadow: false,
                corners: true,
                excludeInvisible: true,
                type: "vertical",
                mini: false,
                initSelector: ":jqmData(role='controlgroup')"
            },

            _create: function() {
                var $el = this.element,
                    ui = {
                        inner: $("<div class='ui-controlgroup-controls'></div>"),
                        legend: $("<div role='heading' class='ui-controlgroup-label'></div>")
                    },
                    grouplegend = $el.children("legend"),
                    self = this;

                // Apply the proto
                $el.wrapInner(ui.inner);
                if (grouplegend.length) {
                    ui.legend.append(grouplegend).insertBefore($el.children(0));
                }
                $el.addClass("ui-corner-all ui-controlgroup");

                $.extend(this, {
                    _initialRefresh: true
                });

                $.each(this.options, function(key, value) {
                    // Cause initial options to be applied by their handler by temporarily setting the option to undefined
                    // - the handler then sets it to the initial value
                    self.options[key] = undefined;
                    self._setOption(key, value, true);
                });
            },

            _init: function() {
                this.refresh();
            },

            _setOption: function(key, value) {
                var setter = "_set" + key.charAt(0).toUpperCase() + key.slice(1);

                if (this[setter] !== undefined) {
                    this[setter](value);
                }

                this._super(key, value);
                this.element.attr("data-" + ($.mobile.ns || "") + (key.replace(/([A-Z])/, "-$1").toLowerCase()), value);
            },

            _setType: function(value) {
                this.element
                    .removeClass("ui-controlgroup-horizontal ui-controlgroup-vertical")
                    .addClass("ui-controlgroup-" + value);
                this.refresh();
            },

            _setCorners: function(value) {
                this.element.toggleClass("ui-corner-all", value);
            },

            _setShadow: function(value) {
                this.element.toggleClass("ui-shadow", value);
            },

            _setMini: function(value) {
                this.element.toggleClass("ui-mini", value);
            },

            container: function() {
                return this.element.children(".ui-controlgroup-controls");
            },

            refresh: function() {
                var els = this.element.find(".ui-btn").not(".ui-slider-handle"),
                    create = this._initialRefresh;
                if ($.mobile.checkboxradio) {
                    this.element.find(":mobile-checkboxradio").checkboxradio("refresh");
                }
                this._addFirstLastClasses(els, this.options.excludeInvisible ? this._getVisibles(els, create) : els, create);
                this._initialRefresh = false;
            }
        }, $.mobile.behaviors.addFirstLastClasses));

        // TODO: Implement a mechanism to allow widgets to become enhanced in the
        // correct order when their correct enhancement depends on other widgets in
        // the page being correctly enhanced already.
        //
        // For now, we wait until dom-ready to attach the controlgroup's enhancement
        // hook, because by that time, all the other widgets' enhancement hooks should
        // already be in place, ensuring that all widgets that need to be grouped will
        // already have been enhanced by the time the controlgroup is created.
        $(function() {
            $.mobile.document.bind("pagecreate create", function(e) {
                $.mobile.controlgroup.prototype.enhanceWithin(e.target, true);
            });
        });
    })(jQuery);

    (function($, undefined) {

        $(document).bind("pagecreate create", function(e) {

            //links within content areas, tests included with page
            $(e.target)
                .find("a")
                .jqmEnhanceable()
                .filter(":jqmData(rel='popup')[href][href!='']")
                .each(function() {
                    // Accessibility info for popups
                    var e = this,
                        href = $(this).attr("href"),
                        idref = href.substring(1);

                    e.setAttribute("aria-haspopup", true);
                    e.setAttribute("aria-owns", idref);
                    e.setAttribute("aria-expanded", false);
                    $(document)
                        .on("popupafteropen", href, function() {
                            e.setAttribute("aria-expanded", true);
                        })
                        .on("popupafterclose", href, function() {
                            e.setAttribute("aria-expanded", false);
                        });
                })
                .end()
                .not(".ui-btn, .ui-link-inherit, :jqmData(role='none'), :jqmData(role='nojs')")
                .addClass("ui-link");

        });

    })(jQuery);


    (function($, undefined) {


        $.widget("mobile.fixedtoolbar", $.mobile.widget, {
            options: {
                visibleOnPageShow: true,
                disablePageZoom: true,
                transition: "slide", //can be none, fade, slide (slide maps to slideup or slidedown)
                fullscreen: false,
                tapToggle: true,
                tapToggleBlacklist: "a, button, input, select, textarea, .ui-header-fixed, .ui-footer-fixed, .ui-popup, .ui-panel, .ui-panel-dismiss-open",
                hideDuringFocus: "input, textarea, select",
                updatePagePadding: true,
                trackPersistentToolbars: true,

                // Browser detection! Weeee, here we go...
                // Unfortunately, position:fixed is costly, not to mention probably impossible, to feature-detect accurately.
                // Some tests exist, but they currently return false results in critical devices and browsers, which could lead to a broken experience.
                // Testing fixed positioning is also pretty obtrusive to page load, requiring injected elements and scrolling the window
                // The following function serves to rule out some popular browsers with known fixed-positioning issues
                // This is a plugin option like any other, so feel free to improve or overwrite it
                supportBlacklist: function() {
                    return !$.support.fixedPosition;
                },
                initSelector: ":jqmData(position='fixed')"
            },

            _create: function() {

                var self = this,
                    o = self.options,
                    $el = self.element,
                    tbtype = $el.is(":jqmData(role='header')") ? "header" : "footer",
                    $page = $el.closest(".ui-page");

                // Feature detecting support for
                if (o.supportBlacklist()) {
                    self.destroy();
                    return;
                }

                $el.addClass("ui-" + tbtype + "-fixed");

                // "fullscreen" overlay positioning
                if (o.fullscreen) {
                    $el.addClass("ui-" + tbtype + "-fullscreen");
                    $page.addClass("ui-page-" + tbtype + "-fullscreen");
                }
                // If not fullscreen, add class to page to set top or bottom padding
                else {
                    $page.addClass("ui-page-" + tbtype + "-fixed");
                }

                $.extend(this, {
                    _thisPage: null
                });

                self._addTransitionClass();
                self._bindPageEvents();
                self._bindToggleHandlers();
            },

            _addTransitionClass: function() {
                var tclass = this.options.transition;

                if (tclass && tclass !== "none") {
                    // use appropriate slide for header or footer
                    if (tclass === "slide") {
                        tclass = this.element.is(".ui-header") ? "slidedown" : "slideup";
                    }

                    this.element.addClass(tclass);
                }
            },

            _bindPageEvents: function() {
                this._thisPage = this.element.closest(".ui-page");
                //page event bindings
                // Fixed toolbars require page zoom to be disabled, otherwise usability issues crop up
                // This method is meant to disable zoom while a fixed-positioned toolbar page is visible
                this._on(this._thisPage, {
                    "pagebeforeshow": "_handlePageBeforeShow",
                    "webkitAnimationStart": "_handleAnimationStart",
                    "animationstart": "_handleAnimationStart",
                    "updatelayout": "_handleAnimationStart",
                    "pageshow": "_handlePageShow",
                    "pagebeforehide": "_handlePageBeforeHide"
                });
            },

            _handlePageBeforeShow: function() {
                var o = this.options;
                if (o.disablePageZoom) {
                    $.mobile.zoom.disable(true);
                }
                if (!o.visibleOnPageShow) {
                    this.hide(true);
                }
            },

            _handleAnimationStart: function() {
                if (this.options.updatePagePadding) {
                    this.updatePagePadding(this._thisPage);
                }
            },

            _handlePageShow: function() {
                this.updatePagePadding(this._thisPage);
                if (this.options.updatePagePadding) {
                    this._on($.mobile.window, {
                        "throttledresize": "updatePagePadding"
                    });
                }
            },

            _handlePageBeforeHide: function(e, ui) {
                var o = this.options;

                if (o.disablePageZoom) {
                    $.mobile.zoom.enable(true);
                }
                if (o.updatePagePadding) {
                    this._off($.mobile.window, "throttledresize");
                }

                if (o.trackPersistentToolbars) {
                    var thisFooter = $(".ui-footer-fixed:jqmData(id)", this._thisPage),
                        thisHeader = $(".ui-header-fixed:jqmData(id)", this._thisPage),
                        nextFooter = thisFooter.length && ui.nextPage && $(".ui-footer-fixed:jqmData(id='" + thisFooter.jqmData("id") + "')", ui.nextPage) || $(),
                        nextHeader = thisHeader.length && ui.nextPage && $(".ui-header-fixed:jqmData(id='" + thisHeader.jqmData("id") + "')", ui.nextPage) || $();

                    if (nextFooter.length || nextHeader.length) {

                        nextFooter.add(nextHeader).appendTo($.mobile.pageContainer);

                        ui.nextPage.one("pageshow", function() {
                            nextHeader.prependTo(this);
                            nextFooter.appendTo(this);
                        });
                    }
                }
            },

            _visible: true,

            // This will set the content element's top or bottom padding equal to the toolbar's height
            updatePagePadding: function(tbPage) {
                var $el = this.element,
                    header = $el.is(".ui-header"),
                    pos = parseFloat($el.css(header ? "top" : "bottom"));

                // This behavior only applies to "fixed", not "fullscreen"
                if (this.options.fullscreen) {
                    return;
                }

                // tbPage argument can be a Page object or an event, if coming from throttled resize. 
                tbPage = (tbPage && tbPage.type === undefined && tbPage) || this._thisPage || $el.closest(".ui-page");
                $(tbPage).css("padding-" + (header ? "top" : "bottom"), $el.outerHeight() + pos);
            },

            _useTransition: function(notransition) {
                var $win = $.mobile.window,
                    $el = this.element,
                    scroll = $win.scrollTop(),
                    elHeight = $el.height(),
                    pHeight = $el.closest(".ui-page").height(),
                    viewportHeight = $.mobile.getScreenHeight(),
                    tbtype = $el.is(":jqmData(role='header')") ? "header" : "footer";

                return !notransition &&
                    (this.options.transition && this.options.transition !== "none" &&
                    (
                        (tbtype === "header" && !this.options.fullscreen && scroll > elHeight) ||
                        (tbtype === "footer" && !this.options.fullscreen && scroll + viewportHeight < pHeight - elHeight)
                    ) || this.options.fullscreen
                );
            },

            show: function(notransition) {
                var hideClass = "ui-fixed-hidden",
                    $el = this.element;

                if (this._useTransition(notransition)) {
                    $el
                        .removeClass("out " + hideClass)
                        .addClass("in")
                        .animationComplete(function() {
                            $el.removeClass('in');
                        });
                } else {
                    $el.removeClass(hideClass);
                }
                this._visible = true;
            },

            hide: function(notransition) {
                var hideClass = "ui-fixed-hidden",
                    $el = this.element,
                    // if it's a slide transition, our new transitions need the reverse class as well to slide outward
                    outclass = "out" + (this.options.transition === "slide" ? " reverse" : "");

                if (this._useTransition(notransition)) {
                    $el
                        .addClass(outclass)
                        .removeClass("in")
                        .animationComplete(function() {
                            $el.addClass(hideClass).removeClass(outclass);
                        });
                } else {
                    $el.addClass(hideClass).removeClass(outclass);
                }
                this._visible = false;
            },

            toggle: function() {
                this[this._visible ? "hide" : "show"]();
            },

            _bindToggleHandlers: function() {
                var self = this,
                    o = self.options,
                    $el = self.element,
                    delayShow, delayHide,
                    isVisible = true;

                // tap toggle
                $el.closest(".ui-page")
                    .bind("vclick", function(e) {
                        if (o.tapToggle && !$(e.target).closest(o.tapToggleBlacklist).length) {
                            self.toggle();
                        }
                    })
                    .bind("focusin focusout", function(e) {
                        //this hides the toolbars on a keyboard pop to give more screen room and prevent ios bug which 
                        //positions fixed toolbars in the middle of the screen on pop if the input is near the top or
                        //bottom of the screen addresses issues #4410 Footer navbar moves up when clicking on a textbox in an Android environment
                        //and issue #4113 Header and footer change their position after keyboard popup - iOS
                        //and issue #4410 Footer navbar moves up when clicking on a textbox in an Android environment
                        if (screen.width < 1025 && $(e.target).is(o.hideDuringFocus) && !$(e.target).closest(".ui-header-fixed, .ui-footer-fixed").length) {
                            //Fix for issue #4724 Moving through form in Mobile Safari with "Next" and "Previous" system 
                            //controls causes fixed position, tap-toggle false Header to reveal itself
                            // isVisible instead of self._visible because the focusin and focusout events fire twice at the same time
                            // Also use a delay for hiding the toolbars because on Android native browser focusin is direclty followed
                            // by a focusout when a native selects opens and the other way around when it closes.
                            if (e.type === "focusout" && !isVisible) {
                                isVisible = true;
                                //wait for the stack to unwind and see if we have jumped to another input
                                clearTimeout(delayHide);
                                delayShow = setTimeout(function() {
                                    self.show();
                                }, 0);
                            } else if (e.type === "focusin" && !! isVisible) {
                                //if we have jumped to another input clear the time out to cancel the show.
                                clearTimeout(delayShow);
                                isVisible = false;
                                delayHide = setTimeout(function() {
                                    self.hide();
                                }, 0);
                            }
                        }
                    });
            },

            _destroy: function() {
                var $el = this.element,
                    header = $el.is(".ui-header");

                $el.closest(".ui-page").css("padding-" + (header ? "top" : "bottom"), "");
                $el.removeClass("ui-header-fixed ui-footer-fixed ui-header-fullscreen ui-footer-fullscreen in out fade slidedown slideup ui-fixed-hidden");
                $el.closest(".ui-page").removeClass("ui-page-header-fixed ui-page-footer-fixed ui-page-header-fullscreen ui-page-footer-fullscreen");
            }

        });

        //auto self-init widgets
        $.mobile.document
            .bind("pagecreate create", function(e) {

                // DEPRECATED in 1.1: support for data-fullscreen=true|false on the page element.
                // This line ensures it still works, but we recommend moving the attribute to the toolbars themselves.
                if ($(e.target).jqmData("fullscreen")) {
                    $($.mobile.fixedtoolbar.prototype.options.initSelector, e.target).not(":jqmData(fullscreen)").jqmData("fullscreen", true);
                }

                $.mobile.fixedtoolbar.prototype.enhanceWithin(e.target);
            });

    })(jQuery);

    (function($, undefined) {
        $.widget("mobile.fixedtoolbar", $.mobile.fixedtoolbar, {

            _create: function() {
                this._super();
                this._workarounds();
            },

            //check the browser and version and run needed workarounds
            _workarounds: function() {
                var ua = navigator.userAgent,
                    platform = navigator.platform,
                    // Rendering engine is Webkit, and capture major version
                    wkmatch = ua.match(/AppleWebKit\/([0-9]+)/),
                    wkversion = !! wkmatch && wkmatch[1],
                    os = null,
                    self = this;
                //set the os we are working in if it dosent match one with workarounds return
                if (platform.indexOf("iPhone") > -1 || platform.indexOf("iPad") > -1 || platform.indexOf("iPod") > -1) {
                    os = "ios";
                } else if (ua.indexOf("Android") > -1) {
                    os = "android";
                } else {
                    return;
                }
                //check os version if it dosent match one with workarounds return
                if (os === "ios") {
                    //iOS  workarounds
                    self._bindScrollWorkaround();
                } else if (os === "android" && wkversion && wkversion < 534) {
                    //Android 2.3 run all Android 2.3 workaround
                    self._bindScrollWorkaround();
                    self._bindListThumbWorkaround();
                } else {
                    return;
                }
            },

            //Utility class for checking header and footer positions relative to viewport
            _viewportOffset: function() {
                var $el = this.element,
                    header = $el.is(".ui-header"),
                    offset = Math.abs($el.offset().top - $.mobile.window.scrollTop());
                if (!header) {
                    offset = Math.round(offset - $.mobile.window.height() + $el.outerHeight()) - 60;
                }
                return offset;
            },

            //bind events for _triggerRedraw() function 
            _bindScrollWorkaround: function() {
                var self = this;
                //bind to scrollstop and check if the toolbars are correctly positioned
                this._on($.mobile.window, {
                    scrollstop: function() {
                        var viewportOffset = self._viewportOffset();
                        //check if the header is visible and if its in the right place
                        if (viewportOffset > 2 && self._visible) {
                            self._triggerRedraw();
                        }
                    }
                });
            },

            //this addresses issue #4250 Persistent footer instability in v1.1 with long select lists in Android 2.3.3
            //and issue #3748 Android 2.x: Page transitions broken when fixed toolbars used
            //the absolutely positioned thumbnail in a list view causes problems with fixed position buttons above in a nav bar
            //setting the li's to -webkit-transform:translate3d(0,0,0); solves this problem to avoide potential issues in other
            //platforms we scope this with the class ui-android-2x-fix
            _bindListThumbWorkaround: function() {
                this.element.closest(".ui-page").addClass("ui-android-2x-fixed");
            },
            //this addresses issues #4337 Fixed header problem after scrolling content on iOS and Android
            //and device bugs project issue #1 Form elements can lose click hit area in position: fixed containers.
            //this also addresses not on fixed toolbars page in docs
            //adding 1px of padding to the bottom then removing it causes a "redraw"
            //which positions the toolbars correctly (they will always be visually correct) 
            _triggerRedraw: function() {
                var paddingBottom = parseFloat($(".ui-page-active").css("padding-bottom"));
                //trigger page redraw to fix incorrectly positioned fixed elements
                $(".ui-page-active").css("padding-bottom", (paddingBottom + 1) + "px");
                //if the padding is reset with out a timeout the reposition will not occure.
                //this is independant of JQM the browser seems to need the time to react.
                setTimeout(function() {
                    $(".ui-page-active").css("padding-bottom", paddingBottom + "px");
                }, 0);
            },

            destroy: function() {
                this._super();
                //Remove the class we added to the page previously in android 2.x 
                this.element.closest(".ui-page-active").removeClass("ui-android-2x-fix");
            }
        });

    })(jQuery);

    (function($, undefined) {

        $.widget("mobile.panel", $.mobile.widget, {
            options: {
                classes: {
                    panel: "ui-panel",
                    panelOpen: "ui-panel-open",
                    panelClosed: "ui-panel-closed",
                    panelFixed: "ui-panel-fixed",
                    panelInner: "ui-panel-inner",
                    modal: "ui-panel-dismiss",
                    modalOpen: "ui-panel-dismiss-open",
                    pagePanel: "ui-page-panel",
                    pagePanelOpen: "ui-page-panel-open",
                    contentWrap: "ui-panel-content-wrap",
                    contentWrapOpen: "ui-panel-content-wrap-open",
                    contentWrapClosed: "ui-panel-content-wrap-closed",
                    contentFixedToolbar: "ui-panel-content-fixed-toolbar",
                    contentFixedToolbarOpen: "ui-panel-content-fixed-toolbar-open",
                    contentFixedToolbarClosed: "ui-panel-content-fixed-toolbar-closed",
                    animate: "ui-panel-animate"
                },
                animate: true,
                theme: "c",
                position: "left",
                dismissible: true,
                display: "reveal", //accepts reveal, push, overlay
                initSelector: ":jqmData(role='panel')",
                swipeClose: true,
                positionFixed: false
            },

            _panelID: null,
            _closeLink: null,
            _page: null,
            _modal: null,
            _panelInner: null,
            _wrapper: null,
            _fixedToolbar: null,

            _create: function() {
                var self = this,
                    $el = self.element,
                    page = $el.closest(":jqmData(role='page')"),
                    _getPageTheme = function() {
                        var $theme = $.data(page[0], "mobilePage").options.theme,
                            $pageThemeClass = "ui-body-" + $theme;
                        return $pageThemeClass;
                    },
                    _getPanelInner = function() {
                        var $panelInner = $el.find("." + self.options.classes.panelInner);
                        if ($panelInner.length === 0) {
                            $panelInner = $el.children().wrapAll('<div class="' + self.options.classes.panelInner + '" />').parent();
                        }
                        return $panelInner;
                    },
                    _getWrapper = function() {
                        var $wrapper = page.find("." + self.options.classes.contentWrap);
                        if ($wrapper.length === 0) {
                            $wrapper = page.children(".ui-header:not(:jqmData(position='fixed')), .ui-content:not(:jqmData(role='popup')), .ui-footer:not(:jqmData(position='fixed'))").wrapAll('<div class="' + self.options.classes.contentWrap + ' ' + _getPageTheme() + '" />').parent();
                            if ($.support.cssTransform3d && !! self.options.animate) {
                                $wrapper.addClass(self.options.classes.animate);
                            }
                        }
                        return $wrapper;
                    },
                    _getFixedToolbar = function() {
                        var $fixedToolbar = page.find("." + self.options.classes.contentFixedToolbar);
                        if ($fixedToolbar.length === 0) {
                            $fixedToolbar = page.find(".ui-header:jqmData(position='fixed'), .ui-footer:jqmData(position='fixed')").addClass(self.options.classes.contentFixedToolbar);
                            if ($.support.cssTransform3d && !! self.options.animate) {
                                $fixedToolbar.addClass(self.options.classes.animate);
                            }
                        }
                        return $fixedToolbar;
                    };

                // expose some private props to other methods
                $.extend(this, {
                    _panelID: $el.attr("id"),
                    _closeLink: $el.find(":jqmData(rel='close')"),
                    _page: $el.closest(":jqmData(role='page')"),
                    _pageTheme: _getPageTheme(),
                    _panelInner: _getPanelInner(),
                    _wrapper: _getWrapper(),
                    _fixedToolbar: _getFixedToolbar()
                });

                self._addPanelClasses();
                self._wrapper.addClass(this.options.classes.contentWrapClosed);
                self._fixedToolbar.addClass(this.options.classes.contentFixedToolbarClosed);
                // add class to page so we can set "overflow-x: hidden;" for it to fix Android zoom issue
                self._page.addClass(self.options.classes.pagePanel);

                // if animating, add the class to do so
                if ($.support.cssTransform3d && !! self.options.animate) {
                    this.element.addClass(self.options.classes.animate);
                }

                self._bindUpdateLayout();
                self._bindCloseEvents();
                self._bindLinkListeners();
                self._bindPageEvents();

                if ( !! self.options.dismissible) {
                    self._createModal();
                }

                self._bindSwipeEvents();
            },

            _createModal: function(options) {
                var self = this;

                self._modal = $("<div class='" + self.options.classes.modal + "' data-panelid='" + self._panelID + "'></div>")
                    .on("mousedown", function() {
                        self.close();
                    })
                    .appendTo(this._page);
            },

            _getPosDisplayClasses: function(prefix) {
                return prefix + "-position-" + this.options.position + " " + prefix + "-display-" + this.options.display;
            },

            _getPanelClasses: function() {
                var panelClasses = this.options.classes.panel +
                    " " + this._getPosDisplayClasses(this.options.classes.panel) +
                    " " + this.options.classes.panelClosed;

                if (this.options.theme) {
                    panelClasses += " ui-body-" + this.options.theme;
                }
                if ( !! this.options.positionFixed) {
                    panelClasses += " " + this.options.classes.panelFixed;
                }
                return panelClasses;
            },

            _addPanelClasses: function() {
                this.element.addClass(this._getPanelClasses());
            },

            _bindCloseEvents: function() {
                var self = this;

                self._closeLink.on("click.panel", function(e) {
                    e.preventDefault();
                    self.close();
                    return false;
                });
                self.element.on("click.panel", "a:jqmData(ajax='false')", function(e) {
                    self.close();
                });
            },

            _positionPanel: function() {
                var self = this,
                    panelInnerHeight = self._panelInner.outerHeight(),
                    expand = panelInnerHeight > $.mobile.getScreenHeight();

                if (expand || !self.options.positionFixed) {
                    if (expand) {
                        self._unfixPanel();
                        $.mobile.resetActivePageHeight(panelInnerHeight);
                    }
                    self._scrollIntoView(panelInnerHeight);
                } else {
                    self._fixPanel();
                }
            },

            _scrollIntoView: function(panelInnerHeight) {
                if (panelInnerHeight < $(window).scrollTop()) {
                    window.scrollTo(0, 0);
                }
            },

            _bindFixListener: function() {
                this._on($(window), {
                    "throttledresize": "_positionPanel"
                });
            },

            _unbindFixListener: function() {
                this._off($(window), "throttledresize");
            },

            _unfixPanel: function() {
                if ( !! this.options.positionFixed && $.support.fixedPosition) {
                    this.element.removeClass(this.options.classes.panelFixed);
                }
            },

            _fixPanel: function() {
                if ( !! this.options.positionFixed && $.support.fixedPosition) {
                    this.element.addClass(this.options.classes.panelFixed);
                }
            },

            _bindUpdateLayout: function() {
                var self = this;

                self.element.on("updatelayout", function(e) {
                    if (self._open) {
                        self._positionPanel();
                    }
                });
            },

            _bindLinkListeners: function() {
                var self = this;

                self._page.on("click.panel", "a", function(e) {
                    if (this.href.split("#")[1] === self._panelID && self._panelID !== undefined) {
                        e.preventDefault();
                        var $link = $(this),
                            $parent;
                        if (!$link.hasClass("ui-link")) {
                            // Check if we are in a listview
                            $parent = $link.parent().parent();
                            if ($parent.hasClass("ui-li")) {
                                $link = $parent.parent();
                            }
                            $link.addClass($.mobile.activeBtnClass);
                            self.element.one("panelopen panelclose", function() {
                                $link.removeClass($.mobile.activeBtnClass);
                            });
                        }
                        self.toggle();
                        return false;
                    }
                });
            },

            _bindSwipeEvents: function() {
                var self = this,
                    area = self._modal ? self.element.add(self._modal) : self.element;

                // on swipe, close the panel
                if ( !! self.options.swipeClose) {
                    if (self.options.position === "left") {
                        area.on("swipeleft.panel", function(e) {
                            self.close();
                        });
                    } else {
                        area.on("swiperight.panel", function(e) {
                            self.close();
                        });
                    }
                }
            },

            _bindPageEvents: function() {
                var self = this;

                self._page
                // Close the panel if another panel on the page opens
                .on("panelbeforeopen", function(e) {
                    if (self._open && e.target !== self.element[0]) {
                        self.close();
                    }
                })
                // clean up open panels after page hide
                .on("pagehide", function(e) {
                    if (self._open) {
                        self.close(true);
                    }
                })
                // on escape, close? might need to have a target check too...
                .on("keyup.panel", function(e) {
                    if (e.keyCode === 27 && self._open) {
                        self.close();
                    }
                });
            },

            // state storage of open or closed
            _open: false,

            _contentWrapOpenClasses: null,
            _fixedToolbarOpenClasses: null,
            _modalOpenClasses: null,

            open: function(immediate) {
                if (!this._open) {
                    var self = this,
                        o = self.options,
                        _openPanel = function() {
                            self._page.off("panelclose");
                            self._page.jqmData("panel", "open");

                            if (!immediate && $.support.cssTransform3d && !! o.animate) {
                                self.element.add(self._wrapper).on(self._transitionEndEvents, complete);
                            } else {
                                setTimeout(complete, 0);
                            }

                            if (self.options.theme && self.options.display !== "overlay") {
                                self._page
                                    .removeClass(self._pageTheme)
                                    .addClass("ui-body-" + self.options.theme);
                            }

                            self.element.removeClass(o.classes.panelClosed).addClass(o.classes.panelOpen);

                            self._positionPanel();

                            // Fix for IE7 min-height bug
                            if (self.options.theme && self.options.display !== "overlay") {
                                self._wrapper.css("min-height", self._page.css("min-height"));
                            }

                            self._contentWrapOpenClasses = self._getPosDisplayClasses(o.classes.contentWrap);
                            self._wrapper
                                .removeClass(o.classes.contentWrapClosed)
                                .addClass(self._contentWrapOpenClasses + " " + o.classes.contentWrapOpen);

                            self._fixedToolbarOpenClasses = self._getPosDisplayClasses(o.classes.contentFixedToolbar);
                            self._fixedToolbar
                                .removeClass(o.classes.contentFixedToolbarClosed)
                                .addClass(self._fixedToolbarOpenClasses + " " + o.classes.contentFixedToolbarOpen);

                            self._modalOpenClasses = self._getPosDisplayClasses(o.classes.modal) + " " + o.classes.modalOpen;
                            if (self._modal) {
                                self._modal.addClass(self._modalOpenClasses);
                            }
                        },
                        complete = function() {
                            self.element.add(self._wrapper).off(self._transitionEndEvents, complete);

                            self._page.addClass(o.classes.pagePanelOpen);

                            self._bindFixListener();

                            self._trigger("open");
                        };

                    if (this.element.closest(".ui-page-active").length < 0) {
                        immediate = true;
                    }

                    self._trigger("beforeopen");

                    if (self._page.jqmData('panel') === "open") {
                        self._page.on("panelclose", function() {
                            _openPanel();
                        });
                    } else {
                        _openPanel();
                    }

                    self._open = true;
                }
            },

            close: function(immediate) {
                if (this._open) {
                    var o = this.options,
                        self = this,
                        _closePanel = function() {
                            if (!immediate && $.support.cssTransform3d && !! o.animate) {
                                self.element.add(self._wrapper).on(self._transitionEndEvents, complete);
                            } else {
                                setTimeout(complete, 0);
                            }

                            self._page.removeClass(o.classes.pagePanelOpen);
                            self.element.removeClass(o.classes.panelOpen);
                            self._wrapper.removeClass(o.classes.contentWrapOpen);
                            self._fixedToolbar.removeClass(o.classes.contentFixedToolbarOpen);

                            if (self._modal) {
                                self._modal.removeClass(self._modalOpenClasses);
                            }
                        },
                        complete = function() {
                            if (self.options.theme && self.options.display !== "overlay") {
                                self._page.removeClass("ui-body-" + self.options.theme).addClass(self._pageTheme);
                                // reset fix for IE7 min-height bug
                                self._wrapper.css("min-height", "");
                            }
                            self.element.add(self._wrapper).off(self._transitionEndEvents, complete);
                            self.element.addClass(o.classes.panelClosed);

                            self._wrapper
                                .removeClass(self._contentWrapOpenClasses)
                                .addClass(o.classes.contentWrapClosed);

                            self._fixedToolbar
                                .removeClass(self._fixedToolbarOpenClasses)
                                .addClass(o.classes.contentFixedToolbarClosed);

                            self._fixPanel();
                            self._unbindFixListener();
                            $.mobile.resetActivePageHeight();

                            self._page.jqmRemoveData("panel");
                            self._trigger("close");
                        };

                    if (this.element.closest(".ui-page-active").length < 0) {
                        immediate = true;
                    }
                    self._trigger("beforeclose");

                    _closePanel();

                    self._open = false;
                }
            },

            toggle: function(options) {
                this[this._open ? "close" : "open"]();
            },

            _transitionEndEvents: "webkitTransitionEnd oTransitionEnd otransitionend transitionend msTransitionEnd",

            _destroy: function() {
                var classes = this.options.classes,
                    theme = this.options.theme,
                    hasOtherSiblingPanels = this.element.siblings("." + classes.panel).length;

                // create
                if (!hasOtherSiblingPanels) {
                    this._wrapper.children().unwrap();
                    this._page.find("a").unbind("panelopen panelclose");
                    this._page.removeClass(classes.pagePanel);
                    if (this._open) {
                        this._page.jqmRemoveData("panel");
                        this._page.removeClass(classes.pagePanelOpen);
                        if (theme) {
                            this._page.removeClass("ui-body-" + theme).addClass(this._pageTheme);
                        }
                        $.mobile.resetActivePageHeight();
                    }
                } else if (this._open) {
                    this._wrapper.removeClass(classes.contentWrapOpen);
                    this._fixedToolbar.removeClass(classes.contentFixedToolbarOpen);
                    this._page.jqmRemoveData("panel");
                    this._page.removeClass(classes.pagePanelOpen);
                    if (theme) {
                        this._page.removeClass("ui-body-" + theme).addClass(this._pageTheme);
                    }
                }

                this._panelInner.children().unwrap();

                this.element.removeClass([this._getPanelClasses(), classes.panelAnimate].join(" "))
                    .off("swipeleft.panel swiperight.panel")
                    .off("panelbeforeopen")
                    .off("panelhide")
                    .off("keyup.panel")
                    .off("updatelayout");

                this._closeLink.off("click.panel");

                if (this._modal) {
                    this._modal.remove();
                }

                // open and close
                this.element.off(this._transitionEndEvents)
                    .removeClass([classes.panelUnfixed, classes.panelClosed, classes.panelOpen].join(" "));
            }
        });

        //auto self-init widgets
        $(document).bind("pagecreate create", function(e) {
            $.mobile.panel.prototype.enhanceWithin(e.target);
        });

    })(jQuery);

    (function($, undefined) {

        $.widget("mobile.table", $.mobile.widget, {

            options: {
                classes: {
                    table: "ui-table"
                },
                initSelector: ":jqmData(role='table')"
            },

            _create: function() {
                var self = this;
                self.refresh(true);
            },

            refresh: function(create) {
                var self = this,
                    trs = this.element.find("thead tr");

                if (create) {
                    this.element.addClass(this.options.classes.table);
                }

                // Expose headers and allHeaders properties on the widget
                // headers references the THs within the first TR in the table
                self.headers = this.element.find("tr:eq(0)").children();

                // allHeaders references headers, plus all THs in the thead, which may include several rows, or not
                self.allHeaders = self.headers.add(trs.children());

                trs.each(function() {

                    var coltally = 0;

                    $(this).children().each(function(i) {

                        var span = parseInt($(this).attr("colspan"), 10),
                            sel = ":nth-child(" + (coltally + 1) + ")";
                        $(this)
                            .jqmData("colstart", coltally + 1);

                        if (span) {
                            for (var j = 0; j < span - 1; j++) {
                                coltally++;
                                sel += ", :nth-child(" + (coltally + 1) + ")";
                            }
                        }

                        if (create === undefined) {
                            $(this).jqmData("cells", "");
                        }
                        // Store "cells" data on header as a reference to all cells in the same column as this TH
                        $(this)
                            .jqmData("cells", self.element.find("tr").not(trs.eq(0)).not(this).children(sel));

                        coltally++;

                    });

                });

                // update table modes
                if (create === undefined) {
                    this.element.trigger('refresh');
                }
            }

        });

        //auto self-init widgets
        $.mobile.document.bind("pagecreate create", function(e) {
            $.mobile.table.prototype.enhanceWithin(e.target);
        });

    })(jQuery);


    (function($, undefined) {

        $.mobile.table.prototype.options.mode = "columntoggle";

        $.mobile.table.prototype.options.columnBtnTheme = null;

        $.mobile.table.prototype.options.columnPopupTheme = null;

        $.mobile.table.prototype.options.columnBtnText = "Columns...";

        $.mobile.table.prototype.options.classes = $.extend(
            $.mobile.table.prototype.options.classes, {
                popup: "ui-table-columntoggle-popup",
                columnBtn: "ui-table-columntoggle-btn",
                priorityPrefix: "ui-table-priority-",
                columnToggleTable: "ui-table-columntoggle"
            }
        );

        $.mobile.document.delegate(":jqmData(role='table')", "tablecreate refresh", function(e) {

            var $table = $(this),
                self = $table.data("mobile-table"),
                event = e.type,
                o = self.options,
                ns = $.mobile.ns,
                id = ($table.attr("id") || o.classes.popup) + "-popup",
                /* TODO BETTER FALLBACK ID HERE */
                $menuButton,
                $popup,
                $menu,
                $switchboard;

            if (o.mode !== "columntoggle") {
                return;
            }

            if (event !== "refresh") {
                self.element.addClass(o.classes.columnToggleTable);

                $menuButton = $("<a href='#" + id + "' class='" + o.classes.columnBtn + "' data-" + ns + "rel='popup' data-" + ns + "mini='true'>" + o.columnBtnText + "</a>"),
                $popup = $("<div data-" + ns + "role='popup' data-" + ns + "role='fieldcontain' class='" + o.classes.popup + "' id='" + id + "'></div>"),
                $menu = $("<fieldset data-" + ns + "role='controlgroup'></fieldset>");
            }

            // create the hide/show toggles
            self.headers.not("td").each(function(i) {

                var priority = $(this).jqmData("priority"),
                    $cells = $(this).add($(this).jqmData("cells"));

                if (priority) {

                    $cells.addClass(o.classes.priorityPrefix + priority);

                    if (event !== "refresh") {
                        $("<label><input type='checkbox' checked />" + $(this).text() + "</label>")
                            .appendTo($menu)
                            .children(0)
                            .jqmData("cells", $cells)
                            .checkboxradio({
                                theme: o.columnPopupTheme
                            });
                    } else {
                        $('#' + id + ' fieldset div:eq(' + i + ')').find('input').jqmData('cells', $cells);
                    }
                }
            });

            if (event !== "refresh") {
                $menu.appendTo($popup);
            }

            // bind change event listeners to inputs - TODO: move to a private method?
            if ($menu === undefined) {
                $switchboard = $('#' + id + ' fieldset');
            } else {
                $switchboard = $menu;
            }

            if (event !== "refresh") {
                $switchboard.on("change", "input", function(e) {
                    if (this.checked) {
                        $(this).jqmData("cells").removeClass("ui-table-cell-hidden").addClass("ui-table-cell-visible");
                    } else {
                        $(this).jqmData("cells").removeClass("ui-table-cell-visible").addClass("ui-table-cell-hidden");
                    }
                });

                $menuButton
                    .insertBefore($table)
                    .buttonMarkup({
                        theme: o.columnBtnTheme
                    });

                $popup
                    .insertBefore($table)
                    .popup();
            }

            // refresh method
            self.update = function() {
                $switchboard.find("input").each(function() {
                    if (this.checked) {
                        this.checked = $(this).jqmData("cells").eq(0).css("display") === "table-cell";
                        if (event === "refresh") {
                            $(this).jqmData("cells").addClass('ui-table-cell-visible');
                        }
                    } else {
                        $(this).jqmData("cells").addClass('ui-table-cell-hidden');
                    }
                    $(this).checkboxradio("refresh");
                });
            };

            $.mobile.window.on("throttledresize", self.update);

            self.update();

        });

    })(jQuery);

    (function($, undefined) {

        $.mobile.table.prototype.options.mode = "reflow";

        $.mobile.table.prototype.options.classes = $.extend(
            $.mobile.table.prototype.options.classes, {
                reflowTable: "ui-table-reflow",
                cellLabels: "ui-table-cell-label"
            }
        );

        $.mobile.document.delegate(":jqmData(role='table')", "tablecreate refresh", function(e) {

            var $table = $(this),
                event = e.type,
                self = $table.data("mobile-table"),
                o = self.options;

            // If it's not reflow mode, return here.
            if (o.mode !== "reflow") {
                return;
            }

            if (event !== "refresh") {
                self.element.addClass(o.classes.reflowTable);
            }

            // get headers in reverse order so that top-level headers are appended last
            var reverseHeaders = $(self.allHeaders.get().reverse());

            // create the hide/show toggles
            reverseHeaders.each(function(i) {
                var $cells = $(this).jqmData("cells"),
                    colstart = $(this).jqmData("colstart"),
                    hierarchyClass = $cells.not(this).filter("thead th").length && " ui-table-cell-label-top",
                    text = $(this).text();

                if (text !== "") {

                    if (hierarchyClass) {
                        var iteration = parseInt($(this).attr("colspan"), 10),
                            filter = "";

                        if (iteration) {
                            filter = "td:nth-child(" + iteration + "n + " + (colstart) + ")";
                        }
                        $cells.filter(filter).prepend("<b class='" + o.classes.cellLabels + hierarchyClass + "'>" + text + "</b>");
                    } else {
                        $cells.prepend("<b class='" + o.classes.cellLabels + "'>" + text + "</b>");
                    }

                }
            });

        });

    })(jQuery);

    (function($, window) {

        $.mobile.iosorientationfixEnabled = true;

        // This fix addresses an iOS bug, so return early if the UA claims it's something else.
        var ua = navigator.userAgent;
        if (!(/iPhone|iPad|iPod/.test(navigator.platform) && /OS [1-5]_[0-9_]* like Mac OS X/i.test(ua) && ua.indexOf("AppleWebKit") > -1)) {
            $.mobile.iosorientationfixEnabled = false;
            return;
        }

        var zoom = $.mobile.zoom,
            evt, x, y, z, aig;

        function checkTilt(e) {
            evt = e.originalEvent;
            aig = evt.accelerationIncludingGravity;

            x = Math.abs(aig.x);
            y = Math.abs(aig.y);
            z = Math.abs(aig.z);

            // If portrait orientation and in one of the danger zones
            if (!window.orientation && (x > 7 || ((z > 6 && y < 8 || z < 8 && y > 6) && x > 5))) {
                if (zoom.enabled) {
                    zoom.disable();
                }
            } else if (!zoom.enabled) {
                zoom.enable();
            }
        }

        $.mobile.document.on("mobileinit", function() {
            if ($.mobile.iosorientationfixEnabled) {
                $.mobile.window
                    .bind("orientationchange.iosorientationfix", zoom.enable)
                    .bind("devicemotion.iosorientationfix", checkTilt);
            }
        });

    }(jQuery, this));

    (function($, window, undefined) {
        var $html = $("html"),
            $head = $("head"),
            $window = $.mobile.window;

        //remove initial build class (only present on first pageshow)
        function hideRenderingClass() {
            $html.removeClass("ui-mobile-rendering");
        }

        // trigger mobileinit event - useful hook for configuring $.mobile settings before they're used
        $(window.document).trigger("mobileinit");

        // support conditions
        // if device support condition(s) aren't met, leave things as they are -> a basic, usable experience,
        // otherwise, proceed with the enhancements
        if (!$.mobile.gradeA()) {
            return;
        }

        // override ajaxEnabled on platforms that have known conflicts with hash history updates
        // or generally work better browsing in regular http for full page refreshes (BB5, Opera Mini)
        if ($.mobile.ajaxBlacklist) {
            $.mobile.ajaxEnabled = false;
        }

        // Add mobile, initial load "rendering" classes to docEl
        $html.addClass("ui-mobile ui-mobile-rendering");

        // This is a fallback. If anything goes wrong (JS errors, etc), or events don't fire,
        // this ensures the rendering class is removed after 5 seconds, so content is visible and accessible
        setTimeout(hideRenderingClass, 5000);

        $.extend($.mobile, {
            // find and enhance the pages in the dom and transition to the first page.
            initializePage: function() {
                // find present pages
                var path = $.mobile.path,
                    $pages = $(":jqmData(role='page'), :jqmData(role='dialog')"),
                    hash = path.stripHash(path.stripQueryParams(path.parseLocation().hash)),
                    hashPage = document.getElementById(hash);

                // if no pages are found, create one with body's inner html
                if (!$pages.length) {
                    $pages = $("body").wrapInner("<div data-" + $.mobile.ns + "role='page'></div>").children(0);
                }

                // add dialogs, set data-url attrs
                $pages.each(function() {
                    var $this = $(this);

                    // unless the data url is already set set it to the pathname
                    if (!$this.jqmData("url")) {
                        $this.attr("data-" + $.mobile.ns + "url", $this.attr("id") || location.pathname + location.search);
                    }
                });

                // define first page in dom case one backs out to the directory root (not always the first page visited, but defined as fallback)
                $.mobile.firstPage = $pages.first();

                // define page container
                $.mobile.pageContainer = $.mobile.firstPage.parent().addClass("ui-mobile-viewport");

                // initialize navigation events now, after mobileinit has occurred and the page container
                // has been created but before the rest of the library is alerted to that fact
                $.mobile.navreadyDeferred.resolve();

                // alert listeners that the pagecontainer has been determined for binding
                // to events triggered on it
                $window.trigger("pagecontainercreate");

                // cue page loading message
                $.mobile.showPageLoadingMsg();

                //remove initial build class (only present on first pageshow)
                hideRenderingClass();

                // if hashchange listening is disabled, there's no hash deeplink,
                // the hash is not valid (contains more than one # or does not start with #)
                // or there is no page with that hash, change to the first page in the DOM
                // Remember, however, that the hash can also be a path!
                if (!($.mobile.hashListeningEnabled &&
                    $.mobile.path.isHashValid(location.hash) &&
                    ($(hashPage).is(':jqmData(role="page")') ||
                        $.mobile.path.isPath(hash) ||
                        hash === $.mobile.dialogHashKey))) {

                    // Store the initial destination
                    if ($.mobile.path.isHashValid(location.hash)) {
                        $.mobile.urlHistory.initialDst = hash.replace("#", "");
                    }

                    // make sure to set initial popstate state if it exists
                    // so that navigation back to the initial page works properly
                    if ($.event.special.navigate.isPushStateEnabled()) {
                        $.mobile.navigate.navigator.squash(path.parseLocation().href);
                    }

                    $.mobile.changePage($.mobile.firstPage, {
                        transition: "none",
                        reverse: true,
                        changeHash: false,
                        fromHashChange: true
                    });
                } else {
                    // trigger hashchange or navigate to squash and record the correct
                    // history entry for an initial hash path
                    if (!$.event.special.navigate.isPushStateEnabled()) {
                        $window.trigger("hashchange", [true]);
                    } else {
                        // TODO figure out how to simplify this interaction with the initial history entry
                        // at the bottom js/navigate/navigate.js
                        $.mobile.navigate.history.stack = [];
                        $.mobile.navigate($.mobile.path.isPath(location.hash) ? location.hash : location.href);
                    }
                }
            }
        });

        // check which scrollTop value should be used by scrolling to 1 immediately at domready
        // then check what the scroll top is. Android will report 0... others 1
        // note that this initial scroll won't hide the address bar. It's just for the check.
        $(function() {
            window.scrollTo(0, 1);

            // if defaultHomeScroll hasn't been set yet, see if scrollTop is 1
            // it should be 1 in most browsers, but android treats 1 as 0 (for hiding addr bar)
            // so if it's 1, use 0 from now on
            $.mobile.defaultHomeScroll = (!$.support.scrollTop || $.mobile.window.scrollTop() === 1) ? 0 : 1;

            //dom-ready inits
            if ($.mobile.autoInitializePage) {
                $.mobile.initializePage();
            }

            // window load event
            // hide iOS browser chrome on load
            $window.load($.mobile.silentScroll);

            if (!$.support.cssPointerEvents) {
                // IE and Opera don't support CSS pointer-events: none that we use to disable link-based buttons
                // by adding the 'ui-disabled' class to them. Using a JavaScript workaround for those browser.
                // https://github.com/jquery/jquery-mobile/issues/3558

                $.mobile.document.delegate(".ui-disabled", "vclick",
                    function(e) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                    }
                );
            }
        });
    }(jQuery, this));


}));;var webServiceURL = 'http://bip.websearchpro.net/index.php/minapp/api/';
// var webServiceURL = 'http://bip.local/index.php/minapp/api/';

var webServiceURLProxy = "";
var IsInternetExplorer = false;

var webServiceCallStack = [];

function callWebService(webmethodname, json, callback, completeCallback,showloader) {
    completeCallback = completeCallback || $.noop;
    console.log(showloader);
    if(showloader==undefined)
       // $.mobile.showPageLoadingMsg("");
    
    
        switch(webmethodname){
            case 'validateuser':
                console.log("Going to validate user");
                offlinehelper.ValidateUser(json,callback);
                break;
            case 'activeTasks':
                console.log("Going to Get active tasks"); 
                offlinehelper.activeTasks(json,callback);
                break;  
            case 'getOldTrainings':
                console.log("Going to Get old trainings");  
                offlinehelper.getOldTrainings(json,callback);
                break;  
            case 'GetActivityperweek':
                console.log("Going to Get old trainings");  
                offlinehelper.GetActivityperweek(json,callback);
                break;     
                case 'GetActivityperday':
                console.log("Going to Get old trainings");  
                offlinehelper.GetActivityperday(json,callback);
                break;    
            case 'Getestimatesfromstart':
                console.log("Going to Get Getestimatesfromstart");  
                offlinehelper.Getestimatesfromstart(json,callback);
                break;   
            case 'saveTraining':
                var response={status:'ok'};
                console.log(json);
                offlinehelper.saveTraining(json,callback);
                console.log("Going to Save training");  

                callback(response);
                break;  
            case 'saveReviewedTraining':
                var response={status:'ok'};
              
                console.log(json);
                offlinehelper.saveReviewedTraining(json,callback);
                console.log("Going to Save training");  
                callback(response);
                break;   
            case 'saveReminder':
                var response={status:'ok'};
              
                console.log(json);
                offlinehelper.saveReminder(json,callback);
                console.log("Going to Save training");  
                callback(response);
                break;   
            case 'fetchRegistrations':
                var response={status:'ok'};
              
                console.log(json);
                offlinehelper.fetchRegistrations(json,callback);
                console.log("Going to fetch registrations");  
                callback(response);
                break;   
            case 'fetchRegistrationSteps':
                var response={status:'ok'};
              
                console.log(json);
                offlinehelper.fetchRegistrationSteps(json,callback);
                console.log("Going to fetch registrations");  
               
                break;  
            case 'fetchHomeworks':
                var response={status:'ok'};
                offlinehelper.fetchHomeworks(json,callback);
                console.log("Going to fetch registrations");  
               
                break;
            case 'checkModulesEnabled':  
                var response={status:'ok'};
                offlinehelper.checkModulesEnabled(json,callback);
                console.log("Going to check enabled modules");  
               
            case 'fetchCrisisplans':
                var response={status:'ok'};
              
                console.log(json);
                offlinehelper.fetchCrisisplans (json,callback);
                console.log("Going to fetch registrations");  
               
                break;  
            case 'markHomeworkRead':
                var response={status:'ok'};
              
                console.log(json);
                offlinehelper.markHomeworkRead(json,callback);
                console.log("Going to fetch registrations");  
               
                break;   
            case 'markCrisisplanRead':
                var response={status:'ok'};
              
                console.log(json);
                offlinehelper.markCrisisplanRead(json,callback);
                console.log("Going to fetch registrations");  
               
                break;
            case 'listModules':
                var response = {status: 'ok'};
                offlinehelper.listModules(json,callback);
                console.log("fetching and listing modules");
                break;
            case 'checkIfModuleHasSkills':
                var response = {status: 'ok'};
                offlinehelper.checkIfModuleHasSkills(json,callback);
                console.log("checking what types of skills available for the module.");
                break;
            case 'listSkillsItems':
                var response = {status: 'ok'};
                offlinehelper.listSkillsItems(json,callback);
                console.log("Listing the skills");
                break;
            case 'getSKillDetails':
                var response = {status: 'ok'};
                offlinehelper.getSKillDetails(json,callback);
                console.log("Getting detail of selected skill whether it be skill, thoughts or exposure");
                break;
            case 'feelingStatistics':
                var response = {status: 'ok'};
                offlinehelper.feelingStatistics(json,callback);
                console.log("Fetching feeling Statistics");
                break;
            case 'feelingLists':
                var response = {status: 'ok'};
                offlinehelper.feelingLists(json,callback);
                console.log("Fetching feelings with its details");
                break;
            case 'showFeelingDefinitions':
                 var response = {status: 'ok'};
                offlinehelper.showFeelingDefinitions(json,callback);
                console.log("Fetching feelings definitions");
                break;
            case 'fetchExposureSteps':
                var response = {status: 'ok'};
                offlinehelper.fetchExposureSkillsSteps("exposure",json, callback);
                console.log("Fetching exposure steps");
                break;
            case 'fetchSkillsSteps':
                var response = {status: 'ok'};
                offlinehelper.fetchExposureSkillsSteps("skills",json, callback);
                console.log("Fetching skills steps");
                break;
            default:
                console.log(webmethodname+" is not found. Invalid webservice name");

        }

    
    return;
}


function callWebServiceLive(webmethodname, json, callback, completeCallback,showloader) {

    // sqlhelper.db.transaction(function(tx,json) {
    //     tx.executeSql("SELECT * FROM tbl_user WHERE app_user_id = ?", [json.app_user_id], function(tx,res){
    //         console.log('Record count (expected to be 13): ');
    //     });
    // }, function(err){
    //     alert(err.message);
    // });    
   
    completeCallback = completeCallback || $.noop;
    // console.log(showloader);
    if(showloader==undefined)
        $.mobile.showPageLoadingMsg("");
    

    
    // var checdata=sqlhelper.checkLocal(webmethodname,json,function(data){

    //     if(data!=false){

    //     }else{
                var req = $.ajax({
                        url: ((IsInternetExplorer) ? webServiceURLProxy : webServiceURL) + webmethodname,
                        type: 'POST',
                        //dataType: 'json',
                        data: json,
                        //contentType: 'application/json; charset=utf-8',
                        //headers: { "cache-control": "no-cache" },
                        success: function(response) {
                           // console.log(response);
                            if (response) {

                               
                                response = $.parseJSON(response); // Remove once in mobile
                                if (response.data === "NotAuthorized") {
                                    //msgBox('Your session has been expired. Please login again!');
                                    gotoLoginPage();
                                    return;
                                }
                                if (callback) {
                                    callback(response);
                                }
                            } else {
                                callback(null);
                            }
                        
                        },
                        error: function(xhr, message) {
                          //  showalert("Ingen internetuppkoppling");
                           /* if (message !== 'abort')
                                msgBox(MESSAGE.NO_INTERNET);*/

                            offlinehelper.syncstarted=false;
                            $.mobile.hidePageLoadingMsg();
                        },
                        complete: function(xhr) {
                            //Remove from callstack
                            webServiceCallStack = $.grep(webServiceCallStack, function(val) {
                                return val !== xhr;
                            });
                            completeCallback();
                            //console.log(webServiceCallStack);
                        }
                    });

    //     }
       
    // });
  
   
    return;
}


//this method doesnt give any type of error if webservice is not available i.e error part is commented out
function callWebServiceLiveSilently(webmethodname, json, callback, completeCallback,showloader) {
   
    completeCallback = completeCallback || $.noop;
    console.log(showloader);
    if(showloader==undefined)
        $.mobile.showPageLoadingMsg("");
    
    // var checdata=sqlhelper.checkLocal(webmethodname,json,function(data){

    //     if(data!=false){

    //     }else{
   // console.log("Checking if app is running for first time");
    //offlinehelper.checkFirstTime();
    var req = $.ajax({
            url: ((IsInternetExplorer) ? webServiceURLProxy : webServiceURL) + webmethodname,
            type: 'POST',
            data: json,
            //contentType: 'application/json; charset=utf-8',
            //headers: { "cache-control": "no-cache" },
            success: function(response) {
               // console.log(response);
                if (response) {

                   response.webservicename=webmethodname;
                    response = $.parseJSON(response); // Remove once in mobile
                    if (response.data === "NotAuthorized") {
                        //msgBox('Your session has been expired. Please login again!');
                        gotoLoginPage();
                        return;
                    }
                    if (callback) {
                        callback(response,webmethodname);
                    }
                } else {
                    callback(null,webmethodname);
                }
                if(showloader==undefined)
                    $.mobile.hidePageLoadingMsg();
            },
            error: function(xhr, message) {
              // //  showalert("Ingen internetuppkoppling");
              //   if (message !== 'abort')
              //       msgBox(MESSAGE.NO_INTERNET);
              //   $.mobile.hidePageLoadingMsg();
              $.mobile.hidePageLoadingMsg();
            },
            complete: function(xhr) {
                //Remove from callstack
                webServiceCallStack = $.grep(webServiceCallStack, function(val) {
                    return val !== xhr;
                });
                completeCallback();
                //console.log(webServiceCallStack);
            }
        });

  
   
    return;
}


function callWebServicewithImage(webmethodname, json, callback) {
    $.mobile.showPageLoadingMsg('a', fnGetValue('Page_LoadingMsg'), false);
    if (imgui !== null) {
        var options = new FileUploadOptions();
        options.fileKey = "file";
        options.mimeType = "image/jpeg";
        options.chunkedMode = false;
        var params = new Object();
        params.jsonString = json;
        options.params = params;

        var ft = new FileTransfer();
        //alert('imageURI = ' + imgui);
        ft.upload(imgui, webServiceURL + webmethodname, callback, fail, options);
        //$.mobile.hidePageLoadingMsg();
    } else {
        callWebService(webmethodname, json, callback);
    }
}

function fail(error) {
    $.mobile.hidePageLoadingMsg();
    msgBox("FileErrorCode=" + error.code);
}

function ClearWebServiceCallStack() {
    $.each(webServiceCallStack, function(i) {
        var req = webServiceCallStack[i]
        if (req && req.abort) {
            req.abort();
        }
    });

    webServiceCallStack = [];
}
;/********* Task Related Functions  ---- Training List page--******/
var sqlhelper = {
    db:0,
  //  fields:"",
   // dataValues:"",
    initiateDatabase:function(response,success){
      console.log("Initiating database");
     // username =$("#txtEmail").val().trim();
    // pass=$("#txtPwd").val().trim();
      if(window.cordova && IsIDevice){
        db = window.sqlitePlugin.openDatabase({name: "bip.sqlite", key: '4h%v!hMJiXgK',location: 'default',androidDatabaseImplementation:2,androidLockWorkaround: 1});
        sqlhelper.db = window.sqlitePlugin.openDatabase({name: "bip.sqlite", key: '4h%v!hMJiXgK',location: 'default',androidDatabaseImplementation:2,androidLockWorkaround: 1});  
      }else{
        sqlhelper.db = window.openDatabase("bip.sqlite", '1', 'my', 1024 * 1024 * 100); // browser
      }
      
     // console.log(sqlhelper.db);
//      sqlhelper.initiateTables(db)
    },
    initiateTables:function(db){

      //Selecting rowid gives you autoincremented value hence no need for primary key
          db.transaction(function(tx) {
          
   
            var tabledata = {
                'tablename':'tbl_user',
                'fielddatas': [
                    {
                      "field": "user_id",
                      "datatype": "integer",
                      "primary_key": 0
                    },
                    {
                      "field": "username",
                      "datatype": "text",
                      "primary_key": 0
                    },
                    {
                      "field": "password",
                      "datatype": "text",
                      "primary_key": 0
                    },
                    {
                      "field": "fullname",
                      "datatype": "integer",
                      "primary_key": 0
                    },
                    {
                      "field": "new_start_page",
                      "datatype": "integer",
                      "primary_key": 0
                    },
                    {
                      "field": "enable_msg_alert ",
                      "datatype": "integer",
                      "primary_key": 0
                    },
                    {
                      "field": "training",
                      "datatype": "integer",
                      "primary_key": 0
                    },
                    {
                      "field": "hasRegistrations",
                      "datatype": "integer",
                      "primary_key": 0
                    },
                    {
                      "field": "homeworks",
                      "datatype": "text",
                      "primary_key": 0
                    },
                    {
                      "field": "lastSyncedDate",
                      "datatype": "text",
                      "primary_key": 0
                    },
                    {
                      "field": "reminder",
                      "datatype": "text",
                      "primary_key": 0
                    },
                    {
                      "field": "feedbackMessage",
                      "datatype": "text",
                      "primary_key": 0
                    }
                    
                ]
            };
          sqlhelper.CreateTable(tx,'tbl_user',fields);




          var tabledata = {
                'tablename':'tbl_tasks',
                'fielddatas': [
                    {
                      "field": "task_id",
                      "datatype": "integer",
                      "primary_key": 1
                    },
                     {
                      "field": "task_tag",
                      "datatype": "text",
                      "primary_key": 0
                    },
                     {
                      "field": "task_heading",
                      "datatype": "text",
                      "primary_key":0
                    },
                     {
                      "field": "task_hide_graph",
                      "datatype": "integer",
                      "primary_key": 0
                    }
                    
                ]
            };
          
          sqlhelper.CreateTable(tx,'tbl_user',fields);
          
          var tabledata = {
                'tablename':'tbl_training',
                'fielddatas': [
                   
                     {
                      "field": "task_id",
                      "datatype": "text",
                      "primary_key": 0
                    },
                     {
                      "field": "trainingDateTime",
                      "datatype": "text",
                      "primary_key": 0
                    },
                     {
                      "field": "estimatedValue",
                      "datatype": "text",
                      "primary_key": 0
                    },,
                     {
                      "field": "estimatedValueEnd",
                      "datatype": "integer",
                      "primary_key": 0
                    },
                     {
                      "field": "trainingDuration",
                      "datatype": "text",
                      "primary_key": 0
                    },
                     {
                      "field": "type",
                      "datatype": "text",
                      "primary_key": 0
                    },
                     {
                      "field": "comment",
                      "datatype": "text",
                      "primary_key": 0
                    },
                     {
                      "field": "edited",
                      "datatype": "integer",
                      "primary_key": 0
                    }
                    
                ]
            };
          
          sqlhelper.CreateTable(tx,'tbl_training',fields);

           //tx.executeSql('CREATE TABLE IF NOT EXISTS tbl_user (user_id integer primary key,user_server_id integer, username text, password text)');
      });

    },
    CreateTable:function(tabledata,success) {
     var fields=sqlhelper.generateFields(tabledata.fielddatas);
   //  console.log(fields);
      sqlhelper.db.transaction(function(tx) {
          tx.executeSql('CREATE TABLE IF NOT EXISTS '+tabledata.tablename+fields);
          success("true");
      });
     
    },
      insertData:function(tablename,field,data){
        //  console.log(tablename+" " +field)
          sqlhelper.db.transaction(function(tx) {
            var sqlquery='INSERT INTO '+tablename+' ('+field+') values('+data+')';
             
             tx.executeSql(sqlquery,[],function(){ console.log('Success'); },sqlhelper.errorCB);
              
          });

    },
    insertJSONDataFirstSync:function(tablename,data,callback, errorCallback){ //method added by sabin 
          var dfrd = $.Deferred();
          var fields=sqlhelper.separateFieldData(data,"field");
          var dataval=sqlhelper.separateFieldData(data,"value");
          sqlhelper.db.transaction(function(tx) {
            var sqlquery='INSERT INTO '+tablename+' ('+fields+') values('+dataval+')';
           
             tx.executeSql(sqlquery,[],function(tx, result){
              dfrd.resolve(result);
              
              if(callback!=undefined){
                  callback(result);
              }
              
            },function(tx,e){
                if(errorCallback!=undefined){
                    errorCallback();
                }
            });
             
          });
          return dfrd.promise();
    },
    insertJSONData:function(tablename,data,callback){
          var fields=sqlhelper.separateFieldData(data,"field");
          var dataval=sqlhelper.separateFieldData(data,"value");
          sqlhelper.db.transaction(function(tx) {
            var sqlquery='INSERT INTO '+tablename+' ('+fields+') values('+dataval+')';
           // console.log(sqlquery);
             tx.executeSql(sqlquery,[],function(){ 
              console.log('Success'); 
            },sqlhelper.errorCB);
              if(callback!=undefined){
                callback();
              }
          });

    }, 
    separateFieldData:function(data,rettype){

        var f="";
        var d="";

        for(fields in data){
            if(f!="")
              f+=",";
            if(d!="")
              d+=",";

            f+=fields;
            d+="'"+data[fields]+"'";

        }

        if(rettype=='field')
          return f;
        else
          return d;
    },
    updateData:function(tablename,data,callback){
           // console.log(tablename+" " +field)
            var dataval=sqlhelper.generateUpdateFields(data.fields);
            var where=sqlhelper.generateUpdateFields(data.where);
            //console.log(dataval);
            sqlhelper.db.transaction(function(tx) {
                var sqlquery="Update "+tablename+" set "+dataval+" where "+where;
                //console.log(sqlquery);
                 tx.executeSql(sqlquery,[],function(){ 
                     if(callback!=undefined){
                        callback();
                      }
                  },sqlhelper.errorCB);
                 
            }); 
           

    },
    updateDatabase:function(tablename,data,callback){
           // console.log(tablename+" " +field)
            var dataval=sqlhelper.generateUpdateFields(data.fields);
            var where=sqlhelper.generateUpdateCondition(data.where);
            console.log(dataval);
            sqlhelper.db.transaction(function(tx) {
                var sqlquery="Update "+tablename+" set "+dataval+" where "+where;
               // console.log(sqlquery);
                 tx.executeSql(sqlquery,[],function(){ 
                     if(callback!=undefined){
                        callback();
                      }
                  },sqlhelper.errorCB);
                 
            }); 
           

    },
    deleteData:function(tablename,data,callback){
           // console.log(tablename+" " +field)
            var where=sqlhelper.generateUpdateFields(data.where);
            sqlhelper.db.transaction(function(tx) {
                var sqlquery="DELETE FROM "+tablename+" where "+where;
                if(tablename=="tbl_patient_assignment_details"){
                  //console.warn(sqlquery);
                }
                 tx.executeSql(sqlquery,[],function(){ 
                     if(callback!=undefined){
                        callback();
                      }
                  },sqlhelper.errorCB);
                 
            }); 
           

    },
    generateUpdateFields:function(data){

        var d="";

        for(fields in data){
            if(d!="")
              d+=",";

           
            d+=fields+"='"+data[fields]+"'";

        }
        
        return d;

    },
    generateUpdateCondition:function(data){

        var d="";

        for(fields in data){
            if(d!="")
              d+=" AND ";

           
            d+=fields+"='"+data[fields]+"'";

        }
        
        return d;

    }, 
    generateFields:function(fields){

        var fieldstr="(";

          for(i=0;i<fields.length;i++){
            if(i!=0)
                fieldstr+=",";
              if(fields[i].primary_key==1)
                fieldstr+=fields[i].field+" "+fields[i].datatype +" primary key autoincrement";
              else
                fieldstr+=fields[i].field+" "+fields[i].datatype;
          }
          fieldstr+=")";
        return  fieldstr;

    },
     getFromDB:function(tablename,success) {
        
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql("SELECT * from "+tablename+";", [], success, sqlhelper.errorCB);
            
        });
      
    },
    // form the query
    queryDB:function(tx,tablename) {
      tx.executeSql("SELECT * from "+tablename+";", [], querySuccess, errorCB);
    },
    // Display the results
    querySuccess:function(tx, results) {
       var len = results.rows.length; 
        console.log(results);
    },
    // Transaction error callback
    errorCB:function (err) {
      //console.warn(err);
      //console.warn("Error processing SQL: " + err.code);
    },
    // Success error callback
    successCB:function () {
    },
    dropTables:function(tables){
        if(tables.length>0){
            sqlhelper.db.transaction(function(tx) {
                for(var k=0; k<tables.length;k++){
                    tx.executeSql("DROP TABLE "+tables[k]+";", [], function(){}, sqlhelper.errorCB);
                }
                
            });
        }
    },
    clearAllData: function(tables){
       if(window.sqlitePlugin!=undefined){
          localStorage.clear();
          $.jStorage.flush();
          // window.sqlitePlugin.deleteDatabase("bip.sqlite",location: 'default');
          window.sqlitePlugin.deleteDatabase({name: 'bip.sqlite', location: 'default'},function(){
              console.log("Successfully deleted database");
          }, function(){
              console.log("Error while delete database");
          });
          msgBox("Appen är tömd på data..");
          var rel = setTimeout(function(){
              location.reload();
              clearTimeout(rel);
          },1000);

       }else{
           if(tables.length>0){
                var d = 1;
                try{
                    sqlhelper.db.transaction(function(tx) {
                        var k;
                        for(k=0; k<tables.length;k++){

                            tx.executeSql("DROP TABLE "+tables[k]+";", [], function(){
                                //console.warn("Value of d = "+d+", total tables = "+tables.length);
                                if(d==tables.length){
                                    localStorage.clear();
                                    $.jStorage.flush();
                                    location.reload();
                                    msgBox("Appen är tömd på data");
                                }
                                d++;
                            }, sqlhelper.errorCB);
                        }
                        //console.warn("value of d outside executesql = "+d);
                        if(d==tables.length){
                            //console.warn("Matches total");
                        }
                    });
                }catch(e){
                    localStorage.clear();
                    $.jStorage.flush();
                    location.reload();
                    msgBox("Appen är tömd på data");
                }
            }else{
                localStorage.clear();
                $.jStorage.flush();
                location.reload();
                msgBox("Appen är tömd på data.");
            }
      }
    },
    silentClear: function(){
       if(window.sqlitePlugin!=undefined){
          localStorage.clear();
          $.jStorage.flush();
          // window.sqlitePlugin.deleteDatabase("bip.sqlite",location: 'default');
          window.sqlitePlugin.deleteDatabase({name: 'bip.sqlite', location: 'default'});
       }
    }
};



// $('#review_rating_1_1 select').on('focus', valueReviewFocused);
// $('#review_rating_2_2 select').on('focus', valueReviewFocused);
// $('#review_rating_2_4 select').on('focus', valueReviewFocused);

// $('#review_rating_1_1 select').on('blur', valueReviewBlurred);
// $('#review_rating_2_2 select').on('blur', valueReviewBlurred);
// $('#review_rating_2_4 select').on('blur', valueReviewBlurred);


//$('#tidigare_review').off('click', '.bip_edit', onBipReviewEdit);
;/********* Task Related Functions  ---- Training List page--*****sdfasdfasdfasdf*/
var offlinehelper = {
    count: 0,
    syncstarted: false,
    currentpage: "",
    synctime: 0,
    offlineInterval: 0,
    hidealert: false,
    registrationsync: false,
    othermodulessynced: false,
    isSelfHarm: true,
    trainingsycn: false,
    loginstarted: false,
    syncInterval: 0,
    syncIntervalOnRegistration: 0,
    datafetched: true,
    responseDataTextChunk: {},
    EnabledModules: {},
    createdTables: [],
    synccomplete: 0,
    isLoggedOut: false,
    registrationSaveCount: 0, //Used while saving registartion

    dataForServer: {
        'training': [],
        'Registraion': {
            'answers': [],
            'answercat': [],
            'patientAssignment': [],
            'patientAssignmentDetail': [],
            'crisisplan': [],
            'homework_assignment': []
        },
        'other_modules': {
            'feelingAssignments': [],
            'thoughtAssignments': [],
            'exposureAssignments': [],
            'skillAssignments': []
        }
    },
    checkFirstTime: function(success) {
        sqlhelper.initiateDatabase();
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql("SELECT * from tbl_user;", [], function(txs, results) {

                console.log("Result data length is " + results.rows.length);
                console.log('existing app user',results.rows.item(0).tokenkey);
                $.jStorage.set('bip_jwt',results.rows.item(0).tokenkey)

                if (results != undefined && results.rows != undefined && results.rows.length > 0) {
                    console.log("App is not running for first time");
                    success(false);
                } else {

                    if (navigator.onLine == true) {
                        offlinehelper.initiateDatabase(function() {
                            success(true);
                        });
                        console.log("App is running for first time. Create all necessary tables");
                    } else {
                        console.log("App is running for first time but device is offline.");
                        success("error");

                    }
                    // sqlhelper.initiateTables();
                }
            }, function(error) {
                //First time user
                console.log("error " + error);
                if (navigator.onLine == true) {
                    offlinehelper.initiateDatabase(function() {
                        success(true);
                    });
                    console.log("App is running for first time. Create all necessary tables");

                } else {
                    console.log("App is running for first time but device is offline.");
                    success("error");

                }
                // sqlhelper.initiateTables();

            });
        });
    },

    initiateDatabase: function(success) {
        $(".download-content-msg").show();
        $(".download-overlay").show();
        //console.warn("DATABASE INITIALIZATION START");
        //Version 1 tables structure
        var tabledata = {
            'tablename': 'tbl_user',
            'fielddatas': [{
                    "field": "app_user_id",
                    "datatype": "integer",
                    "primary_key": 1
                }, {
                    "field": "tokenkey",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "user_id",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "username",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "password",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "fullname",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "new_start_page",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "enable_msg_alert",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "stage_number",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "training",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "hasRegistrations",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "homeworks",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "lastSyncedDate2",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "reminders",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "feedbackMessage",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "crisisplans",
                    "datatype": "text",
                    "primary_key": 0

                }, {
                    "field": "specialAnswers",
                    "datatype": "text",
                    "primary_key": 0

                }, {
                    "field": "availableModules",
                    "datatype": "text",
                    "primary_key": 0

                }, {
                    "field": "hide_graph",
                    "datatype": "integer",
                    "primary_key": 0
                }

            ]
        };

        sqlhelper.CreateTable(tabledata, function() {

            console.log("Table user created successfully");
            offlinehelper.createdTables.push("tbl_user");
        });



        var tabledata = {
            'tablename': 'tbl_tasks',
            'fielddatas': [{
                    "field": "task_id",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "task_tag",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "task_heading",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "task_hide_graph",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "app_task_id",
                    "datatype": "integer",
                    "primary_key": 1
                }

            ]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_tasks created successfully");
            offlinehelper.createdTables.push("tbl_tasks");
        });

        var tabledata = {
            'tablename': 'tbl_training',
            'fielddatas': [{
                    "field": "app_training_id",
                    "datatype": "integer",
                    "primary_key": 1
                }, {
                    "field": "training_id",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "task_id",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "trainingDateTime",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "estimatedValue",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "estimatedValueEnd",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "trainingDuration",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "type",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "comment",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "edited",
                    "datatype": "integer",
                    "primary_key": 0
                }

            ]
        };

        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_training created successfully");
            offlinehelper.createdTables.push("tbl_training");
        });


        //Version table structure



        var tabledata = {
            'tablename': 'tbl_registrations',
            'fielddatas': [{
                "field": "app_registration_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "registration_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "registration_name",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "difficulty_id",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "flow_type",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "added_date",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "last_updated",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "registration_status",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "sort_order",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "bar_color",
                "datatype": "text",
                "primary_key": 0
            }]
        };

        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_registrations created successfully");
            offlinehelper.createdTables.push("tbl_registrations");

        });



        var tabledata = {
            'tablename': 'tbl_registration_steps',
            'fielddatas': [{
                "field": "app_step_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "step_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "step_name",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "registration_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "flow_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "is_multiple_choice",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "max_selection_allowed",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "template",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "show_date",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "show_time",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "time_format",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "answer_text",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "button_text",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "allow_custom_answer",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "allow_edit",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "allow_to_add_answer_category",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "added_date",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "last_updated",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "step_status",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "sort_order",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "special_case",
                "datatype": "integer",
                "primary_key": 0
            }]
        };

        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_registration_steps created successfully");
            offlinehelper.createdTables.push("tbl_registration_steps");
        });



        var tabledata = {
            'tablename': 'tbl_answer_category',
            'fielddatas': [{
                "field": "app_answer_cat_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "answer_cat_id ",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "answer_cat_name",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "step_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "added_date",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "last_updated",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "answer_cat_status",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "sort_order",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "answer_type",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "created_by",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "belongs_to",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "added_by",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "mapp_cat_id",
                "datatype": "text",
                "primary_key": 0
            }]
        };

        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_answer_category created successfully");
            offlinehelper.createdTables.push("tbl_answer_category");
        });

        var tabledata = {
            'tablename': 'tbl_answers',
            'fielddatas': [{
                "field": "app_answer_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "answer_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "answer",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "step_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "answer_cat_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "app_answer_cat_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "added_date",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "last_updated",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "answer_status",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "sort_order",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "answer_type",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "created_by",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "belongs_to",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "added_by",
                "datatype": "integer",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "mapped_answer_id",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "special_answer",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "difficulty_id",
                "datatype": "text",
                "primary_key": 0
            }]
        };

        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_answers created successfully");
            offlinehelper.createdTables.push("tbl_answers");
        });


        var tabledata = {
            'tablename': 'tbl_homeworks',
            'fielddatas': [{
                "field": "app_homework_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "homework_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "headline",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "created_by",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "difficulty_id",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "homework_status",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "hw_type",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "updated_at",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "created_at",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "contents",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "added_by",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "sort_order",
                "datatype": "integer",
                "primary_key": 0
            }]
        };

        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_homeworks created successfully");
            offlinehelper.createdTables.push("tbl_homeworks");
        });


        var tabledata = {
            'tablename': 'tbl_homework_assignments',
            'fielddatas': [{
                "field": "app_assignment_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "assignment_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "homework_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "patient_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "published_by",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "published_date",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "is_published",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "already_viewed",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "updated",
                "datatype": "integer",
                "primary_key": 0
            }]
        };

        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_homework_assignments created successfully");
            offlinehelper.createdTables.push("tbl_homework_assignments");
        });



        var tabledata = {
            'tablename': 'tbl_crisisplans',
            'fielddatas': [{
                "field": "plan_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "difficulty_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "headline",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "contents",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "created_at",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "updated_at",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "plan_type",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "belongs_to",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "added_by",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "plan_status",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "already_read",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "created_by",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "updated",
                "datatype": "integer",
                "primary_key": 0
            }]
        };

        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_crisisplans created successfully");
            offlinehelper.createdTables.push("tbl_crisisplans");
        });

        var tabledata = {
            'tablename': 'tbl_patient_assignments',
            'fielddatas': [{
                "field": "app_assignment_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "assignment_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "assignment_code",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "registration_id",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "flow_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "patient_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "incident_date",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "incident_time",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "answered_date",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "stage_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "edited",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "date_only",
                "datatype": "text",
                "primary_key": 0
            }]
        };

        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_patient_assignments created successfully");
            offlinehelper.createdTables.push("tbl_patient_assignments");
        });

        var tabledata = {
            'tablename': 'tbl_patient_assignment_details',
            'fielddatas': [{
                "field": "app_assignment_details_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "assignment_details_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "app_assignment_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "assignment_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "registration_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "flow_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "step_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "answer_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "app_answer_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "assignment_code",
                "datatype": "text",
                "primary_key": 0
            }]
        };

        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_patient_assignment_details created successfully");
            offlinehelper.createdTables.push("tbl_patient_assignment_details");
        });


        /*Added by Sabin @ 28th August 2015 >>*/
        //FEELINGS
        var tabledata = {
            'tablename': 'tbl_v2_feelings',
            'fielddatas': [{
                    "field": "app_feeling_id",
                    "datatype": "integer",
                    "primary_key": 1
                }, {
                    "field": "feeling_id",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "difficulty_id",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "feeling_name",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "description",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "created_at",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "last_updated",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "created_by",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "feeling_status",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "sort_order",
                    "datatype": "integer",
                    "primary_key": 0
                }

            ]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_feelings created successfully");
            offlinehelper.createdTables.push("tbl_v2_feelings");
        });


        //primary secondary feelings definition
        var tabledata = {
            'tablename': 'tbl_v2_feelings_definition',
            'fielddatas': [{
                "field": "app_def_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "def_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "primary_feelings",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "secondary_feelings",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "last_updated",
                "datatype": "text",
                "primary_key": 0
            }]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_feelings_definition created successfully");
            offlinehelper.createdTables.push("tbl_v2_feelings_definition");
        });


        //MODULES
        var tabledata = {
            'tablename': 'tbl_v2_modules',
            'fielddatas': [{
                    "field": "app_module_id",
                    "datatype": "integer",
                    "primary_key": 1
                }, {
                    "field": "module_id",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "module_name",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "module_desc",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "difficulty_id",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "module_icon",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "created_date",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "modified_date",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "sort_order",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "module_status",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "asset_url",
                    "datatype": "text",
                    "primary_key": 0
                }

            ]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_modules created successfully");
            offlinehelper.createdTables.push("tbl_v2_modules");
        });


        //EXPOSURE ADDED BY PATIENTS

        var tabledata = {
            'tablename': 'tbl_v2_sk_exposure_patients',
            'fielddatas': [{
                    "field": "app_exposure_id",
                    "datatype": "integer",
                    "primary_key": 1
                }, {
                    "field": "exposure_id",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "skill_id",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "exposure_name",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "started_date",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "closed_date",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "added_date",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "last_updated",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "exposure_status",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "added_by",
                    "datatype": "text",
                    "primary_key": 0
                }, {
                    "field": "added_by_id",
                    "datatype": "integer",
                    "primary_key": 0
                }, {
                    "field": "belongs_to",
                    "datatype": "integer",
                    "primary_key": 0
                }

            ]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_sk_exposure_patients created successfully");
            offlinehelper.createdTables.push("tbl_v2_sk_exposure_patients");
        });



        //EXPOSURE ASSIGNMENTS

        var tabledata = {
            'tablename': 'tbl_v2_sk_exposure_patients_assignments',
            'fielddatas': [{
                "field": "app_assignment_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "assignment_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "exposure_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "date_answered",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "patient_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "last_updated",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "rating",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "countdown_timer",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "countdown_completed",
                "datatype": "text",
                "primary_key": 0
            }]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_sk_exposure_patients_assignments created successfully");
            offlinehelper.createdTables.push("tbl_v2_sk_exposure_patients_assignments");
        });


        //EXPOSURE ASSIGNMENTS DETAILS
        var tabledata = {
            'tablename': 'tbl_v2_sk_exposure_patients_assignments_details',
            'fielddatas': [{
                "field": "app_assignment_details_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "assignment_details_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "app_assignment_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "assignment_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "exposure_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "step_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "answer_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "app_answer_id",
                "datatype": "integer",
                "primary_key": 0
            }]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_sk_exposure_patients_assignments_details created successfully");
            offlinehelper.createdTables.push("tbl_v2_sk_exposure_patients_assignments_details");
        });



        //SKILL ASSIGNMENTS

        var tabledata = {
            'tablename': 'tbl_v2_sk_skills_assignments',
            'fielddatas': [{
                "field": "app_assignment_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "assignment_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "skill_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "date_answered",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "patient_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "last_updated",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "rating",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "countdown_timer",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "countdown_completed",
                "datatype": "text",
                "primary_key": 0
            }]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_sk_skills_assignments created successfully");
            offlinehelper.createdTables.push("tbl_v2_sk_skills_assignments");
        });


        //SKILL  ASSIGNMENTS DETAILS
        var tabledata = {
            'tablename': 'tbl_v2_sk_skills_assignments_details',
            'fielddatas': [{
                "field": "app_assignment_details_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "assignment_details_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "app_assignment_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "assignment_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "skill_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "step_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "answer_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "app_answer_id",
                "datatype": "integer",
                "primary_key": 0
            }]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_sk_skills_assignments_details created successfully");
            offlinehelper.createdTables.push("tbl_v2_sk_skills_assignments_details");
        });



        //EXPOSURE STEPS

        var tabledata = {
            'tablename': 'tbl_v2_sk_exposure_steps',
            'fielddatas': [{
                "field": "app_step_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "step_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "step_name",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "module_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "skill_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "skill_type",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "step_label_10",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "step_label_0",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "is_multiple_choice",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "max_selection_allowed",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "template",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "answer_text",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "alternate_text",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "countdown_title",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "countdown_desc",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "allow_custom_answer",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "allow_edit",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "allow_to_add_answer_category",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "added_date",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "last_updated",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "step_status",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "sort_order",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "title_same_as_skill_ex_name",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "enable_countdown",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "cntdown_min_minutes",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "cntdown_max_minutes",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "cntdown_start_title",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "cntdown_start_desc",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "cntdown_countdown_desc",
                "datatype": "text",
                "primary_key": 0
            }]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_sk_exposure_steps created successfully");
            offlinehelper.createdTables.push("tbl_v2_sk_exposure_steps");
        });


        //MANAGE THOUGHTS
        var tabledata = {
            'tablename': 'tbl_v2_sk_thoughts',
            'fielddatas': [{
                "field": "app_thought_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "thought_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "skill_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "module_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "headline",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "thought_type",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "thought_text",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "thought_sound_file",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "sound_background_color",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "sound_url",
                "datatype": "text",
                "primary_key": 0
            }]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_sk_thoughts created successfully");
            offlinehelper.createdTables.push("tbl_v2_sk_thoughts");
        });




        //EXPOSURE ANSWER CATEGORY
        var tabledata = {
            'tablename': 'tbl_v2_skill_exposure_answer_category',
            'fielddatas': [{
                "field": "app_answer_cat_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "answer_cat_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "answer_cat_name",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "step_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "added_date",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "last_updated",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "answer_cat_status",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "sort_order",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "answer_type",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "created_by",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "belongs_to",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "added_by",
                "datatype": "text",
                "primary_key": 0
            }]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_skill_exposure_answer_category created successfully");
            offlinehelper.createdTables.push("tbl_v2_skill_exposure_answer_category");
        });


        //EXPOSURE ANSWERS
        var tabledata = {
            'tablename': 'tbl_v2_skill_exposure_answers',
            'fielddatas': [{
                "field": "app_answer_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "answer_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "answer",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "step_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "answer_cat_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "added_date",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "last_updated",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "answer_status",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "sort_order",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "answer_type",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "created_by",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "belongs_to",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "added_by",
                "datatype": "text",
                "primary_key": 0
            }]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_skill_exposure_answers created successfully");
            offlinehelper.createdTables.push("tbl_v2_skill_exposure_answers");
        });



        //SKILLS
        var tabledata = {
            'tablename': 'tbl_v2_skills',
            'fielddatas': [{
                "field": "app_skill_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "skill_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "skill_name",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "module_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "skill_type",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "created_date",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "last_updated",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "added_by",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "created_by",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "skill_status",
                "datatype": "integer",
                "primary_key": 0
            }]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_skills created successfully");
            offlinehelper.createdTables.push("tbl_v2_skills");
        });


        //THOUGHTS ASSIGNMENTS
        var tabledata = {
            'tablename': 'tbl_v2_sk_thoughts_assignments',
            'fielddatas': [{
                "field": "app_assignment_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "assignment_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "thought_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "skill_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "patient_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "times_used",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "last_updated",
                "datatype": "text",
                "primary_key": 0
            }]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_sk_thoughts_assignments created successfully");
            offlinehelper.createdTables.push("tbl_v2_sk_thoughts_assignments");
        });


        //FEELINGS ASSIGNMENTS
        var tabledata = {
            'tablename': 'tbl_v2_feelings_assignments',
            'fielddatas': [{
                "field": "app_assignment_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "assignment_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "feeling_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "patient_id",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "answered_date",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "module_version",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "feeling_type",
                "datatype": "integer",
                "primary_key": 0
            }, {
                "field": "last_updated",
                "datatype": "text",
                "primary_key": 0
            }]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_v2_feelings_assignments created successfully");
            offlinehelper.createdTables.push("tbl_v2_feelings_assignments");
            success();
        });

        var tabledata = {
            'tablename': 'tbl_extra_files_to_download',
            'fielddatas': [{
                "field": "file_id",
                "datatype": "integer",
                "primary_key": 1
            }, {
                "field": "file_url",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "item_type",
                "datatype": "text",
                "primary_key": 0
            }, {
                "field": "file_name",
                "datatype": "text",
                "primary_key": 0
            }]
        };


        sqlhelper.CreateTable(tabledata, function() {
            console.log("Table tbl_extra_files_to_download created successfully");
            offlinehelper.createdTables.push("tbl_extra_files_to_download");
        });
        //console.warn("DATABASE INITIALIZATION END");
        /*Added by Sabin @ 28th August 2015 <<*/

    },

    syncTable: function(userdetail, ftime) {
        if (offlinehelper.syncstarted == false) {

            offlinehelper.syncstarted = true;
            //inserting data to tbl_user
            var data = {
                'tokenkey': userdetail.tokenkey,
                'user_id': userdetail.userid,
                'username': userdetail.username,
                'password': userdetail.password,
                'fullname': userdetail.Name,
                'new_start_page': userdetail.new_start_page,
                'enable_msg_alert': userdetail.enable_msg_alert,
                'stage_number': userdetail.stage_number,
                'training': JSON.stringify(userdetail.training),
                'hasRegistrations': userdetail.hasRegistration,
                'homeworks': JSON.stringify(userdetail.homeworks),
                'crisisplans': JSON.stringify(userdetail.crisisplans),
                'reminders': JSON.stringify(userdetail.reminder),
                'specialAnswers': userdetail.specialAnswers,
                'feedbackMessage': JSON.stringify(userdetail.feedback),
                'availableModules': JSON.stringify(userdetail.available_modules),
                'hide_graph': userdetail.hide_graph
            };


            sqlhelper.insertJSONData('tbl_user', data);

            var json = '{"userid":"' + userdetail.userid + '","tokenkey":"' + userdetail.tokenkey + '","deviceId":"ABBBSBS"}';


            callWebServiceLive("sync_user_data/first", json, function(response) {
                offlinehelper.syncRegistration(response.data, fnLogin, false);
            });

        }

    },
    syncRegistration: function(ResponseData, callback, showDialog) {
        var totalLengths = -1;
        $tasklength = typeof ResponseData.active_tasks != "undefined" ? offlinehelper.getItemLength(ResponseData.active_tasks.task, "task") : 0;

        totalLengths = $tasklength +
            offlinehelper.getItemLength(ResponseData.other_modules.modules.default.feelings, "feelings") +
            offlinehelper.getItemLength(ResponseData.other_modules.modules.feelings.assignment, "feeling assignments") +
            offlinehelper.getItemLength(ResponseData.other_modules.feeling_definitions, "feeling_definitions") +
            offlinehelper.getItemLength(ResponseData.other_modules.modules.others, "Other modules") +
            offlinehelper.getItemLength(ResponseData.other_modules.modules.skills, "Skills") +
            offlinehelper.getItemLength(ResponseData.other_modules.modules.thoughts, "Thoughts") +
            offlinehelper.getItemLength(ResponseData.other_modules.modules.thoughts_assignment, "Thought assignments") +
            offlinehelper.getItemLength(ResponseData.other_modules.exposure.patient_exposure, "Patient Exposure") +
            offlinehelper.getItemLength(ResponseData.other_modules.exposure.patient_exposure_assignments, "Patient Exposure Assignments") +
            offlinehelper.getItemLength(ResponseData.other_modules.exposure.patient_exposure_assignments_details, "Patient Exposure Assignments Details") +
            offlinehelper.getItemLength(ResponseData.other_modules.exposure.steps, "Exposure Steps") +
            offlinehelper.getItemLength(ResponseData.other_modules.exposure.answer_cats, "Exposure Answer Cats") +
            offlinehelper.getItemLength(ResponseData.other_modules.exposure.answers, "Exposure Answers") +
            offlinehelper.getItemLength(ResponseData.registration_task.homework_module.homeworks, "Homeworks") +
            offlinehelper.getItemLength(ResponseData.registration_task.crisis_plan, "Crisis plans") +
            offlinehelper.getItemLength(ResponseData.registration_task.homework_module.homework_assignments, "Homework Assignments") +
            offlinehelper.getItemLength(ResponseData.registration_task.registration_module.registrations, "Registration Tasks") +
            offlinehelper.getItemLength(ResponseData.registration_task.registration_module.patients.assignments, "Registration Assignments") +
            offlinehelper.getItemLength(ResponseData.registration_task.registration_module.patients.assignment_details, "Registration Assignment Details") +
            offlinehelper.getItemLength(ResponseData.registration_task.registration_module.steps, "Registration Steps") +
            offlinehelper.getItemLength(ResponseData.registration_task.registration_module.answer_category, "Registration answer Cats") +
            offlinehelper.getItemLength(ResponseData.registration_task.registration_module.answers, "Registration Answers") +
            offlinehelper.getItemLength(ResponseData.other_modules.skills.assignments, "Skill Assignments") +
            offlinehelper.getItemLength(ResponseData.other_modules.skills.assignment_details, "Skill assignment details");


        console.log(ResponseData);
        offlinehelper.responseDataTextChunk = ResponseData;
        offlinehelper.resetSyncProgressBar();



        var isValid = true,
            iVal = 0,
            sum = 0,
            pcdone = 0;
        //sync active tasks



        if (showDialog == true && totalLengths > 0) {
            $(".download-content-msg").show();
            $(".download-overlay").show();
        }



        // 

        var otherqueries = [];
        //console.warn("total length = "+totalLengths);
        var tasksync = false;



        if (ResponseData.countdown_audio != "") {
            $testURL = ResponseData.countdown_audio;
            $countdownFile = $testURL.split("/").pop();


            var sqldel = "DELETE FROM tbl_extra_files_to_download WHERE item_type='countdown_audio'";
            otherqueries.push(sqldel);

            var data = {
                'file_url': ResponseData.countdown_audio,
                'item_type': 'countdown_audio',
                'file_name': $countdownFile
            };

            var fields = sqlhelper.separateFieldData(data, "field");
            var dataval = sqlhelper.separateFieldData(data, "value");
            var sqlquery = 'INSERT INTO tbl_extra_files_to_download (' + fields + ') values(' + dataval + ')';
            otherqueries.push(sqlquery);
        }

        if (ResponseData.slide3_image != "") {
            $testURL = ResponseData.slide3_image;
            $countdownFile = $testURL.split("/").pop();

            var sqldel = "DELETE FROM tbl_extra_files_to_download WHERE item_type='slide3_image'";
            otherqueries.push(sqldel);

            var data = {
                'file_url': ResponseData.slide3_image,
                'item_type': 'slide3_image',
                'file_name': $countdownFile
            };

            var fields = sqlhelper.separateFieldData(data, "field");
            var dataval = sqlhelper.separateFieldData(data, "value");
            var sqlquery = 'INSERT INTO tbl_extra_files_to_download (' + fields + ') values(' + dataval + ')';
            otherqueries.push(sqlquery);
        }

        if (typeof ResponseData.active_tasks != "undefined") {
            if (typeof ResponseData.active_tasks.task != "undefined") {

                $(ResponseData.active_tasks.task).each(function(i, e) {
                    taskid = e.taskid;
                    var data = {
                        'task_id': e.taskid,
                        'task_tag': e.tag,
                        'task_heading': e.heading.replace("'", "\'"),
                        'task_hide_graph': e.hide_graph
                    };


                    //  sqlhelper.insertJSONData('tbl_tasks',data);
                    //totalLengths++;
                    //console.log(tx_reg);
                    var fields = sqlhelper.separateFieldData(data, "field");
                    var dataval = sqlhelper.separateFieldData(data, "value");
                    var sqlquery = 'DELETE FROM tbl_tasks where task_id=' + e.taskid;
                    otherqueries.push(sqlquery);
                    var sqlquery = 'INSERT INTO tbl_tasks (' + fields + ') values(' + dataval + ')';
                    otherqueries.push(sqlquery);

                    console.log(sqlquery);




                    if (e.training != undefined && e.training.length != 0) {
                        var traininglength = e.training.length;

                        totalLengths = totalLengths + e.training.length;



                        $(e.training).each(function(i, e) {
                            var data = {
                                'training_id': e.trainingId,
                                'task_id': taskid,
                                'trainingDateTime': e.trainingdatetime,
                                'estimatedValue': e.estimatedvalue,
                                'trainingDuration': e.training_duration,
                                'type': e.type,
                                'comment': e.comment,
                                'edited': e.edited,
                                'estimatedValueEnd': e.estimatedvalue_end,
                            };

                            //sqlhelper.insertJSONData('tbl_training',data);
                            //totalLengths++;

                            var fields = sqlhelper.separateFieldData(data, "field");
                            var dataval = sqlhelper.separateFieldData(data, "value");
                            var sqlquery = 'DELETE FROM tbl_training where training_id=' + e.trainingId;
                            otherqueries.push(sqlquery);
                            var sqlquery = 'INSERT INTO tbl_training (' + fields + ') values(' + dataval + ')';
                            console.log(sqlquery);
                            otherqueries.push(sqlquery);

                        })
                    }

                });

                //console.log(queries);
                // sqlhelper.db.transaction(function(tx) {
                //  for(i=0;i<queries_training.length;i++){
                //    console.log(queries_training[i]);
                //    tx.executeSql(queries_training[i]);

                //    iVal++;
                //    checkSyncComplete(iVal);

                //  }
                //   });
            } else {
                tasksync = true;
            }
        } else {
            tasksync = true;
        }


        var RegistrationData = ResponseData;
        // var module_queries=[];
        if (typeof RegistrationData.other_modules.modules.default.feelings != "undefined") {
            $(RegistrationData.other_modules.modules.default.feelings).each(function(i, e) {



                var todeelete = {
                    where: {
                        'feeling_id': e.feeling_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_v2_feelings where " + where;
                otherqueries.push(sqlquery);
                var data = {
                    'feeling_id': e.feeling_id,
                    'difficulty_id': e.difficulty_id,
                    'feeling_name': e.feeling_name,
                    'description': e.description,
                    'created_at': e.created_at,
                    'last_updated': e.last_updated,
                    'created_by': e.created_by,
                    'feeling_status': e.feeling_status,
                    'sort_order': e.sort_order
                };

                //console.warn("Now Processing - FEELINGS");
                //sqlhelper.insertJSONData('tbl_v2_feelings',data);
                //totalLengths++;
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_v2_feelings (' + fields + ') values(' + dataval + ')';
                otherqueries.push(sqlquery);
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_feelings', data, function (results) {

                //              if (!results) {
                //                  isValid = false;
                //                  sum++;
                //              }
                //              iVal++;//onSuccess function

                //              checkSyncComplete(iVal);//call this lastly method or each
                //          }, function () {
                //              iVal++;//onError function
                ////              console.warn("Failure Insert tbl_v2_feelings");
                //          });


            });
        }

        // sqlhelper.db.transaction(function(tx) {
        //   for(i=0;i<module_queries.length;i++){
        //     console.log(module_queries[i]);
        //     tx.executeSql(module_queries[i]);

        //     iVal++;
        //     checkSyncComplete(iVal);
        //   }
        // });

        //sync feeling assignments
        //var otherqueries=[];

        if (typeof RegistrationData.other_modules.modules.feelings.assignment != "undefined") {
            $(RegistrationData.other_modules.modules.feelings.assignment).each(function(i, e) {




                var todeelete = {
                    where: {
                        'assignment_id': e.assignment_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_v2_feelings_assignments where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    'assignment_id': e.assignment_id,
                    'feeling_id': e.feeling_id,
                    'patient_id': e.patient_id,
                    'answered_date': e.answered_date,
                    'module_version': e.module_version,
                    'feeling_type': e.feeling_type,
                    'last_updated': e.last_updated
                };

                //console.warn("Now Processing - FEELINGS ASSIGNMENTS");
                //sqlhelper.insertJSONData('tbl_v2_feelings',data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_feelings_assignments', data, function (results) {

                //              if (!results) {
                //                  isValid = false;
                //                  sum++;
                //              }
                //              iVal++;//onSuccess function

                //              checkSyncComplete(iVal);//call this lastly method or each
                //          }, function () {
                //              iVal++;//onError function
                ////              console.warn("Failure Insert tbl_v2_feelings_assignments");
                //          });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_v2_feelings_assignments (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);


            });
        }

        //sync feeling definitions
        if (RegistrationData.other_modules.feeling_definitions !== 0) {


            var todeelete = {
                where: {
                    'def_id': RegistrationData.other_modules.feeling_definitions.def_id,
                }
            };
            var where = sqlhelper.generateUpdateFields(todeelete.where);

            var sqlquery = "DELETE FROM tbl_v2_feelings_definition where " + where;
            console.log(sqlquery);
            otherqueries.push(sqlquery);
            var data = {
                "def_id": RegistrationData.other_modules.feeling_definitions.def_id,
                "primary_feelings": RegistrationData.other_modules.feeling_definitions.primary,
                "secondary_feelings": RegistrationData.other_modules.feeling_definitions.secondary
            }

            //console.warn("Now Processing - FEELINGS DEFINITIONS");
            //sqlhelper.insertJSONData("tbl_v2_feelings_definition",data);
            //totalLengths++;
            // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_feelings_definition', data, function (results) {

            //                   if (!results) {
            //                       isValid = false;
            //                       sum++;
            //                   }
            //                   iVal++;//onSuccess function

            //                   checkSyncComplete(iVal);//call this lastly method or each
            //               }, function () {
            //                   iVal++;//onError function
            ////                   console.warn("Failure Insert tbl_v2_feelings_definition");
            //               });
            var fields = sqlhelper.separateFieldData(data, "field");
            var dataval = sqlhelper.separateFieldData(data, "value");
            var sqlquery = 'INSERT INTO tbl_v2_feelings_definition (' + fields + ') values(' + dataval + ')';
            console.log(sqlquery);
            otherqueries.push(sqlquery);

        }

        //sync modules
        if (typeof RegistrationData.other_modules.modules.others != "undefined") {
            $(RegistrationData.other_modules.modules.others).each(function(i, e) {



                var todeelete = {
                    where: {
                        'module_id': e.module_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_v2_modules where " + where;
                // console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    'module_id': e.module_id,
                    'module_name': e.module_name.replace("'", "\'"),
                    'module_desc': e.module_desc,
                    'difficulty_id': e.difficulty_id,
                    'module_icon': e.module_icon,
                    'created_date': e.created_date,
                    'modified_date': e.modified_date,
                    'module_status': e.module_status,
                    'sort_order': e.sort_order,
                    'asset_url': e.assetURL
                };

                /* if(e.assetURL!=""){
                     var fileInfo = {
                                          'file': e.module_icon,
                                          'type': "icon",
                                          'url': e.assetURL
                                      };

                      offlinehelper.modulefiles.push(fileInfo);
                  }*/
                //console.warn("Now Processing - MODULES");
                //sqlhelper.insertJSONData("tbl_v2_modules",data);

                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_modules', data, function (results) {

                //      if (!results) {
                //          isValid = false;
                //          sum++;
                //      }
                //      iVal++;//onSuccess function

                //      checkSyncComplete(iVal);//call this lastly method or each
                //  }, function () {
                //      iVal++;//onError function
                ////      console.warn("Failure Insert tbl_v2_modules");
                //  });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_v2_modules (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);

            });
        }

        //sync skills
        if (typeof RegistrationData.other_modules.modules.skills != "undefined") {
            $(RegistrationData.other_modules.modules.skills).each(function(i, e) {



                var todeelete = {
                    where: {
                        'skill_id': e.skill_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_v2_skills where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    'skill_id': e.skill_id,
                    'skill_name': e.skill_name,
                    'module_id': e.module_id,
                    'skill_type': e.skill_type,
                    'created_date': e.created_date,
                    'last_updated': e.last_updated,
                    'added_by': e.added_by,
                    'created_by': e.created_by,
                    'skill_status': e.skill_status
                };

                //console.warn("Now Processing - SKILLS");
                //sqlhelper.insertJSONData("tbl_v2_skills",data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_skills', data, function (results) {

                //             if (!results) {
                //                 isValid = false;
                //                 sum++;
                //             }
                //             iVal++;//onSuccess function

                //             checkSyncComplete(iVal);//call this lastly method or each
                //         }, function () {
                //             iVal++;//onError function
                ////             console.warn("Failure Insert tbl_v2_skills");
                //         });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_v2_skills (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);

            });
        }

        //sync thought contents
        if (typeof RegistrationData.other_modules.modules.thoughts != "undefined") {
            $(RegistrationData.other_modules.modules.thoughts).each(function(i, e) {



                var todeelete = {
                    where: {
                        'thought_id': e.thought_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_v2_sk_thoughts where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    "thought_id": e.thought_id,
                    "skill_id": e.skill_id,
                    "module_id": e.module_id,
                    "headline": e.headline,
                    "thought_type": e.thought_type,
                    "thought_text": e.thought_text,
                    "thought_sound_file": e.thought_sound_file,
                    "sound_background_color": e.sound_background_color,
                    "sound_url": e.sound_url
                };
                /*if(e.sound_url!=""){
                    offlinehelper.modulefiles.push({
                        'file': e.thought_sound_file,
                        'type': "audio",
                        'url': e.sound_url
                    });
                }*/
                //console.warn("Now Processing - THOUGHTS");
                //sqlhelper.insertJSONData("tbl_v2_sk_thoughts",data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_sk_thoughts', data, function (results) {

                //                 if (!results) {
                //                     isValid = false;
                //                     sum++;
                //                 }

                //                 iVal++;//onSuccess function

                //                 checkSyncComplete(iVal);//call this lastly method or each
                //             }, function () {
                //                 iVal++;//onError function
                ////                 console.warn("Failure Insert tbl_v2_sk_thoughts");
                //             });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_v2_sk_thoughts (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);
            });

        }

        //Sync Thoughts

        if (typeof RegistrationData.other_modules.modules.thoughts_assignment != "undefined") {
            $(RegistrationData.other_modules.modules.thoughts_assignment).each(function(i, e) {

                var todeelete = {
                    where: {
                        'assignment_id': e.assignment_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_v2_sk_thoughts_assignments where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    'assignment_id': e.assignment_id,
                    'thought_id': e.thought_id,
                    'patient_id': e.patient_id,
                    'skill_id': e.skill_id,
                    'times_used': e.times_used,
                    'last_updated': e.last_updated
                };

                //console.warn("Now Processing - THOUGHTS ASSIGNMENTS");


                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_sk_thoughts_assignments', data, function (results) {

                //               if (!results) {
                //                   isValid = false;
                //                   sum++;
                //               }
                //               iVal++;//onSuccess function

                //               checkSyncComplete(iVal);//call this lastly method or each
                //           }, function () {
                //               iVal++;//onError function
                ////               console.warn("Failure Insert tbl_v2_sk_thoughts_assignments");
                //           });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_v2_sk_thoughts_assignments (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);


            });
        }

        //sync patient specific exposure
        if (typeof RegistrationData.other_modules.exposure.patient_exposure != "undefined") {
            $(RegistrationData.other_modules.exposure.patient_exposure).each(function(i, e) {



                var todeelete = {
                    where: {
                        'exposure_id': e.exposure_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_v2_sk_exposure_patients where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    "exposure_id": e.exposure_id,
                    "skill_id": e.skill_id,
                    "exposure_name": e.exposure_name,
                    "started_date": e.started_date,
                    "closed_date": e.closed_date,
                    "added_date": e.added_date,
                    "last_updated": e.last_updated,
                    "exposure_status": e.exposure_status,
                    "added_by": e.added_by,
                    "added_by_id": e.added_by_id,
                    "belongs_to": e.belongs_to
                };

                //console.warn("Now Processing - PATIENT'S EXPOSURE");
                //sqlhelper.insertJSONData("tbl_v2_sk_exposure_patients",data);
                //totalLengths++;

                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_sk_exposure_patients', data, function (results) {

                //                if (!results) {
                //                    isValid = false;
                //                    sum++;
                //                }
                //                iVal++;//onSuccess function
                ////                console.warn("Success Insert tbl_v2_sk_exposure_patients");
                //                checkSyncComplete(iVal);//call this lastly method or each
                //            }, function () {
                //                iVal++;//onError function
                ////                console.warn("Failure Insert tbl_v2_sk_exposure_patients");
                //            });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_v2_sk_exposure_patients (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);

            });
        }

        //sync patient's answered exposure assignments
        if (typeof RegistrationData.other_modules.exposure.patient_exposure_assignments != "undefined") {
            $(RegistrationData.other_modules.exposure.patient_exposure_assignments).each(function(i, e) {




                var todeelete = {
                    where: {
                        'assignment_id': e.assignment_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_v2_sk_exposure_patients_assignments where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    "assignment_id": e.assignment_id,
                    "exposure_id": e.exposure_id,
                    "date_answered": e.date_answered,
                    "patient_id": e.patient_id,
                    "last_updated": e.last_updated,
                    "rating": e.rating,
                    "countdown_timer": e.countdown_timer,
                    "countdown_completed": e.countdown_completed
                };

                //console.warn("Now Processing - EXPOSURE ASSIGNMENTS");
                //sqlhelper.insertJSONData("tbl_v2_sk_exposure_patients_assignments",data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_sk_exposure_patients_assignments', data, function (results) {

                //              if (!results) {
                //                  isValid = false;
                //                  sum++;
                //              }
                //              iVal++;//onSuccess function

                //              checkSyncComplete(iVal);//call this lastly method or each
                //          }, function () {
                //              iVal++;//onError function
                ////              console.warn("Failure Insert tbl_v2_sk_exposure_patients_assignments");
                //          });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_v2_sk_exposure_patients_assignments (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);

            });
        }


        //sync patient's answered exposure assignments details
        if (typeof RegistrationData.other_modules.exposure.patient_exposure_assignments_details != "undefined") {
            $(RegistrationData.other_modules.exposure.patient_exposure_assignments_details).each(function(i, e) {


                var todeelete = {
                    where: {
                        'assignment_details_id': e.assignment_details_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_v2_sk_exposure_patients_assignments_details where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    "assignment_details_id": e.assignment_details_id,
                    "assignment_id": e.assignment_id,
                    "exposure_id": e.exposure_id,
                    "step_id": e.step_id,
                    "answer_id": e.answer_id
                };

                //console.warn("Now Processing - EXPOSURE ASSIGNMENT DETAILS");
                //sqlhelper.insertJSONData("tbl_v2_sk_exposure_patients_assignments_details",data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_sk_exposure_patients_assignments_details', data, function (results) {

                //              if (!results) {
                //                  isValid = false;
                //                  sum++;
                //              }
                //              iVal++;//onSuccess function

                //              checkSyncComplete(iVal);//call this lastly method or each
                //          }, function () {
                //              iVal++;//onError function
                ////              console.warn("Failure Insert tbl_v2_sk_exposure_patients_assignments_details");
                //          });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_v2_sk_exposure_patients_assignments_details (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);

            });
        }

        //sync skills response.data.other_modules.skills.assignments
        if (typeof RegistrationData.other_modules.skills.assignments != "undefined") {
            $(RegistrationData.other_modules.skills.assignments).each(function(i, e) {



                var todeelete = {
                    where: {
                        'assignment_id': e.assignment_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_v2_sk_skills_assignments where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    "assignment_id": e.assignment_id,
                    "skill_id": e.skill_id,
                    "date_answered": e.date_answered,
                    "patient_id": e.patient_id,
                    "last_updated": e.last_updated,
                    "rating": e.rating,
                    "countdown_timer": e.countdown_timer,
                    "countdown_completed": e.countdown_completed
                };

                //console.warn("Now Processing - SKILL ASSIGNMENTS");
                //sqlhelper.insertJSONData("tbl_v2_sk_exposure_patients_assignments",data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_sk_skills_assignments', data, function (results) {

                //              if (!results) {
                //                  isValid = false;
                //                  sum++;
                //              }
                //              iVal++;//onSuccess function

                //              checkSyncComplete(iVal);//call this lastly method or each
                //          }, function () {
                //              iVal++;//onError function
                ////              console.warn("Failure Insert tbl_v2_sk_skills_assignments");
                //          });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_v2_sk_skills_assignments (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);

            });
        }

        //sync skills details
        if (typeof RegistrationData.other_modules.skills.assignment_details != "undefined") {
            $(RegistrationData.other_modules.skills.assignment_details).each(function(i, e) {



                var todeelete = {
                    where: {
                        'assignment_details_id': e.assignment_details_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_v2_sk_skills_assignments_details where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    "assignment_details_id": e.assignment_details_id,
                    "assignment_id": e.assignment_id,
                    "skill_id": e.skill_id,
                    "step_id": e.step_id,
                    "answer_id": e.answer_id
                };

                //console.warn("Now Processing - SKILL ASSIGNMENT DETAILS");
                //sqlhelper.insertJSONData("tbl_v2_sk_exposure_patients_assignments_details",data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_sk_skills_assignments_details', data, function (results) {

                //              if (!results) {
                //                  isValid = false;
                //                  sum++;
                //              }
                //              iVal++;//onSuccess function

                //              checkSyncComplete(iVal);//call this lastly method or each
                //          }, function () {
                //              iVal++;//onError function
                ////              console.warn("Failure Insert tbl_v2_sk_skills_assignments_details");
                //          });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_v2_sk_skills_assignments_details (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);

            });
        }

        //sync exposure master templates(steps)
        if (typeof RegistrationData.other_modules.exposure.steps != "undefined") {
            $(RegistrationData.other_modules.exposure.steps).each(function(i, e) {




                var todeelete = {
                    where: {
                        'step_id': e.step_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_v2_sk_exposure_steps where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    "step_id": e.step_id,
                    "step_name": e.step_name,
                    "module_id": e.module_id,
                    "skill_id": e.skill_id,
                    "skill_type": e.skill_type,
                    "step_label_10": e.step_label_10,
                    "step_label_0": e.step_label_0,
                    "is_multiple_choice": e.is_multiple_choice,
                    "max_selection_allowed": e.max_selection_allowed,
                    "template": e.template,
                    "answer_text": e.answer_text,
                    "alternate_text": e.alternate_text,
                    "countdown_title": e.countdown_title,
                    "countdown_desc": e.countdown_desc,
                    "allow_custom_answer": e.allow_custom_answer,
                    "allow_edit": e.allow_edit,
                    "allow_to_add_answer_category": e.allow_to_add_answer_category,
                    "added_date": e.added_date,
                    "last_updated": e.last_updated,
                    "step_status": e.step_status,
                    "sort_order": e.sort_order,
                    "title_same_as_skill_ex_name": e.title_same_as_skill_ex_name,
                    "enable_countdown": e.enable_countdown,
                    "cntdown_min_minutes": e.cntdown_min_minutes,
                    "cntdown_max_minutes": e.cntdown_max_minutes,
                    "cntdown_start_title": e.cntdown_start_title,
                    "cntdown_start_desc": e.cntdown_start_desc,
                    "cntdown_countdown_desc": e.cntdown_countdown_desc
                };
                //console.warn("Now Processing - EXPOSURE STEPS");
                //sqlhelper.insertJSONData("tbl_v2_sk_exposure_steps",data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_sk_exposure_steps', data, function (results) {

                //              if (!results) {
                //                  isValid = false;
                //                  sum++;
                //              }
                //              iVal++;//onSuccess function

                //              checkSyncComplete(iVal);//call this lastly method or each
                //          }, function () {
                //              iVal++;//onError function
                ////              console.warn("Failure Insert tbl_v2_sk_exposure_steps");
                //          });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_v2_sk_exposure_steps (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);

            });
        }


        //sync exposure master answer categories
        if (typeof RegistrationData.other_modules.exposure.answer_cats != "undefined") {
            $(RegistrationData.other_modules.exposure.answer_cats).each(function(i, e) {



                var todeelete = {
                    where: {
                        'answer_cat_id': e.answer_cat_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_v2_skill_exposure_answer_category where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    'answer_cat_id': e.answer_cat_id,
                    'answer_cat_name': e.answer_cat_name,
                    'step_id': e.step_id,
                    'added_date': e.added_date,
                    'last_updated': e.last_updated,
                    'answer_cat_status': e.answer_cat_status,
                    'sort_order': e.sort_order,
                    'answer_type': e.answer_type,
                    'created_by': e.created_by,
                    'belongs_to': e.belongs_to,
                    'added_by': e.added_by
                };

                //console.warn("Now Processing - EXPOSURE ANSWER CATS");
                //sqlhelper.insertJSONData("tbl_v2_skill_exposure_answer_category",data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_skill_exposure_answer_category', data, function (results) {

                //               if (!results) {
                //                   isValid = false;
                //                   sum++;
                //               }
                //               iVal++;//onSuccess function

                //               checkSyncComplete(iVal);//call this lastly method or each
                //           }, function () {
                //               iVal++;//onError function
                ////               console.warn("Failure Insert tbl_v2_skill_exposure_answer_category");
                //           });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_v2_skill_exposure_answer_category (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);

            });
        }


        //sync exposure master answers
        if (typeof RegistrationData.other_modules.exposure.answers != "undefined") {
            $(RegistrationData.other_modules.exposure.answers).each(function(i, e) {



                var todeelete = {
                    where: {
                        'answer_id': e.answer_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_v2_skill_exposure_answers where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    'answer_id': e.answer_id,
                    'answer': e.answer,
                    'step_id': e.step_id,
                    'answer_cat_id': e.answer_cat_id,
                    'added_date': e.added_date,
                    'last_updated': e.last_updated,
                    'answer_status': e.answer_status,
                    'sort_order': e.sort_order,
                    'answer_type': e.answer_type,
                    'created_by': e.created_by,
                    'belongs_to': e.belongs_to,
                    'added_by': e.added_by
                };

                //console.warn("Now Processing - EXPOSURE ANSWERS");
                //sqlhelper.insertJSONData("tbl_v2_skill_exposure_answers",data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_v2_skill_exposure_answers', data, function (results) {

                //              if (!results) {
                //                  isValid = false;
                //                  sum++;
                //              }
                //              iVal++;//onSuccess function

                //              checkSyncComplete(iVal);//call this lastly method or each
                //          }, function () {
                //              iVal++;//onError function
                ////              console.warn("Failure Insert tbl_v2_skill_exposure_answers");
                //          });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_v2_skill_exposure_answers (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);

            });
        }


        //REGISTRATION TASKS
        if (typeof RegistrationData.registration_task.homework_module.homeworks != "undefined") {
            $(RegistrationData.registration_task.homework_module.homeworks).each(function(i, e) {



                var todeelete = {
                    where: {
                        'homework_id': e.homework_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_homeworks where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    'added_by': e.added_by,
                    'contents': e.contents,
                    'created_at': e.created_at,
                    'created_by': e.created_by,
                    'difficulty_id': e.difficulty_id,
                    'headline': e.headline.replace("'", "\'"),
                    'homework_id': e.homework_id,
                    'homework_status': e.homework_status,
                    'updated_at': e.updated_at,
                    'hw_type': e.hw_type,
                    'sort_order': e.sort_order
                };
                //console.warn("Now Processing - HOMEWORKS");
                //sqlhelper.insertJSONData('tbl_homeworks',data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_homeworks', data, function (results) {

                //                   if (!results) {
                //                       isValid = false;
                //                       sum++;
                //                   }
                //                   iVal++;//onSuccess function

                //                   checkSyncComplete(iVal);//call this lastly method or each
                //               }, function () {
                //                   iVal++;//onError function
                ////                   console.warn("Failure Insert tbl_homeworks");
                //               });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_homeworks (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);

            })
        }

        if (typeof RegistrationData.registration_task.crisis_plan != "undefined") {
            $(RegistrationData.registration_task.crisis_plan).each(function(i, e) {



                var todeelete = {
                    where: {
                        'plan_id': e.plan_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_crisisplans where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    'plan_id': e.plan_id,
                    'difficulty_id': e.difficulty_id,
                    'headline': e.headline.replace("'", "\'"),
                    'created_by': e.created_by,
                    'contents': e.contents,
                    'created_at': e.created_at,
                    'updated_at': e.updated_at,
                    'plan_type': e.plan_type,
                    'created_by': e.created_by,
                    'added_by': e.added_by,
                    'plan_status': e.plan_status,
                    'already_read': e.already_read,
                    'belongs_to': e.belongs_to
                };
                //console.warn("Now Processing - CRISIS PLANS");
                //sqlhelper.insertJSONData('tbl_crisisplans',data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_crisisplans', data, function (results) {

                //                   if (!results) {
                //                       isValid = false;
                //                       sum++;
                //                   }
                //                   iVal++;//onSuccess function

                //                   checkSyncComplete(iVal);//call this lastly method or each
                //               }, function () {
                //                   iVal++;//onError function
                ////                   console.warn("Failure Insert tbl_crisisplans");
                //               });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_crisisplans (' + fields + ') values(' + dataval + ')';
                console.log(sqlquery);
                otherqueries.push(sqlquery);

            })
        }

        if (typeof RegistrationData.registration_task.homework_module.homework_assignments != "undefined") {
            $(RegistrationData.registration_task.homework_module.homework_assignments).each(function(i, e) {



                var todeelete = {
                    where: {
                        'assignment_id': e.assignment_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_homework_assignments where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    'assignment_id': e.assignment_id,
                    'homework_id': e.homework_id,
                    'patient_id': e.patient_id,
                    'published_by': e.published_by,
                    'published_date': e.published_date,
                    'is_published': e.is_published,
                    'already_viewed': e.already_viewed
                };
                //console.warn("Now Processing - HOMEWORK ASSIGNMENTS");
                //sqlhelper.insertJSONData('tbl_homework_assignments',data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_homework_assignments', data, function (results) {

                //               if (!results) {
                //                   isValid = false;
                //                   sum++;
                //               }
                //               iVal++;//onSuccess function

                //               checkSyncComplete(iVal);//call this lastly method or each
                //           }, function () {
                //               iVal++;//onError function
                ////               console.warn("Failure Insert tbl_homework_assignments");
                //           });

                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_homework_assignments (' + fields + ') values(' + dataval + ')';
                //console.log(sqlquery);
                console.log(".");

                otherqueries.push(sqlquery);

            })
        }


        if (typeof RegistrationData.registration_task.registration_module.registrations != "undefined") {
            $(RegistrationData.registration_task.registration_module.registrations).each(function(i, e) {



                var todeelete = {
                    where: {
                        'registration_id': e.registration_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_registrations where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    'registration_id': e.registration_id,
                    'registration_name': e.registration_name.replace("'", "\'"),
                    'difficulty_id': e.difficulty_id,
                    'flow_type': e.flow_type,
                    'added_date': e.added_date,
                    'last_updated': e.last_updated,
                    'registration_status': e.registration_status,
                    'sort_order': e.sort_order,
                    'bar_color': e.bar_color
                };
                //console.warn("Now Processing - REGISTRATIONS");
                //sqlhelper.insertJSONData('tbl_registrations',data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_registrations', data, function (results) {

                //                   if (!results) {
                //                       isValid = false;
                //                       sum++;
                //                   }
                //                   iVal++;//onSuccess function

                //                   checkSyncComplete(iVal);//call this lastly method or each
                //               }, function () {
                //                   iVal++;//onError function
                ////                   console.warn("Failure Insert tbl_registrations");
                //               });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_registrations (' + fields + ') values(' + dataval + ')';
                //console.log(sqlquery);
                console.log(".");
                otherqueries.push(sqlquery);

            });
        }


        if (typeof RegistrationData.registration_task.registration_module.patients != undefined) {
            if (typeof RegistrationData.registration_task.registration_module.patients.assignments != undefined) {
                $(RegistrationData.registration_task.registration_module.patients.assignments).each(function(i, e) {





                    var todeelete = {
                        where: {
                            'assignment_id': e.assignment_id,
                        }
                    };
                    var where = sqlhelper.generateUpdateFields(todeelete.where);

                    var sqlquery = "DELETE FROM tbl_patient_assignments where " + where;
                    console.log(sqlquery);
                    otherqueries.push(sqlquery);
                    var data = {
                        'assignment_id': e.assignment_id,
                        'assignment_code': e.assignment_code,
                        'registration_id': e.registration_id,
                        'flow_id': e.flow_id,
                        'patient_id': e.patient_id,
                        'incident_date': e.incident_date,
                        'incident_time': e.incident_time,
                        'answered_date': e.answered_date,
                        'date_only': e.date_only,
                        'stage_id': e.stage_id
                    };
                    //console.warn("Now Processing - REGISTRATIONS ASSIGNMENTS");
                    //sqlhelper.insertJSONData('tbl_patient_assignments',data);
                    //totalLengths++;
                    // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_patient_assignments', data, function (results) {

                    //           if (!results) {
                    //               isValid = false;
                    //               sum++;
                    //           }
                    //           iVal++;//onSuccess function

                    //           checkSyncComplete(iVal);//call this lastly method or each
                    //       }, function () {
                    //           iVal++;//onError function
                    ////           console.warn("Failure Insert tbl_patient_assignments");
                    //       });
                    var fields = sqlhelper.separateFieldData(data, "field");
                    var dataval = sqlhelper.separateFieldData(data, "value");
                    var sqlquery = 'INSERT INTO tbl_patient_assignments (' + fields + ') values(' + dataval + ')';
                    //console.log(sqlquery);
                    console.log(".");
                    otherqueries.push(sqlquery);

                })
            }
            if (typeof RegistrationData.registration_task.registration_module.patients.assignment_details != undefined) {
                $(RegistrationData.registration_task.registration_module.patients.assignment_details).each(function(i, e) {



                    var todeelete = {
                        where: {
                            'assignment_details_id': e.assignment_details_id,
                        }
                    };
                    var where = sqlhelper.generateUpdateFields(todeelete.where);

                    var sqlquery = "DELETE FROM tbl_patient_assignment_details where " + where;
                    console.log(sqlquery);
                    otherqueries.push(sqlquery);


                    var data = {
                        'assignment_details_id': e.assignment_details_id,
                        'app_assignment_id': 0,
                        'assignment_id': e.assignment_id,
                        'registration_id': e.registration_id,
                        'flow_id': e.flow_id,
                        'step_id': e.step_id,
                        'answer_id': e.answer_id,
                        'app_answer_id': e.app_answer_id,
                        'assignment_code': e.assignment_code
                    };
                    //console.warn("Now Processing - REGISTRATION ASSIGNMENT DETAILS");
                    //sqlhelper.insertJSONData('tbl_patient_assignment_details',data);
                    //totalLengths++;
                    // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_patient_assignment_details', data, function (results) {

                    //         if (!results) {
                    //             isValid = false;
                    //             sum++;
                    //         }
                    //         iVal++;//onSuccess function

                    //         checkSyncComplete(iVal);//call this lastly method or each
                    //     }, function () {
                    //         iVal++;//onError function
                    ////         console.warn("Failure Insert tbl_patient_assignment_details");
                    //     });
                    var fields = sqlhelper.separateFieldData(data, "field");
                    var dataval = sqlhelper.separateFieldData(data, "value");
                    var sqlquery = 'INSERT INTO tbl_patient_assignment_details (' + fields + ') values(' + dataval + ')';
                    //console.log(sqlquery);
                    console.log(".");
                    otherqueries.push(sqlquery);

                })
            }
        }


        if (RegistrationData.registration_task.registration_module.steps != null && RegistrationData.registration_task.registration_module.steps.length > 0) {
            $(RegistrationData.registration_task.registration_module.steps).each(function(i, e) {



                var todeelete = {
                    where: {
                        'step_id': e.step_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_registration_steps where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);

                var data = {
                    'step_id': e.step_id,
                    'step_name': e.step_name,
                    'registration_id': e.registration_id,
                    'flow_id': e.flow_id,
                    'is_multiple_choice': e.is_multiple_choice,
                    'max_selection_allowed': e.max_selection_allowed,
                    'show_date': e.show_date,
                    'show_time': e.show_time,
                    'time_format': e.time_format,
                    'answer_text': e.answer_text,
                    'button_text': e.button_text,
                    'allow_custom_answer': e.allow_custom_answer,
                    'allow_edit': e.allow_edit,
                    'allow_to_add_answer_category': e.allow_to_add_answer_category,
                    'added_date': e.added_date,
                    'last_updated': e.last_updated,
                    'step_status': e.step_status,
                    'sort_order': e.sort_order,
                    'special_case': e.special_case,
                    'template': e.template
                };
                //console.warn("Now Processing - REGISTRATION STEPS");
                //sqlhelper.insertJSONData('tbl_registration_steps',data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_registration_steps', data, function (results) {

                //            if (!results) {
                //                isValid = false;
                //                sum++;
                //            }
                //            iVal++;//onSuccess function

                //            checkSyncComplete(iVal);//call this lastly method or each
                //        }, function () {
                //            iVal++;//onError function
                ////            console.warn("Failure Insert tbl_registration_steps");
                //        });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_registration_steps (' + fields + ') values(' + dataval + ')';
                //console.log(sqlquery);
                //

                console.log(".");

                otherqueries.push(sqlquery);

            })
        }


        if (RegistrationData.registration_task.registration_module.answer_category != null && typeof RegistrationData.registration_task.registration_module.answer_category != "undefined" && RegistrationData.registration_task.registration_module.answer_category.length > 0) {
            $(RegistrationData.registration_task.registration_module.answer_category).each(function(i, e) {





                var todeelete = {
                    where: {
                        'answer_cat_id': e.answer_cat_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_answer_category where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);
                var data = {
                    'answer_cat_id': e.answer_cat_id,
                    'answer_cat_name': e.answer_cat_name.replace("'", "\'"),
                    'step_id': e.step_id,
                    'added_date': e.added_date,
                    'last_updated': e.last_updated,
                    'answer_cat_status': e.answer_cat_status,
                    'sort_order': e.sort_order,
                    'answer_type': e.answer_type,
                    'created_by': e.created_by,
                    'belongs_to': e.belongs_to,
                    'added_by': e.added_by,
                    'mapp_cat_id': e.mapp_cat_id
                };
                //console.warn("Now Processing - REGISTRATION ANSWER CATS");
                //sqlhelper.insertJSONData('tbl_answer_category',data);
                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_answer_category', data, function (results) {

                //                 if (!results) {
                //                     isValid = false;
                //                     sum++;
                //                 }
                //                 iVal++;//onSuccess function

                //                 checkSyncComplete(iVal);//call this lastly method or each
                //             }, function () {
                //                 iVal++;//onError function
                ////                 console.warn("Failure Insert tbl_answer_category");
                //             });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_answer_category (' + fields + ') values(' + dataval + ')';
                //console.log(sqlquery);
                console.log(".");
                otherqueries.push(sqlquery);

            })
        }


        //console.log(typeof RegistrationData.registration_task.registration_module.answers);
        if (RegistrationData.registration_task.registration_module.answers != null && typeof RegistrationData.registration_task.registration_module.answers != "undefined" && RegistrationData.registration_task.registration_module.answers.length > 0) {
            var totalregans = $(RegistrationData.registration_task.registration_module.answers).length;
            var regans = 1;
            $(RegistrationData.registration_task.registration_module.answers).each(function(i, e) {



                var todeelete = {
                    where: {
                        'answer_id': e.answer_id,
                    }
                };
                var where = sqlhelper.generateUpdateFields(todeelete.where);

                var sqlquery = "DELETE FROM tbl_answers where " + where;
                console.log(sqlquery);
                otherqueries.push(sqlquery);

                var data = {
                    'answer_id': e.answer_id,
                    'answer': e.answer.replace("'", "\'"),
                    'step_id': e.step_id,
                    'answer_cat_id': e.answer_cat_id,
                    'added_date': e.added_date,
                    'last_updated': e.last_updated,
                    'answer_status': e.answer_status,
                    'sort_order': e.sort_order,
                    'answer_type': e.answer_type,
                    'created_by': e.created_by,
                    'belongs_to': e.belongs_to,
                    'mapped_answer_id': e.mapped_answer_id,
                    'special_answer': e.special_answer,
                    'difficulty_id': e.difficulty_id
                };
                //console.warn("Now Processing - REGISTRATION ANSWERS");
                // sqlhelper.insertJSONData('tbl_answers',data);

                //totalLengths++;
                // sqlhelper.insertJSONDataFirstSync(tx_reg,'tbl_answers', data, function (results) {

                //              if (!results) {
                //                  isValid = false;
                //                  sum++;
                //              }
                //              iVal++;//onSuccess function

                //              checkSyncComplete(iVal);//call this lastly method or each
                //          }, function () {
                //              iVal++;//onError function
                ////              console.warn("Failure Insert tbl_answers");
                //          });
                var fields = sqlhelper.separateFieldData(data, "field");
                var dataval = sqlhelper.separateFieldData(data, "value");
                var sqlquery = 'INSERT INTO tbl_answers (' + fields + ') values(' + dataval + ')';
                //console.log(sqlquery);
                console.log(".");
                otherqueries.push(sqlquery);



            })
        }
        //console.log(otherqueries);
        console.log("Array prepared successfully now inserting into database");
        sqlhelper.db.transaction(function(tx) {
            for (i = 0; i < otherqueries.length; i++) {
                //console.log(otherqueries[i]);
                try {
                    if (otherqueries[i].indexOf("DELETE") == -1) {
                        console.log("sql >> " + otherqueries[i]);
                        tx.executeSql(otherqueries[i], [], function() {
                            checkSyncComplete(++iVal);
                        })
                    } else {
                        tx.executeSql(otherqueries[i]);
                    }


                } catch (ex) {
                    iVal++;
                    console.log("Error at" + i);
                }


            }
        });

        function checkSyncComplete(i) {
            //console.log(i);
            console.log("I = " + i + ", Total Length = " + totalLengths);

            if ($(".download-content-msg").length > 0) {
                pcdone = Math.round((100 / totalLengths) * i);
                $(".download-content-msg").find(".download-msg-preparing").hide();
                $(".download-content-msg").find(".download-progress-holder").show();
                $(".download-content-msg").find(".pc-done").html(pcdone + "% done ");
                $(".download-content-msg").find(".download-progress").css("width", pcdone + "%");
                if ($(".ui-loader").is(":visible")) $(".ui-loader").hide();
            }
            // console.log(pcdone);
            // if(pcdone>98) //sometimes download stucks at 98% , so let them login, dirty fix, needs imrovement
            // {
            //   var b = setTimeout(function(){
            //       if(pcdone!=100){
            //           if(typeof callback!="undefined"){
            //             console.log("Login now");
            //             callback();
            //           }
            //           if(showDialog==true){
            //              $(".download-content-msg").hide();
            //               $(".download-overlay").hide();
            //           }
            //           offlinehelper.resetSyncProgressBar();//just reset the sync dialog's progressbar width and percentage
            //           offlinehelper.syncstarted=false;
            //           offlinehelper.loginstarted=true;
            //           filehelper.downloadModuleFiles(offlinehelper.modulefiles);
            //           $(".ui-loader").hide();
            //       }
            //       clearTimeout(b);
            //   },4000);
            // }

            if (i >= totalLengths) {
                //login code here
                if (typeof callback != "undefined") {

                    console.log("Login now");
                    callback();
                }

                if (showDialog == true) {
                    $(".download-content-msg").hide();
                    $(".download-overlay").hide();
                }

                offlinehelper.resetSyncProgressBar(); //just reset the sync dialog's progressbar width and percentage
                offlinehelper.syncstarted = false;
                offlinehelper.loginstarted = true;
               
                //if(offlinehelper.loggingOut==false){
                //  filehelper.downloadModuleFiles();
                //}
            }
        }
    },
    saveTraining: function(json, success) {
        sqlhelper.insertJSONData('tbl_training', json);
        if (navigator.onLine && offlinehelper.syncstarted == false)
            offlinehelper.prepareForSync();
        success();
    },
    saveReviewedTraining: function(json, success) {
        json = json;
        sqlhelper.updateData('tbl_training', json);
        if (navigator.onLine && offlinehelper.syncstarted == false)
            offlinehelper.prepareForSync();
        success();
    },
    saveReminder: function(json, success) {
        json = json;
        sqlhelper.updateData('tbl_user', json);
        success();
    },
    markHomeworkRead: function(json, success) {
        json = $.parseJSON(json);
        var toupdate = {
            where: {
                'assignment_id': json.assignmentId,
            },
            fields: {
                'already_viewed': 1,
                'updated': 1
            }
        };
        sqlhelper.updateData('tbl_homework_assignments', toupdate);
        var response = {
            status: 'ok'
        };
        success(response);
    },
    markCrisisplanRead: function(json, success) {
        json = $.parseJSON(json);
        var toupdate = {
            where: {
                'plan_id': json.planId,
            },
            fields: {
                'already_read': 1,
                'updated': 1
            }
        };
        sqlhelper.updateData('tbl_crisisplans', toupdate);
        var response = {
            status: 'ok'
        };
        success(response);
    },
    getOldTrainings: function(json, success) {
        json = $.parseJSON(json);
        taskid = json.taskid;
        var toreturn = {
            'status': 'ok'
        };
        $(Training.TaskLists).each(function(i, e) {
            if (e.taskid == taskid) {

                toreturn.data = e.training;

            }

        })
        console.log(toreturn);
        success(toreturn)
    },

    GetActivityperweek: function(json, success) {
        json = $.parseJSON(json);
        taskid = json.taskid;

        var toreturn = {
            'status': 'ok',
            "data": {
                "task_id": "",
                "startdate": "",
                "todaydate": "",
                "TodayDays": 1,
                "NoOfWeek": 1,
                "TotalNoPractice": "",
                "weeksData": []
            }
        }; // Demo json we update data below

        var task = {}; // Get a task detail from tasklist
        $(Training.TaskLists).each(function(i, e) {




            if (parseInt(e.taskid) == taskid) {

                task = e;

            }
        })

        if (task.training == undefined) {
            console.log("No training found");
            toreturn.status = "Not ok";
            success(toreturn);
            return;
        }
        console.log(task.training);

        var lstindex = task.training.length; // First training of the task is in out last index

        var startdate = task.training[parseInt(lstindex) - 1].trainingdatetime; // Get the date

        var enddate = task.training[0].trainingdatetime; // Get the last time task was done by user
        toreturn.data.task_id = taskid;
        toreturn.data.startdate = moment(startdate).format("YYYY-MM-DD"); // initiating start date on return array
        startdate = moment(startdate).format("YYYY-MM-DD");
        enddate = moment().format("YYYY-MM-DD");
        toreturn.data.todaydate = moment().format("YYYY-MM-DD"); // initiating today date on return array
        toreturn.data.TodayDays = Math.ceil(moment(enddate).diff(moment(startdate), 'days', true)) + 1; // initiating Total day from start to end
        var weekdays = [];
        calculatingdate = startdate;


        // Now finding out weeks spent on training with training in each week
        while (Date.parse(calculatingdate) <= Date.parse(enddate)) {

            n = calculatingdate;
            m = moment(calculatingdate).add(7, "days").format("YYYY-MM-DD"); // Add 7 day to start date for looping
            calculatingdate = m;
            count = 0;
            $(task.training).each(function(i, e) {
                if (moment(e.trainingdatetime).diff(n) >= 0 && moment(e.trainingdatetime).diff(calculatingdate) < 0) {
                    console.log("task " + e.trainingdatetime);
                    count++;

                }

            })

            weekdays.push(count);

            console.log(calculatingdate);
            // m = moment(calculatingdate).add(7,"days").format("YYYY-MM-DD"); // Add 7 day to start date for looping
            //calculatingdate=m;
        }


        toreturn.data.NoOfWeek = weekdays.length; // initiating total no. of week
        toreturn.data.TotalNoPractice = lstindex; // initiating total no. of practice done
        toreturn.data.weeksData = weekdays; // initiating total no. of weeks
        console.log("Return from activity per week");
        console.log(toreturn);
        success(toreturn);
    },
    GetActivityperday: function(json, success) {
        // Need to find logic to find starting and ending date.
        var toreturn = {
            "status": "ok",
            "data": {
                "startdate": "2014-03-12",
                "todaydate": "2015-07-03",
                "TodayDays": 479,
                "NoOfWeek": 69,
                "TotalNoPractice": "0",
                "weeksData": [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 68, 91, 46, 1, 53, 0, 3, 2, 2, 0, 0, 1, 0, 20, 6, 2]
            }
        }; // Demo json we update data below

        var task = {}; // Get a task detail from tasklist
        var traininglist=[];
        console.log(task);
        var trainingstartdate="";
         $(Training.TaskLists).each(function(i, e) {
            if(e.training!=null && e.training!=undefined && e.training.length>0){
                traininglist.push(e.training);     

                if(trainingstartdate==""){
                    trainingstartdate=e.training[0].trainingDateTime;
                }else{
                    newdate=e.training[0].trainingDateTime;
                    if(Math.ceil(moment(newdate).diff(moment(trainingstartdate), 'days', true))>0){
                        trainingstartdate=newdate;
                    }
                }
            }
        })

        if (traininglist.length<=0) {
            console.log("No training found");
            toreturn.status = "Not ok";
            success(toreturn);
            return;
        }
        //  var lstindex=task.training.length; // First training of the task is in out last index

        var startdate = moment(trainingstartdate).format("YYYY-MM-DD"); // Get the date

        var enddate = moment().format("YYYY-MM-DD"); // Get the last time task was done by user
        //toreturn.data.task_id=taskid;
        toreturn.data.startdate = moment(startdate).format("YYYY-MM-DD"); // initiating start date on return array
        startdate = moment(startdate).format("YYYY-MM-DD");
        enddate = moment(enddate).format("YYYY-MM-DD");
        toreturn.data.todaydate = moment().format("YYYY-MM-DD"); // initiating today date on return array
        toreturn.data.TodayDays = Math.ceil(moment(enddate).diff(moment(startdate), 'days', true)) + 1; // initiating Total day from start to end
        var weekdays = [];
        calculatingdate = startdate;

        var totalpractice = 0;
        var count = 0;
        var prevdate = "";
        // Now finding out weeks spent on training with training in each week
        while (Date.parse(calculatingdate) <= Date.parse(enddate)) {

            prevdate = calculatingdate;
            m = moment(calculatingdate).add(7, "days").format("YYYY-MM-DD"); // Add 7 day to start date for looping
            calculatingdate = m;
            // count=0;
            $(Training.TaskLists).each(function(i, e) {
                task = e;
                $(task.training).each(function(i, e) {
                    var date = moment(e.trainingdatetime).format("YYYY-MM-DD");
                    if (moment(date).diff(calculatingdate) < 0 && moment(date).diff(prevdate) >= 0) {
                        console.log(date);
                        count++;
                        totalpractice++;
                    }

                })
            })

            weekdays.push(count);

            console.log(calculatingdate);
            // m = moment(calculatingdate).add(1,"days").format("YYYY-MM-DD"); // Add 7 day to start date for looping
            // calculatingdate=m;
        }


        toreturn.data.NoOfWeek = weekdays.length; // initiating total no. of week
        toreturn.data.TotalNoPractice = totalpractice; // initiating total no. of practice done
        toreturn.data.weeksData = weekdays; // initiating total no. of weeks
        console.log(toreturn);
        success(toreturn);
    },
    Getestimatesfromstart: function(json, success) {
        json = $.parseJSON(json);
        taskid = json.taskid;
        var toreturn = {
            'status': 'ok',
            "data": {
                "task_id": "",
                "startdate": "",
                "todaydate": "",
                "TodayDays": 1,
                "Estimates": []
            }
        }; // Demo json we update data below

        var task = {}; // Get a task detail from tasklist
        $(Training.TaskLists).each(function(i, e) {
            if (e.taskid == taskid) {

                task = e;

            }

        })
        console.log(task);

        var lstindex = task.training.length; // First training of the task is in out last index

        var startdate = task.training[parseInt(lstindex) - 1].trainingdatetime; // Get the date

        var enddate = task.training[0].trainingdatetime; // Get the last time task was done by user
        toreturn.data.task_id = taskid;
        toreturn.data.startdate = moment(startdate).format("YYYY-MM-DD"); // initiating start date on return array
        startdate = moment(startdate).format("YYYY-MM-DD");
        enddate = moment().format("YYYY-MM-DD");
        toreturn.data.todaydate = moment().format("YYYY-MM-DD"); // initiating today date on return array
        toreturn.data.TodayDays = Math.ceil(moment(enddate).diff(moment(startdate), 'days', true)) + 1; // initiating Total day from start to end
        var Estimates = [];

        $(task.training).each(function(i, e) {
            Estimates.push(e.estimatedvalue);


        })

        toreturn.data.Estimates = Estimates; // initiating total no. of weeks
        console.log(toreturn);
        success(toreturn);
    },

    ValidateUser: function(json, success) {
        json = JSON.parse(json);
        console.log(json);
        //var sql="SELECT *,hasRegistrations as hasRegistration from tbl_user where (username='"+json.username.capitalizeFirstLetter()+"' OR username='"+json.username.smallFirstLetter()+"' OR username='"+json.username.toUpperCase()+"' OR username='"+json.username.toLowerCase()+"') and password='"+json.password+"';";
        
        var sql = "SELECT * from tbl_user where username='" + json.username + "' COLLATE NOCASE and password='" + json.password + "';";
        console.log(sql);
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sql, [], function(tx, results) {
                if (results.rows.length > 0) {
                    console.log(results.rows.item(0));
                    var userdata = results.rows.item(0);
                    console.log("Result data is " + results);
                    var len = results.rows.length;
                    console.log("Length is " + len);
                    console.log("User found && userdetail is ");
                    console.log(userdata);
                    //userdata=$.parseJSON(userdata);
                    returndata = {};
                    returndata.data = userdata;
                    returndata.status = "ok";

                    success(returndata);

                    /*var enabledHomeworks = offlinehelper.ShowHideModules("homework_id");
                    if (typeof enabledHomeworks == "object") {
                        if (enabledHomeworks.length > 0) {
                            $hwIDs = enabledHomeworks.join();
                            var sqlTotalHomeworks = "SELECT count(*) as totalhomeworks FROM tbl_homeworks  INNER JOIN tbl_homework_assignments ON (tbl_homework_assignments.homework_id=tbl_homeworks.homework_id) WHERE tbl_homeworks.homework_status=1 AND tbl_homeworks.homework_id IN(" + $hwIDs + ")";
                            var sqlNewHomeworks = "SELECT count(*) as totalhomeworks FROM tbl_homeworks  INNER JOIN tbl_homework_assignments ON (tbl_homework_assignments.homework_id=tbl_homeworks.homework_id) where already_viewed=0 AND tbl_homeworks.homework_status=1 AND tbl_homeworks.homework_id IN(" + $hwIDs + ")";
                        } else {
                            var sqlTotalHomeworks = "SELECT count(*) as totalhomeworks FROM tbl_homeworks  INNER JOIN tbl_homework_assignments ON (tbl_homework_assignments.homework_id=tbl_homeworks.homework_id) WHERE tbl_homeworks.homework_status=1 AND 1=2";
                            var sqlNewHomeworks = "SELECT count(*) as totalhomeworks FROM tbl_homeworks  INNER JOIN tbl_homework_assignments ON (tbl_homework_assignments.homework_id=tbl_homeworks.homework_id) where already_viewed=0 AND tbl_homeworks.homework_status=1 AND 1=2";
                            //1=2 used in above queries just because no homeworks are activated and we don't want to fetch them.
                        }

                    } else {
                        var sqlTotalHomeworks = "SELECT count(*) as totalhomeworks FROM tbl_homeworks  INNER JOIN tbl_homework_assignments ON (tbl_homework_assignments.homework_id=tbl_homeworks.homework_id) WHERE tbl_homeworks.homework_status=1";
                        var sqlNewHomeworks = "SELECT count(*) as totalhomeworks FROM tbl_homeworks  INNER JOIN tbl_homework_assignments ON (tbl_homework_assignments.homework_id=tbl_homeworks.homework_id) where already_viewed=0 AND tbl_homeworks.homework_status=1";
                    }



                    sqlhelper.db.transaction(function(tx) {

                        tx.executeSql(sqlTotalHomeworks, [], function(tx, results) {
                            console.warn("HOMEWORK TOTAL = " + sqlTotalHomeworks);
                            returndata_hw = {
                                total_homeworks: 0,
                                new_homeworks: 0
                            };
                            // console.log(results.rows.item(0));
                            returndata_hw.total_homeworks = results.rows.item(0).totalhomeworks;

                            sqlhelper.db.transaction(function(tx) {
                                tx.executeSql(sqlNewHomeworks, [], function(tx, results) {
                                    console.warn("TOTAL NEW HOMEWORK = " + sqlNewHomeworks);
                                    console.log(results.rows.item(0));
                                    returndata_hw.new_homeworks = results.rows.item(0).totalhomeworks;

                                    returndata.data.homeworks = JSON.stringify(returndata_hw);

                                    sqlhelper.db.transaction(function(tx) {
                                        tx.executeSql("SELECT count(*) as total_crisis_plans FROM tbl_crisisplans WHERE plan_status=1;", [], function(tx, results) {

                                            returndata_hw = {
                                                total_crisis_plans: 0,
                                                new_crisis_plans: 0
                                            };
                                            console.log(results.rows.item(0));
                                            returndata_hw.total_crisis_plans = results.rows.item(0).total_crisis_plans;

                                            sqlhelper.db.transaction(function(tx) {
                                                tx.executeSql("SELECT count(*) as total_crisis_plans FROM tbl_crisisplans where already_read=0 AND plan_status=1;", [], function(tx, results) {

                                                    console.log(results.rows.item(0));
                                                    returndata_hw.new_crisis_plans = results.rows.item(0).total_crisis_plans;

                                                    returndata.data.crisisplans = JSON.stringify(returndata_hw);
                                                    success(returndata);

                                                });
                                            });

                                        });
                                    });
                                });
                            });

                        });
                    });*/


                } else {
                    console.warn("No User found");
                    success(true);
                }
            });
        });
    },
    activeTasks: function(json, success) {

        json = JSON.parse(json);
        var sql = "SELECT rowid, app_task_id,task_id as taskid,0 as TodayDays,0 as practice,0 as training ,task_heading as heading,task_tag as tag,task_hide_graph as hide_graph from tbl_tasks;";

        var task_json = {};
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sql, [], function(txs, results) {
                if (results.rows.length > 0) {

                    returndata = {
                        "status": "ok",
                        data: []
                    };

                    for (i = 0; i < results.rows.length; i++) {
                        returndata.data.push(results.rows.item(i));
                    }

                    count = 0;
                    totalloop = returndata.data.length;
                    var returningData = {
                        "status": "ok",
                        data: []
                    };
                    if (totalloop != 0) {

                        $(returndata.data).each(function(i, e) {

                            sqlhelper.db.transaction(function(tx) {
                                $sqlTask = "SELECT rowid,app_training_id,*,trainingDateTime as trainingdatetime,training_id as trainingId,estimatedValue as estimatedvalue  FROM tbl_training where task_id='" + e.taskid + "' order by trainingdatetime DESC";

                                tx.executeSql($sqlTask, [], function(txs, results) {

                                    if (results.rows.length > 0) {
                                        trainingdone = results.rows.length;
                                        console.log("training done is : " + trainingdone)
                                        e.practice = trainingdone;
                                        lstindex = results.rows.length

                                        var startdate = results.rows.item(parseInt(lstindex) - 1).trainingdatetime; // Get the date
                                        startdate = moment(startdate).format("YYYY-MM-DD"); // initiating start date on return array

                                        enddate = moment().format("YYYY-MM-DD");

                                        e.TodayDays = Math.ceil(moment(enddate).diff(moment(startdate), 'days', true)) + 1; // initiating 
                                        var traininglist = [];
                                        for (j = 0; j < results.rows.length; j++) {
                                            traininglist.push(results.rows.item(j));
                                        }

                                        e.training = traininglist;
                                        count++;
                                        returningData.data.push(e);
                                        if (totalloop == count) {
                                            // console.log("Returning data and my count is "+count);
                                            success(returningData);
                                        }
                                    } else {
                                        e.training = {};
                                        e.TodayDays = 1;
                                        success(returndata);
                                    }
                                });
                            });





                        })
                    } else {
                        returndata = {
                            "status": "ok",
                            data: []
                        };
                        success(returndata);
                    }

                    //     console.log(results.rows.item(0));
                    // var userdata=results.rows.item(0);
                    // console.log("Result data is "+results);

                    // var len = results.rows.length; 
                    // console.log("Length is "+ len);

                    // console.log("User found && userdetail is ");
                    // console.log(userdata);
                    // //userdata=$.parseJSON(userdata);

                    // returndata.data=userdata;
                    // returndata.status="ok";

                    //  console.log(success);

                } else {

                    console.log("No User found");

                    returndata = {
                        "status": "ok",
                        data: []
                    };
                    success(returndata);

                }
            });
        });

    },
    syncWithOnline: function() {
        var showSyncDialog = (arguments.length > 0 && arguments[0] !== true) ? arguments[0] : true;

        clearInterval(offlinehelper.syncInterval);
        var userdetails = $.jStorage.get('userdetails');
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"ABBBSBS","offlinedata":' + JSON.stringify(offlinehelper.dataForServer) + '}';
        callWebServiceLive('sync_to_server', json, function(res) {
            offlinehelper.dataForServer = {
                    'training': [],
                    'Registraion': {
                        'answers': [],
                        'answercat': [],
                        'patientAssignment': [],
                        'patientAssignmentDetail': [],
                        'crisisplan': [],
                        'homework_assignment': []
                    },
                    'other_modules': {
                        'feelingAssignments': [],
                        'thoughtAssignments': [],
                        'exposureAssignments': [],
                        'skillAssignments': []
                    }
                },
                userdetails = $.jStorage.get('userdetails');
            /* console.clear();
             //console.warn("SYNC RETURN = "+JSON.stringify(res));*/
            var json_update = {
                where: {
                    'app_user_id': userdetails.app_user_id,
                },
                fields: {
                    'fullname': res.data.Name,
                    'new_start_page': res.data.new_start_page,
                    'enable_msg_alert': res.data.enable_msg_alert,
                    'training': JSON.stringify(res.data.training),
                    'hasRegistrations': res.data.hasRegistration,
                    'homeworks': JSON.stringify(res.data.homeworks),
                    'crisisplans': JSON.stringify(res.data.crisisplans),
                    'reminders': JSON.stringify(res.data.reminder),
                    'specialAnswers': res.data.specialAnswers,
                    'feedbackMessage': JSON.stringify(res.data.feedback),
                    'availableModules': JSON.stringify(res.data.available_modules),
                    'hide_graph': res.data.hide_graph
                }
            };
            sqlhelper.updateData('tbl_user', json_update, function() {
                console.log("User data updated");
            });
            userdetails.specialAnswers = res.data.specialAnswers;
            userdetails.new_start_page = res.data.new_start_page;
            userdetails.enable_msg_alert = res.data.enable_msg_alert;
            userdetails.hide_graph = res.data.hide_graph;
            userdetails.hasRegistrations = res.data.hasRegistrations;
            userdetails.tokenkey=$.jStorage.get('bip_jwt');
            $.jStorage.set('userdetails', userdetails);
            if (res.data.new_start_page != 3) {

                $('#RegistrationTask div:first a:first').show()

            } else {
                $('#RegistrationTask div:first a:first').hide()
            }



            var queries = [];

            queries[0] = "DELETE FROM tbl_training where training_id='0'";
            queries[1] = "DELETE FROM tbl_answers where answer_id='0'";
            queries[2] = "DELETE FROM tbl_answer_category where answer_cat_id='0'";
            queries[3] = "DELETE FROM tbl_patient_assignment_details where assignment_details_id='0'";
            queries[4] = "DELETE FROM tbl_patient_assignments where assignment_id='0'";
            queries[5] = "DELETE FROM tbl_v2_sk_exposure_patients_assignments_details where assignment_details_id='0'";
            queries[6] = "DELETE FROM tbl_v2_sk_exposure_patients_assignments where assignment_id='0'";
            queries[7] = "DELETE FROM tbl_v2_sk_skills_assignments_details where assignment_details_id='0'";
            queries[8] = "DELETE FROM tbl_v2_sk_skills_assignments where assignment_id='0'";
            queries[9] = "DELETE FROM tbl_v2_feelings_assignments where assignment_id='0'";
            queries[10] = "DELETE FROM tbl_v2_sk_thoughts_assignments where assignment_id='0'";



            sqlhelper.db.transaction(function(tx) {
                for (var k = 0; k < queries.length; k++) {
                    tx.executeSql(queries[k], [], function(txs, results) {
                        //console.log("All new added traings are deleted. Training synced with server.");
                    });
                }

            });

            // sqlhelper.db.transaction(function(tx) {
            //    tx.executeSql("DELETE FROM tbl_training where training_id='0'", [], function(txs,results){
            //        console.log("All new added traings are deleted. Training synced with server.");
            //    });
            //  });

            // sqlhelper.db.transaction(function(tx) {
            //    tx.executeSql("DELETE FROM tbl_answers where answer_id='0'", [], function(txs,results){
            //        console.log("All new added answers are deleted.");
            //    });
            //  });   
            // sqlhelper.db.transaction(function(tx) {
            //    tx.executeSql("DELETE FROM tbl_answer_category where answer_cat_id='0'", [], function(txs,results){
            //        console.log("All new added answers are deleted.");
            //    });
            //  });
            // sqlhelper.db.transaction(function(tx) {
            //    tx.executeSql("DELETE FROM tbl_patient_assignment_details where assignment_details_id='0'", [], function(txs,results){
            //        console.log("All new patient assignments are deleted.");
            //    });
            //  });    
            // sqlhelper.db.transaction(function(tx) {
            //    tx.executeSql("DELETE FROM tbl_patient_assignments where assignment_id='0'", [], function(txs,results){
            //        console.log("All new patient assignments are deleted.");
            //    });
            //  });

            //added by sabin >>
            // sqlhelper.db.transaction(function(tx) {
            //    tx.executeSql("DELETE FROM tbl_v2_sk_exposure_patients_assignments_details where assignment_details_id='0'", [], function(txs,results){
            //        console.log("All new exposure assignment details are deleted.");
            //    });
            // });

            // sqlhelper.db.transaction(function(tx) {
            //    tx.executeSql("DELETE FROM tbl_v2_sk_exposure_patients_assignments where assignment_id='0'", [], function(txs,results){
            //        console.log("All new exposure assignments are deleted.");
            //    });
            //  });

            // sqlhelper.db.transaction(function(tx) {
            //   tx.executeSql("DELETE FROM tbl_v2_sk_skills_assignments_details where assignment_details_id='0'", [], function(txs,results){
            //       console.log("All new skill assignment details are deleted.");
            //   });
            // });    

            // sqlhelper.db.transaction(function(tx) {
            //    tx.executeSql("DELETE FROM tbl_v2_sk_skills_assignments where assignment_id='0'", [], function(txs,results){
            //        console.log("All new skill assignments are deleted.");
            //    });
            //  });

            // sqlhelper.db.transaction(function(tx) {
            //    tx.executeSql("DELETE FROM tbl_v2_feelings_assignments where assignment_id='0'", [], function(txs,results){
            //        console.log("All new feeling assignments are deleted.");
            //    });
            //  });

            // sqlhelper.db.transaction(function(tx) {
            //    tx.executeSql("DELETE FROM tbl_v2_sk_thoughts_assignments where assignment_id='0'", [], function(txs,results){
            //        console.log("All new thoughts assignments are deleted.");
            //    });
            //  });

            //added by sabin <<


            var json_update = {
                where: {
                    '1': 1
                },
                fields: {
                    'edited': '0'
                }
            };


            sqlhelper.updateData('tbl_patient_assignments', json_update, function() {
                console.log("All edited trainings cleared");
            });
            sqlhelper.updateData('tbl_training', json_update, function() {
                console.log("All edited trainings cleared");
            });
            var json_update = {
                where: {
                    '1': 1
                },
                fields: {
                    'updated': '0'
                }
            };


            sqlhelper.updateData('tbl_crisisplans', json_update, function() {
                console.log("All edited trainings cleared");
            });
            sqlhelper.updateData('tbl_homework_assignments', json_update, function() {
                console.log("All edited trainings cleared");
            });

            console.log(res);

            var tasks = res.data.tasks;
            var deletedTasks = res.data.deletedTasks;
            var trainings = res.data.trainings;
            var count = 0;

            if (deletedTasks.length > 0) {
                var delstring = "";
                $(deletedTasks).each(function(i, e) {
                    if (delstring != "")
                        delstring += " OR ";
                    delstring += " task_id='" + e + "'";
                });

                sqlhelper.db.transaction(function(tx) {
                    tx.executeSql("DELETE FROM tbl_tasks where " + delstring, [], function(txs, results) {

                    });
                });

                sqlhelper.db.transaction(function(tx) {
                    tx.executeSql("DELETE FROM tbl_training where " + delstring, [], function(txs, results) {

                    });
                });
            }

            if (tasks.length == 0) {
                offlinehelper.syncstarted = false;
                offlinehelper.synctime = 0;
            }

            $(trainings).each(function(i, e) {
                var data = {
                    'training_id': e.id,
                    'task_id': e.task_id,
                    'trainingDateTime': e.trainingdatetime,
                    'estimatedValue': e.estimatedvalue,
                    'trainingDuration': e.training_duration,
                    'type': e.type,
                    'comment': e.comment,
                    'edited': e.edited,
                    'estimatedValueEnd': e.estimatedvalue_end,
                };
                sqlhelper.insertJSONData('tbl_training', data);
            });


            $(tasks).each(function(i, e) {
                count++;
                sqlhelper.db.transaction(function(tx) {
                    tx.executeSql("Select * FROM tbl_tasks where task_id='" + e.taskid + "'", [], function(txs, results) {
                        var startinterval;
                        if (count == tasks.length) {
                            startinterval = function() {
                                offlinehelper.syncstarted = false;
                            }
                        } else {
                            startinterval = function() {

                            }
                        }
                        if (results.rows.length != 0) {

                            var json_update = {
                                where: {
                                    'task_id': e.taskid,
                                },
                                fields: {
                                    'task_tag': e.tag,
                                    'task_heading': e.heading,
                                    'task_hide_graph': e.hide_graph
                                }
                            };
                            sqlhelper.updateData('tbl_tasks', json_update, startinterval);

                        } else {

                            var json_update = {
                                'task_id': e.taskid,
                                'task_tag': e.tag,
                                'task_heading': e.heading,
                                'task_hide_graph': e.hide_graph
                            };
                            sqlhelper.insertJSONData('tbl_tasks', json_update, startinterval);

                        }

                    });
                });

            })


            offlinehelper.syncRegistration(res.data.registration_stuffs, function() {
                "Registration synced successfully"
            }, showSyncDialog);
        })
    },
    prepareForSync: function() {
        var showSyncDialog = (arguments.length > 0 && arguments[0] !== true) ? false : true;


        if (navigator.onLine == true && offlinehelper.syncstarted == false) {

            offlinehelper.syncstarted = true;
            offlineInterval = setInterval(function() {
                if (offlinehelper.syncstarted == true)
                    offlinehelper.synctime++;
                console.log("Sync state : " + offlinehelper.syncstarted + " Synced time : " + offlinehelper.synctime);

                if (offlinehelper.synctime > 55) {
                    offlinehelper.syncstarted = false;
                    offlinehelper.synctime = 0;
                    console.log("Failed to  sync data. Connection lost");
                    $.mobile.hidePageLoadingMsg();
                    clearInterval(offlineInterval);
                }

                if (offlinehelper.syncstarted == false) {
                    offlinehelper.synctime = 0;
                    console.log("Data synced successfully");
                    if (offlinehelper.currentpage == "TrainingList")
                        Training.setTrainings();
                    $.mobile.hidePageLoadingMsg();
                    clearInterval(offlineInterval);
                }

            }, 500)
            console.log("Device is online we can have a sync now");
            var totalcount = 0;
            sqlhelper.db.transaction(function(tx) {
                tx.executeSql("SELECT rowid,app_training_id,comment,edited,type,task_id as taskid,trainingDateTime as trainingdatetime,training_id as trainingId,estimatedValue as estimatedvalue,trainingDuration as training_duration,estimatedValueEnd as estimatedvalue_end  FROM tbl_training where trainingId=0 or edited=1", [], function(txs, results) {
                    // console.log(offlinehelper.count);
                    trainingdone = results.rows.length;
                    console.log("training done is : " + trainingdone)

                    var traininglist = [];
                    for (i = 0; i < results.rows.length; i++) {
                        traininglist.push(results.rows.item(i));
                    }


                    offlinehelper.dataForServer.training = traininglist;
                    console.log(offlinehelper.dataForServer);
                    console.log("Returned from training");
                    totalcount++;


                });
            });

            sqlhelper.db.transaction(function(tx) {
                tx.executeSql("SELECT * from tbl_answers where answer_id=0 and (app_answer_cat_id='undefined' OR app_answer_cat_id=0 OR answer_cat_id>0)", [], function(txs, results) {
                    // console.log(offlinehelper.count);


                    var answers_uncat = [];
                    for (i = 0; i < results.rows.length; i++)
                        answers_uncat.push(results.rows.item(i));
                    offlinehelper.dataForServer.Registraion.answers = answers_uncat;
                    console.log("Returned from tbl_answers");
                    totalcount++;
                });
            });

            sqlhelper.db.transaction(function(tx) {
                tx.executeSql("SELECT * from tbl_homework_assignments where updated=1", [], function(txs, results) {
                    // console.log(offlinehelper.count);
                    var homework_assignment = [];
                    for (i = 0; i < results.rows.length; i++)
                        homework_assignment.push(results.rows.item(i));
                    offlinehelper.dataForServer.Registraion.homework_assignment = homework_assignment;
                    console.log("Returned from homework");
                    totalcount++;
                });
            });

            sqlhelper.db.transaction(function(tx) {
                tx.executeSql("SELECT * from tbl_crisisplans where updated=1", [], function(txs, results) {
                    // console.log(offlinehelper.count);
                    var crisisplan = [];
                    for (i = 0; i < results.rows.length; i++)
                        crisisplan.push(results.rows.item(i));
                    offlinehelper.dataForServer.Registraion.crisisplan = crisisplan;
                    console.log("Returned from crisisplan");
                    totalcount++;
                });
            });

            sqlhelper.db.transaction(function(tx) {
                tx.executeSql("SELECT *,0 as answer from tbl_answer_category where answer_cat_id=0", [], function(txs, results) {
                    // console.log(offlinehelper.count);


                    var anscat = [];
                    for (i = 0; i < results.rows.length; i++)
                        anscat.push(results.rows.item(i));
                    var anscount = 1;
                    if (anscat.length > 0) {
                        $(anscat).each(function(i, e) {
                            sqlhelper.db.transaction(function(tx) {
                                tx.executeSql("SELECT * from tbl_answers where answer_id=0 and app_answer_cat_id=" + e.app_answer_cat_id, [], function(txs, results) {
                                    // console.log(offlinehelper.count);


                                    var answers = [];
                                    for (i = 0; i < results.rows.length; i++)
                                        answers.push(results.rows.item(i));
                                    e.answer = answers;
                                    if (anscount == anscat.length) {
                                        offlinehelper.dataForServer.Registraion.answercat = anscat;
                                        console.log("Returned from tbl_answer_category");
                                        totalcount++;
                                    }
                                    anscount++;

                                });
                            });
                        })
                    } else {

                        console.log("Returned from tbl_answer_category");
                        totalcount++;
                    }


                });
            });

            sqlhelper.db.transaction(function(tx) {
                tx.executeSql("SELECT *,0 as assignment_detail from tbl_patient_assignments where assignment_id=0 or edited=1", [], function(txs, results) {
                    var patientAssignment = [];
                    for (i = 0; i < results.rows.length; i++)
                        patientAssignment.push(results.rows.item(i));
                    var anscount = 1;
                    if (patientAssignment.length > 0) {
                        $(patientAssignment).each(function(i, e) {
                            sqlhelper.db.transaction(function(tx) {
                                tx.executeSql("SELECT * from tbl_patient_assignment_details where assignment_details_id=0 and app_assignment_id=" + e.app_assignment_id, [], function(txs, results) {
                                    // console.log(offlinehelper.count);


                                    var patientAssignmentDetail = [];
                                    for (i = 0; i < results.rows.length; i++)
                                        patientAssignmentDetail.push(results.rows.item(i));
                                    e.assignment_detail = patientAssignmentDetail;
                                    if (anscount == patientAssignment.length) {
                                        offlinehelper.dataForServer.Registraion.patientAssignment = patientAssignment;
                                        console.log("Returned from tbl_patient_assignments");
                                        totalcount++;
                                    }
                                    anscount++;

                                });
                            });
                        });
                    } else {

                        console.log("Returned from tbl_patient_assignments");
                        totalcount++;
                    }
                });
            });

            sqlhelper.db.transaction(function(tx) {
                tx.executeSql("SELECT *,0 as assignment_detail from tbl_patient_assignments where assignment_id=0", [], function(txs, results) {
                    // console.log(offlinehelper.count);


                    var patientAssignment = [];
                    for (i = 0; i < results.rows.length; i++)
                        patientAssignment.push(results.rows.item(i));
                    var anscount = 1;
                    if (patientAssignment.length > 0) {
                        $(patientAssignment).each(function(i, e) {
                            sqlhelper.db.transaction(function(tx) {
                                tx.executeSql("SELECT * from tbl_patient_assignment_details where assignment_details_id=0 and app_assignment_id=" + e.app_assignment_id, [], function(txs, results) {
                                    // console.log(offlinehelper.count);


                                    var patientAssignmentDetail = [];
                                    for (i = 0; i < results.rows.length; i++)
                                        patientAssignmentDetail.push(results.rows.item(i));
                                    e.assignment_detail = patientAssignmentDetail;
                                    if (anscount == patientAssignment.length) {
                                        offlinehelper.dataForServer.Registraion.patientAssignment = patientAssignment;
                                        console.log("Returned from tbl_patient_assignments");
                                        totalcount++;
                                    }
                                    anscount++;

                                });
                            });
                        })
                    } else {

                        console.log("Returned from tbl_patient_assignments");
                        totalcount++;
                    }


                });
            });

            sqlhelper.db.transaction(function(tx) {
                tx.executeSql("SELECT * from tbl_patient_assignment_details where assignment_details_id=0 and app_assignment_details_id NOT IN (SELECT app_assignment_details_id FROM tbl_patient_assignment_details where (app_assignment_id!=0 and app_assignment_id!='undefined' )) ", [], function(txs, results) {
                    // console.log(offlinehelper.count);


                    var patientAssignmentDetail = [];
                    for (i = 0; i < results.rows.length; i++)
                        patientAssignmentDetail.push(results.rows.item(i));

                    offlinehelper.dataForServer.Registraion.patientAssignmentDetail = patientAssignmentDetail;
                    console.log("Returned from tbl_patient_assignment_details");
                    totalcount++;


                });
            });

            sqlhelper.db.transaction(function(tx) {
                tx.executeSql("SELECT * from tbl_crisisplans where updated=1 ", [], function(txs, results) {
                    // console.log(offlinehelper.count);


                    var patientAssignmentDetail = [];
                    for (i = 0; i < results.rows.length; i++)
                        patientAssignmentDetail.push(results.rows.item(i));

                    offlinehelper.dataForServer.Registraion.crisisplan = patientAssignmentDetail;
                    console.log("Returned from crisisplan");
                    totalcount++;


                });
            });


            //ADDED BY SABIN >>

            sqlhelper.db.transaction(function(tx) {
                tx.executeSql("SELECT * from tbl_v2_feelings_assignments where assignment_id=0", [], function(txs, results) {

                    var feelingAssignments = [];
                    for (i = 0; i < results.rows.length; i++)
                        feelingAssignments.push(results.rows.item(i));

                    offlinehelper.dataForServer.other_modules.feelingAssignments = feelingAssignments;
                    console.log("Returned from Feeling assignments");
                    totalcount++;


                });
            });

            sqlhelper.db.transaction(function(tx) {
                tx.executeSql("SELECT * from tbl_v2_sk_thoughts_assignments where assignment_id=0", [], function(txs, results) {

                    var thoughtAssignments = [];
                    for (i = 0; i < results.rows.length; i++)
                        thoughtAssignments.push(results.rows.item(i));

                    offlinehelper.dataForServer.other_modules.thoughtAssignments = thoughtAssignments;
                    console.log("Returned from Thoughts assignments");
                    totalcount++;


                });
            });

            //Exposures
            sqlhelper.db.transaction(function(tx) {
                tx.executeSql("SELECT *,0 as assignment_detail from tbl_v2_sk_exposure_patients_assignments where assignment_id=0", [], function(txs, results) {
                    // console.log(offlinehelper.count);


                    var exposureAssignments = [];
                    for (i = 0; i < results.rows.length; i++)
                        exposureAssignments.push(results.rows.item(i));
                    var anscount = 1;
                    if (exposureAssignments.length > 0) {
                        $(exposureAssignments).each(function(i, e) {
                            sqlhelper.db.transaction(function(tx) {
                                tx.executeSql("SELECT * from tbl_v2_sk_exposure_patients_assignments_details where assignment_details_id=0 and app_assignment_id=" + e.app_assignment_id, [], function(txs, results) {
                                    // console.log(offlinehelper.count);


                                    var exposureAssignmentsDetail = [];
                                    for (i = 0; i < results.rows.length; i++)
                                        exposureAssignmentsDetail.push(results.rows.item(i));
                                    e.assignment_detail = exposureAssignmentsDetail;
                                    if (anscount == exposureAssignments.length) {
                                        offlinehelper.dataForServer.other_modules.exposureAssignments = exposureAssignments;
                                        console.log("Returned from tbl_v2_sk_exposure_patients_assignments");
                                        totalcount++;
                                    }
                                    anscount++;

                                });
                            });
                        })
                    } else {

                        console.log("Returned from tbl_v2_sk_exposure_patients_assignments");
                        totalcount++;
                    }


                });
            });



            //Skills
            sqlhelper.db.transaction(function(tx) {
                tx.executeSql("SELECT *,0 as assignment_detail from tbl_v2_sk_skills_assignments where assignment_id=0", [], function(txs, results) {
                    // console.log(offlinehelper.count);


                    var skillAssignments = [];
                    for (i = 0; i < results.rows.length; i++)
                        skillAssignments.push(results.rows.item(i));
                    var anscount = 1;
                    if (skillAssignments.length > 0) {
                        $(skillAssignments).each(function(i, e) {
                            sqlhelper.db.transaction(function(tx) {
                                tx.executeSql("SELECT * from tbl_v2_sk_skills_assignments_details where assignment_details_id=0 and app_assignment_id=" + e.app_assignment_id, [], function(txs, results) {
                                    // console.log(offlinehelper.count);


                                    var skillAssignmentsDetail = [];
                                    for (i = 0; i < results.rows.length; i++)
                                        skillAssignmentsDetail.push(results.rows.item(i));
                                    e.assignment_detail = skillAssignmentsDetail;
                                    if (anscount == skillAssignments.length) {
                                        offlinehelper.dataForServer.other_modules.skillAssignments = skillAssignments;
                                        console.log("Returned from tbl_v2_sk_exposure_patients_assignments");
                                        totalcount++;
                                    }
                                    anscount++;

                                });
                            });
                        })
                    } else {

                        console.log("Returned from tbl_v2_sk_exposure_patients_assignments");
                        totalcount++;
                    }


                });
            });
            //ADDED BY SABIN <<
            //
            offlinehelper.syncInterval = setInterval(function() {
                //console.warn("Total count is "+totalcount);
                if (totalcount == 13)
                    offlinehelper.syncWithOnline(showSyncDialog);
            }, 100);


        } else {
            console.log("Device is not online we cannot have a sync now");
        }
    },


    fetchRegistrations: function(json, success) {
        json = JSON.parse(json);
        if (json.show != "old") {
            var sql = "SELECT * from tbl_registrations where registration_status='1' ORDER BY sort_order ASC;";
        } else {
            var sql = "SELECT *,tbl_patient_assignments.answered_date as formatted_answer_date from tbl_patient_assignments INNER JOIN tbl_registrations ON (tbl_registrations.registration_id=tbl_patient_assignments.registration_id) where registration_status='1' ORDER BY answered_date DESC;";
        }
        //console.log(sql);
        var task_json = {};
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sql, [], function(txs, results) {
                if (results.rows.length > 0) {
                    returndata = {
                        "status": "ok",
                        data: [],
                        message: "",
                        old_registrations: 0
                    };
                    for (i = 0; i < results.rows.length; i++) {
                        returndata.data.push(results.rows.item(i));
                    }
                    var sql2 = "SELECT count(*) recCount FROM tbl_patient_assignments INNER JOIN tbl_registrations ON (tbl_registrations.registration_id=tbl_patient_assignments.registration_id) WHERE registration_status='1' ORDER BY answered_date DESC;";
                    tx.executeSql(sql2, [], function(txss, results2) {
                        returndata.old_registrations = results2.rows.item(0).recCount;
                        success(returndata);
                    });
                    //success(returndata);
                } else {
                    returndata.status = "error";
                    returndata.message = "No Registrations";
                }
            });
        });
    },

    fetchHomeworks: function(json, success) {
        json = JSON.parse(json);
        var enabledHomeworks = offlinehelper.ShowHideModules("homework_id");

        if (typeof enabledHomeworks == "object") {
            if (enabledHomeworks.length > 0) {
                $hwIDs = enabledHomeworks.join();
                var sql = "SELECT * from tbl_homeworks INNER JOIN tbl_homework_assignments ON (tbl_homework_assignments.homework_id=tbl_homeworks.homework_id) WHERE tbl_homeworks.homework_status=1 AND tbl_homeworks.homework_id IN (" + $hwIDs + ") ORDER BY tbl_homeworks.sort_order ASC;";
                console.log("HOMEOWKR LIST = " + sql);
            } else {
                return false;
            }
        } else {
            var sql = "SELECT * from tbl_homeworks INNER JOIN tbl_homework_assignments ON (tbl_homework_assignments.homework_id=tbl_homeworks.homework_id) WHERE tbl_homeworks.homework_status=1 ORDER BY tbl_homeworks.sort_order ASC;";
        }

        console.log(sql);
        var task_json = {};
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sql, [], function(txs, results) {
                if (results.rows.length > 0) {
                    returndata = {
                        "status": "ok",
                        data: [],
                        message: ""
                    };
                    for (i = 0; i < results.rows.length; i++) {
                        returndata.data.push(results.rows.item(i));
                    }
                    success(returndata);
                } else {
                    returndata.status = "error";
                    returndata.message = "No homeworks";
                }
            });
        });
    },

    fetchCrisisplans: function(json, success) {
        json = JSON.parse(json);
        var sql = "SELECT * from tbl_crisisplans WHERE plan_status=1;";
        //console.log(sql);
        var task_json = {};
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sql, [], function(txs, results) {
                if (results.rows.length > 0) {
                    returndata = {
                        "status": "ok",
                        data: [],
                        message: ""
                    };
                    for (i = 0; i < results.rows.length; i++) {
                        returndata.data.push(results.rows.item(i));
                    }
                    success(returndata);
                } else {
                    returndata.status = "error";
                    returndata.message = "No Crisis Plans";
                }
            });
        });
    },

    fetchRegistrationSteps: function(json, success) {
        json = JSON.parse(json);
        var sql = "SELECT * from tbl_registration_steps where registration_id='" + json.registration_id + "' and step_status='1' order by sort_order ASC;";
        
        var task_json = {};
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sql, [], function(txs, results) {
                if (results.rows.length > 0) {

                    returndata = {
                        "status": "ok",
                        data: {
                            "steps": [],
                            "old_assignment": null
                        },
                        message: "",
                        category: []
                    };
                    for (i = 0; i < results.rows.length; i++) {
                        returndata.data.steps.push(results.rows.item(i));
                    }
                    count = 0;
                    ordercount = 1;
                    if (json.assignment_id > 0 || json.app_assignment_id > 0) {
                        returndata.data.old_assignment = {
                            assignment: [],
                            details: []
                        };
                        sqlhelper.db.transaction(function(tx) {
                            //$assDetailSql = "SELECT * FROM tbl_patient_assignment_details where assignment_id ='"+json.assignment_id+"' OR app_assignment_id='"+json.app_assignment_id+"';";
                            $assDetailSql = "SELECT ad.*, s.step_name AS str_step_name,GROUP_CONCAT(ans.answer,'^') AS str_answer, GROUP_CONCAT((SELECT answer_cat_name  FROM tbl_answer_category WHERE answer_cat_id=ans.answer_cat_id),'^') AS str_cat_name FROM tbl_patient_assignment_details ad INNER JOIN tbl_registration_steps s ON s.step_id = ad.step_id INNER JOIN tbl_answers ans ON ans.answer_id=ad.answer_id WHERE ad.assignment_id='" + json.assignment_id + "' OR app_assignment_id='" + json.app_assignment_id + "' GROUP BY ad.step_id ORDER BY s.sort_order ASC;";
                            tx.executeSql($assDetailSql, [], function(txs, results) {
                                if (results.rows.length > 0) {
                                    var assignments = [];

                                    for (i = 0; i < results.rows.length; i++) {
                                        assignments.push(results.rows.item(i));
                                    }

                                    returndata.data.old_assignment.details = assignments;
                                }
                            });
                        });
                        sqlhelper.db.transaction(function(tx) {
                            // $assSql = "SELECT * FROM tbl_patient_assignments where assignment_id ='"+json.assignment_id+"' OR app_assignment_id='"+json.app_assignment_id+"';";
                            $assSql = "SELECT a.*, r.registration_name AS str_registration_name FROM tbl_patient_assignments a INNER JOIN tbl_registrations r ON r.registration_id=a.registration_id WHERE a.assignment_id ='" + json.assignment_id + "' OR app_assignment_id='" + json.app_assignment_id + "';";
                            tx.executeSql($assSql, [], function(txs, results) {
                                if (results.rows.length > 0) {
                                    var assignments = [];

                                    returndata.data.old_assignment.assignment = results.rows.item(0);
                                }
                            });
                        });

                        //fetch step name and sort order for date time template
                        sqlhelper.db.transaction(function(tx) {

                            $assDateTimeSql = "SELECT step_name, sort_order FROM tbl_registration_steps WHERE registration_id=(SELECT registration_id FROM tbl_patient_assignments WHERE assignment_id='" + json.assignment_id + "' OR app_assignment_id='" + json.app_assignment_id + "') AND template='steps_datetime';";
                            tx.executeSql($assDateTimeSql, [], function(txs, results) {
                                if (results.rows.length > 0) {

                                    returndata.data.old_assignment.datetime = results.rows.item(0);
                                }
                            });
                        });

                        //fetch step name and sort order for date  template
                        sqlhelper.db.transaction(function(tx) {

                            $assDateOnlySql = "SELECT step_name, sort_order FROM tbl_registration_steps WHERE registration_id=(SELECT registration_id FROM tbl_patient_assignments WHERE assignment_id='" + json.assignment_id + "' OR app_assignment_id='" + json.app_assignment_id + "') AND template='steps_date';";
                            tx.executeSql($assDateOnlySql, [], function(txs, results) {
                                if (results.rows.length > 0) {

                                    returndata.data.old_assignment.dateonly = results.rows.item(0);
                                }
                            });
                        });
                    }
                    var currentdate = moment().format("D MMM YYYY");
                    var current_time = moment().format("HH:mm");

                    $(returndata.data.steps).each(function(i, e) {

                        offlinehelper.datafetched = false;
                        e.current_date = currentdate;
                        e.current_time = current_time;
                        e.hid_date = moment().format("YYYY-MM-DD");
                        e.hid_time = moment().format("HH:mm:ss");
                        e.show_order = ordercount;

                        ordercount++;
                        if (e.special_case != 1) {

                            sqlhelper.db.transaction(function(tx) {
                                tx.executeSql("SELECT * FROM tbl_answer_category where step_id ='" + e.step_id + "' ORDER BY sort_order ASC;", [], function(txs, results) {
                                   /* console.log(e.step_id + " " + results.rows.length);
                                    console.log("SELECT * FROM tbl_answer_category where step_id ='" + e.step_id + "' ORDER BY sort_order ASC;");*/
                                    if (results.rows.length > 0) {
                                        var ans_cat = [];
                                        var ans_cat_length = 1;
                                        for (i = 0; i < results.rows.length; i++) {
                                            ans_cat.push(results.rows.item(i));
                                        }
                                        if (ans_cat.length > 0) {
                                            $(ans_cat).each(function(ix, ex) {
                                                if (ex.answer_cat_id == 0) {
                                                    var titlex = "app_answer_cat_id";
                                                    var valuex = ex.app_answer_cat_id;
                                                } else {
                                                    var titlex = "answer_cat_id";
                                                    var valuex = ex.answer_cat_id;
                                                }
                                                sqlhelper.db.transaction(function(tx) {
                                                    tx.executeSql("SELECT * FROM tbl_answers where " + titlex + " ='" + valuex + "' and answer_status=1 ORDER BY sort_order ASC ;", [], function(txs, results) {
                                                        if (results.rows.length > 0) {
                                                            var answers = [];
                                                            for (i = 0; i < results.rows.length; i++) {
                                                                answers.push(results.rows.item(i));
                                                            }
                                                            ex.answers = answers;
                                                        }

                                                        if (ans_cat_length >= ans_cat.length) {

                                                            e.category = ans_cat;
                                                            offlinehelper.datafetched = true;
                                                            count++;
                                                            if (count >= returndata.data.steps.length) {

                                                                console.log(returndata);
                                                                success(returndata);
                                                            }
                                                        }
                                                        ans_cat_length++;
                                                    })
                                                })
                                            })
                                        } else {
                                            offlinehelper.datafetched = true;
                                        }


                                    } else {
                                        sqlhelper.db.transaction(function(tx) {
                                            tx.executeSql("SELECT * FROM tbl_answers where step_id ='" + e.step_id + "' and answer_status=1 order by sort_order ASC;", [], function(txs, results) {
                                                if (results.rows.length > 0) {
                                                    var answers = [];
                                                    for (i = 0; i < results.rows.length; i++) {
                                                        answers.push(results.rows.item(i));
                                                    }
                                                    e.answers = answers;
                                                }
                                                count++;
                                                offlinehelper.datafetched = true;
                                                if (count >= returndata.data.steps.length) {
                                                    console.log(returndata);
                                                    success(returndata);
                                                }
                                            })
                                        })
                                    }


                                });
                            });

                        } else {
                            var userdata = $.jStorage.get('userdetails')

                            var special_answer = userdata.specialAnswers || "";
                           

                            if ($.trim(special_answer)!="") {
                                var spc_arr = special_answer.split(",");
                                sqlhelper.db.transaction(function(tx) {
                                    tx.executeSql("SELECT * FROM tbl_answers where answer_id  IN (" + special_answer + ") OR (answer_id=0 and app_answer_id IN (" + special_answer + "))  and answer_status=1 order by sort_order ASC;", [], function(txs, results) {
                                        if (results.rows.length > 0) {
                                            var answers = [];
                                            for (i = 0; i < results.rows.length; i++) {
                                                answers.push(results.rows.item(i));
                                            }
                                            e.answers = answers;
                                        }
                                        count++;
                                        if (count >= returndata.data.steps.length) {
                                            console.log(returndata);
                                            success(returndata);
                                        }
                                    });
                                });
                            } else {
                                //there is step marked as special case, but no special answer has been chosen from psychologist view
                                //so hide the registration
                                msgBox("Din lista är inte aktiverad. Skicka ett meddelande till din behandlare i BIP.");
                            }
                        }
                    })

                } else {
                    returndata.status = "error";
                    returndata.message = "No Registrations";
                }
            });
        });
    },


    /*Added by Sabin Aug 31st 2015 >>*/
    listModules: function(json, success) {
        json = JSON.parse(json);

        var feelingModuleExist = false;
        //first check if we have feelings, if yes then we need Manage feelings icon as well
        var sqlFeeling = "SELECT COUNT(*) as available_feelings FROM tbl_v2_feelings WHERE feeling_status='1'";
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sqlFeeling, [], function(txs, results) {
                feelingModuleExist = parseInt(results.rows.item(0).available_feelings) > 0 ? true : false;
            });
        });
        $otherModsEnabled = offlinehelper.ShowHideModules("other_modules");
        if (typeof $otherModsEnabled == "object") {
            if ($otherModsEnabled.length > 0) {
                $modIDs = $otherModsEnabled.join();
                var sql = "SELECT m.module_id, m.module_name, m.module_icon, (SELECT COUNT(*) FROM tbl_v2_skills WHERE skill_type='thoughts' AND module_id=m.module_id AND skill_status=1) as total_thoughts, (SELECT COUNT(*) FROM tbl_v2_skills sk WHERE sk.skill_type='skills' AND sk.module_id=m.module_id  AND sk.skill_status=1 AND (SELECT COUNT(*) FROM tbl_v2_sk_exposure_steps WHERE module_id=m.module_id AND skill_id=sk.skill_id)>0) as total_skills, (SELECT COUNT(*) FROM tbl_v2_sk_exposure_patients ep WHERE ep.belongs_to='" + json.userid + "' AND ep.skill_id=(SELECT distinct skill_id FROM tbl_v2_skills WHERE module_id=m.module_id) AND (SELECT COUNT(*) FROM tbl_v2_sk_exposure_steps WHERE module_id=m.module_id AND skill_id=ep.skill_id)>0) as total_exposures from tbl_v2_modules m WHERE m.module_status='1' AND m.module_id IN(" + $modIDs + ") ORDER BY m.sort_order ASC;";
            } else {
                var sql = "SELECT m.module_id, m.module_name, m.module_icon, (SELECT COUNT(*) FROM tbl_v2_skills WHERE skill_type='thoughts' AND module_id=m.module_id AND skill_status=1) as total_thoughts, (SELECT COUNT(*) FROM tbl_v2_skills sk WHERE sk.skill_type='skills' AND sk.module_id=m.module_id  AND sk.skill_status=1 AND (SELECT COUNT(*) FROM tbl_v2_sk_exposure_steps WHERE module_id=m.module_id AND skill_id=sk.skill_id)>0) as total_skills, (SELECT COUNT(*) FROM tbl_v2_sk_exposure_patients ep WHERE ep.belongs_to='" + json.userid + "' AND ep.skill_id=(SELECT distinct skill_id FROM tbl_v2_skills WHERE module_id=m.module_id) AND (SELECT COUNT(*) FROM tbl_v2_sk_exposure_steps WHERE module_id=m.module_id AND skill_id=ep.skill_id)>0) as total_exposures from tbl_v2_modules m WHERE m.module_status='1' AND 1=2 ORDER BY m.sort_order ASC;";
                //we have done 1=2 in above query because we don't want to get any result if none of the modules are activated via activation template
            }
        } else {
            var sql = "SELECT m.module_id, m.module_name, m.module_icon, (SELECT COUNT(*) FROM tbl_v2_skills WHERE skill_type='thoughts' AND module_id=m.module_id AND skill_status=1) as total_thoughts, (SELECT COUNT(*) FROM tbl_v2_skills sk WHERE sk.skill_type='skills' AND sk.module_id=m.module_id  AND sk.skill_status=1 AND (SELECT COUNT(*) FROM tbl_v2_sk_exposure_steps WHERE module_id=m.module_id AND skill_id=sk.skill_id)>0) as total_skills, (SELECT COUNT(*) FROM tbl_v2_sk_exposure_patients ep WHERE ep.belongs_to='" + json.userid + "' AND ep.skill_id=(SELECT distinct skill_id FROM tbl_v2_skills WHERE module_id=m.module_id) AND (SELECT COUNT(*) FROM tbl_v2_sk_exposure_steps WHERE module_id=m.module_id AND skill_id=ep.skill_id)>0) as total_exposures from tbl_v2_modules m WHERE m.module_status='1' ORDER BY m.sort_order ASC;";
        }
      
        var task_json = {};
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sql, [], function(txs, results) {

                returndata = {
                    "status": "ok",
                    data: [],
                    message: ""
                };

                //hide show modules as per app activation template start
                /* $feelingsEnabled = offlinehelper.ShowHideModules("my_feelings");
                 if($feelingsEnabled==1 || $feelingsEnabled==2 || $feelingsEnabled=="all"){
                     $("#MySkills_Module").find(".module-icons-stuffs").find("div[data-moduleid='0']").removeClass("hide");
                 }else{
                     $("#MySkills_Module").find(".module-icons-stuffs").find("div[data-moduleid='0']").addClass("hide");
                 }
                 //hide show modules as per app activation template end*/
                $feelingsEnabled = offlinehelper.ShowHideModules("my_feelings");

                if (results.rows.length > 0) {
                    if (feelingModuleExist == true && ($feelingsEnabled == 1 || $feelingsEnabled == 2 || $feelingsEnabled == "all")) {
                        var t = {
                            "module_id": 0,
                            "module_name": "Känslospaning",
                            "module_icon": "my_feelings.png",
                            "total_thoughts": "",
                            "total_skills": "",
                            "total_exposures": ""
                        }
                        returndata.data.push(t);
                    }
                    for (i = 0; i < results.rows.length; i++) {
                        returndata.data.push(results.rows.item(i));
                    }

                    success(returndata);
                } else {
                    if (feelingModuleExist == true && ($feelingsEnabled == 1 || $feelingsEnabled == 2 || $feelingsEnabled == "all")) {
                        var t = {
                            "module_id": 0,
                            "module_name": "Känslospaning",
                            "module_icon": "my_feelings.png",
                            "total_thoughts": "",
                            "total_skills": "",
                            "total_exposures": ""
                        }
                        returndata.data.push(t);
                        success(returndata);
                    }
                    returndata.status = "error";
                    returndata.message = "No Modules Available";
                }
            });
        });
    },
    checkIfModuleHasSkills: function(json, success) {
        json = JSON.parse(json);

        var sql = "select (SELECT COUNT(*) FROM tbl_v2_skills WHERE skill_status=1 AND skill_type='thoughts' AND module_id='" + json.moduleId + "') as total_thoughts,(SELECT COUNT(*) FROM tbl_v2_skills sk1 WHERE sk1.skill_status=1 AND sk1.skill_type='skills' AND sk1.module_id='" + json.moduleId + "' AND (SELECT COUNT(*) FROM `tbl_v2_sk_exposure_steps` WHERE step_status='1' AND skill_id=sk1.skill_id)>0) as total_skills,(SELECT COUNT(*) FROM tbl_v2_skills sk WHERE sk.skill_status=1 AND sk.skill_type='exposure' AND sk.module_id='" + json.moduleId + "' AND (SELECT COUNT(*) FROM `tbl_v2_sk_exposure_steps` WHERE step_status='1' AND skill_id=sk.skill_id)>0) as total_exposures";
        console.log(sql);
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sql, [], function(txs, results) {
                returndata.data.total_thoughts = results.rows.item(0).total_thoughts;
                returndata.data.total_skills = results.rows.item(0).total_skills;
                returndata.data.total_exposures = results.rows.item(0).total_exposures;

                success(returndata);
            });
        });
    },
    fetchExposureSkillsSteps: function(type, json, success) {
        json = JSON.parse(json);

        if (type == "exposure") {
            var sql = "SELECT * from tbl_v2_sk_exposure_steps where module_id='" + json.moduleId + "' and skill_type='" + type + "' and step_status=1 order by sort_order ASC;";
        } else {
            var sql = "SELECT * from tbl_v2_sk_exposure_steps where module_id='" + json.moduleId + "' and skill_type='" + type + "' AND skill_id='" + json.skillId + "' and step_status=1 order by sort_order ASC;";
        }
        var task_json = {};
        var returndata = {
            "status": "ok",
            data: {
                "steps": [],
                "old_assignment": null
            },
            message: "",
            category: []
        };
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sql, [], function(txs, results) {
                if (results.rows.length > 0) {


                    for (i = 0; i < results.rows.length; i++) {
                        returndata.data.steps.push(results.rows.item(i));
                    }
                    count = 0;
                    ordercount = 1;

                    $(returndata.data.steps).each(function(i, e) {

                        offlinehelper.datafetched = false;

                        e.show_order = ordercount;
                        ordercount++;

                        sqlhelper.db.transaction(function(tx) {
                            tx.executeSql("SELECT * FROM tbl_v2_skill_exposure_answer_category where step_id ='" + e.step_id + "' AND answer_cat_status=1 ORDER BY sort_order ASC;", [], function(txs, results) {

                                if (results.rows.length > 0) {
                                    var ans_cat = [];
                                    var ans_cat_length = 1;
                                    for (i = 0; i < results.rows.length; i++) {
                                        ans_cat.push(results.rows.item(i));
                                    }
                                    if (ans_cat.length > 0) {
                                        $(ans_cat).each(function(ix, ex) {
                                            if (ex.answer_cat_id == 0) {
                                                var titlex = "app_answer_cat_id";
                                                var valuex = ex.app_answer_cat_id;
                                            } else {
                                                var titlex = "answer_cat_id";
                                                var valuex = ex.answer_cat_id;
                                            }
                                            sqlhelper.db.transaction(function(tx) {
                                                tx.executeSql("SELECT * FROM tbl_v2_skill_exposure_answers where " + titlex + " ='" + valuex + "' and answer_status=1 ORDER BY sort_order ASC ;", [], function(txs, results) {
                                                    if (results.rows.length > 0) {
                                                        var answers = [];
                                                        for (i = 0; i < results.rows.length; i++) {
                                                            answers.push(results.rows.item(i));
                                                        }
                                                        ex.answers = answers;
                                                    }

                                                    if (ans_cat_length >= ans_cat.length) {

                                                        e.category = ans_cat;
                                                        offlinehelper.datafetched = true;
                                                        count++;
                                                        if (count >= returndata.data.steps.length) {

                                                            console.log(returndata);
                                                            success(returndata);
                                                        }
                                                    }
                                                    ans_cat_length++;
                                                })
                                            })
                                        })
                                    } else {
                                        offlinehelper.datafetched = true;
                                    }


                                } else {
                                    sqlhelper.db.transaction(function(tx) {
                                        tx.executeSql("SELECT * FROM tbl_v2_skill_exposure_answers where step_id ='" + e.step_id + "' and answer_status=1 order by sort_order ASC;", [], function(txs, results) {
                                            if (results.rows.length > 0) {
                                                var answers = [];
                                                for (i = 0; i < results.rows.length; i++) {
                                                    answers.push(results.rows.item(i));
                                                }
                                                e.answers = answers;
                                            }
                                            count++;
                                            offlinehelper.datafetched = true;
                                            if (count >= returndata.data.steps.length) {
                                                console.log(returndata);
                                                success(returndata);
                                            }
                                        })
                                    })
                                }


                            });
                        });
                    })

                } else {
                    returndata.status = "error";
                    returndata.message = "No Exposures";
                }
            });
        });
    },
    listSkillsItems: function(json, success) {
        var patientExposure = [];
        var skillStats = [];
        json = JSON.parse(json);




        if (json.skillType != "skills") {

            if (json.skillType == "exposure") {
                //fetch list of patient exposures heading
                var sqlexposure = "SELECT ea.skill_id, ea.exposure_name, ea.exposure_id, (SELECT COUNT(*) FROM tbl_v2_sk_exposure_patients_assignments WHERE exposure_id=ea.exposure_id) AS total_assignments, (SELECT module_id FROM `tbl_v2_skills` WHERE skill_id=ea.skill_id) AS moduleID  FROM tbl_v2_sk_exposure_patients ea WHERE ea.exposure_status='1' AND ea.belongs_to='" + json.userid + "'";
                sqlhelper.db.transaction(function(tx) {
                    tx.executeSql(sqlexposure, [], function(txe, resultsEx) {
                        if (resultsEx.rows.length > 0) {
                            for (var k = 0; k < resultsEx.rows.length; k++) {
                                patientExposure.push(resultsEx.rows.item(k));
                            }
                        }

                    });
                });
            }


            if (json.skillType == "thoughts") {
                var sql = "SELECT s.*, t.thought_type FROM tbl_v2_skills s INNER JOIN tbl_v2_sk_thoughts t ON t.skill_id = s.skill_id WHERE s.skill_type='" + json.skillType + "' AND s.module_id='" + json.moduleId + "' AND s.skill_status='1'";
            } else {
                var sql = "SELECT *, '' as thought_type FROM tbl_v2_skills WHERE skill_type='" + json.skillType + "' AND module_id='" + json.moduleId + "'";

            }
            sqlhelper.db.transaction(function(tx) {
                tx.executeSql(sql, [], function(txs, results) {
                    if (results.rows.length > 0) {
                        returndata = {
                            "status": "ok",
                            data: [],
                            patientExposure: "",
                            skillStats: "",
                            message: ""
                        };

                        for (i = 0; i < results.rows.length; i++) {
                            returndata.data.push(results.rows.item(i));
                        }

                        returndata.patientExposure = patientExposure;
                        returndata.skillStats = skillStats;

                        success(returndata);
                    } else {
                        returndata.status = "error";
                        returndata.message = "No Modules Available";
                    }
                });
            });
        } else {
            var sqlskills = "SELECT s.*, (SELECT COUNT(*) FROM tbl_v2_sk_skills_assignments WHERE skill_id = s.skill_id) AS total_assignments FROM tbl_v2_skills s WHERE s.module_id='" + json.moduleId + "' AND s.skill_type='skills' AND s.skill_status='1' ORDER BY last_updated DESC";
            sqlhelper.db.transaction(function(tx) {
                tx.executeSql(sqlskills, [], function(txs, resultSkills) {
                    if (resultSkills.rows.length > 0) {
                        returndata = {
                            "status": "ok",
                            data: [],
                            patientExposure: "",
                            skillStats: "",
                            message: ""
                        };
                        for (var x = 0; x < resultSkills.rows.length; x++) {
                            skillStats.push(resultSkills.rows.item(x));
                        }

                        returndata.skillStats = skillStats;
                        returndata.patientExposure = patientExposure;
                        success(returndata);
                    } else {
                        returndata.status = "error";
                        returndata.message = "No Skills Available";
                    }
                });
            });
        }

    },
    getSKillDetails: function(json, success) {
        json = JSON.parse(json);

        if (json.skillType == "thoughts") {
            var sql = "SELECT * FROM tbl_v2_sk_thoughts WHERE skill_id='" + json.skillId + "' AND module_id='" + json.moduleId + "'";
        }

        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sql, [], function(txs, results) {
                returndata.data = results.rows.item(0);

                success(returndata);
            });
        });
    },
    feelingStatistics: function(json, success) {
        var sql = "SELECT (select count(*) as no_of_days FROM (SELECT strftime('%Y-%m-%d',answered_date) as `date`, COUNT(*) FROM tbl_v2_feelings_assignments WHERE module_version='1' GROUP BY `date`) as d) AS total_days_v1, (select count(*) FROM tbl_v2_feelings_assignments WHERE module_version='1' ) as total_counts_v1, (select count(*) as no_of_days FROM (SELECT strftime('%Y-%m-%d',answered_date) as `date`, COUNT(*) FROM tbl_v2_feelings_assignments WHERE module_version='2' GROUP BY `date`) as d) AS total_days_v2, (select count(*) FROM tbl_v2_feelings_assignments WHERE module_version='2') as total_counts_v2, (select count(*) FROM tbl_v2_feelings_assignments WHERE module_version='2' AND feeling_type='1') as total_primary_feelings, (select count(*) FROM tbl_v2_feelings_assignments WHERE module_version='2' AND feeling_type='2') as total_secondary_feelings";
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sql, [], function(txs, results) {
                returndata.status="ok";
                returndata.data.total_days_v1 = results.rows.item(0).total_days_v1;
                returndata.data.total_counts_v1 = results.rows.item(0).total_counts_v1;
                returndata.data.total_days_v2 = results.rows.item(0).total_days_v2;
                returndata.data.total_counts_v2 = results.rows.item(0).total_counts_v2;

                returndata.data.total_primary_feelings = results.rows.item(0).total_primary_feelings;
                returndata.data.total_secondary_feelings = results.rows.item(0).total_secondary_feelings;

                success(returndata);
            });
        });
    },
    getItemLength: function(obj, str) { //the second parameter is for debug purpose only
        var ret = 0;
        if (str == "feeling_definitions") {
            if (obj == 0) {
                ret = 0;
            } else {
                ret = 1;
            }
        } else {
            if (typeof obj !== "undefined" && obj !== null) {
                ret = parseInt(obj.length);

            } else {
                ret = 0;
            }
        }
        //  offlinehelper.responseDataTextChunk[str] = ret;

        return parseInt(ret);
    },
    feelingLists: function(json, success) {
        var sql = "SELECT * FROM tbl_v2_feelings WHERE feeling_status='1' ORDER BY sort_order ASC";
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sql, [], function(txs, results) {
                if (results.rows.length > 0) {
                    returndata = {
                        "status": "ok",
                        data: [],
                        message: ""
                    };

                    for (i = 0; i < results.rows.length; i++) {
                        returndata.data.push(results.rows.item(i));
                    }

                    success(returndata);
                } else {
                    returndata.status = "error";
                    returndata.message = "No feelings Available";
                }
            });
        });
    },
    showFeelingDefinitions: function(json, success) {
        var sql = "select primary_feelings, secondary_feelings FROM tbl_v2_feelings_definition";
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sql, [], function(txs, results) {
                returndata.data.primary = results.rows.item(0).primary_feelings;
                returndata.data.secondary = results.rows.item(0).secondary_feelings;

                success(returndata);
            });
        });
    },
    resetSyncProgressBar: function() {
        $(".download-content-msg").find(".pc-done").html("Förbereder...");
        $(".download-content-msg").find(".download-progress").css("width", "0%");
    },
    checkOnlineStatus: function() { //added by sabin remove from common.js checkOnlineStatus
        setInterval(function() {
            if (navigator.onLine == false && offlinehelper.hidealert == false) {
                $('.offline_dialogue').show();
            } else {

                $('.offline_dialogue').hide();
            }
        }, 1000);
    },
    checkIfRunningFirstTime: function() {
        sqlhelper.initiateDatabase();
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql("SELECT * from tbl_user;", [], function(txs, results) {
                if (results != undefined && results.rows != undefined && results.rows.length > 0) {
                    //console.warn("App is not running for first time so display login screen");
                    offlinehelper.showHideVerificationWindow("hide");
                    // success(false);
                } else {
                    //console.warn("Application running for first time display verification screen.");
                    offlinehelper.showHideVerificationWindow("show");
                    // success(false);
                }
            }, function(error) {
                //console.warn("Error:: Application running for first time display verification screen.");
                offlinehelper.showHideVerificationWindow("show");
                //success(false);
            });
        });
    },
    showHideVerificationWindow: function(doWhat) {
        var sel = $("#Login").find(".login-wrapper");
        if (doWhat == "show") {
            sel.find("h1[data-key='Login']").hide();
            sel.find("h1[data-key='VerifyDevice']").show();

            sel.find("#txtEmail").hide();
            sel.find("#verification_code").val("").show();
            sel.find("#txtPwd").val("");

            sel.find("#btnLogin").hide();
            sel.find("#btnLogin").closest(".ui-btn").hide();
            sel.find("#btnVerify").show();
            sel.find("#btnVerify").closest(".ui-btn").show();
        } else {
            sel.find("h1[data-key='Login']").show();
            sel.find("h1[data-key='VerifyDevice']").hide();

            sel.find("#txtEmail").show();
            sel.find("#verification_code").hide();

            sel.find("#btnLogin").show();
            sel.find("#btnLogin").closest(".ui-btn").show();
            sel.find("#btnVerify").hide();
            sel.find("#btnVerify").closest(".ui-btn").hide();
        }
    },
    clearAppCache: function() {
        //Drop all tables
        if (confirm("Är du säker på att du vill ta bort all data i appen?")) {
            var tables = ['tbl_user', 'tbl_tasks', 'tbl_training', 'tbl_registrations', 'tbl_registration_steps', 'tbl_answer_category', 'tbl_answers', 'tbl_homeworks',
                'tbl_homework_assignments', 'tbl_crisisplans', 'tbl_patient_assignments', 'tbl_patient_assignment_details', 'tbl_v2_feelings', 'tbl_v2_feelings_definition', 'tbl_v2_modules',
                'tbl_v2_sk_exposure_patients', 'tbl_v2_sk_exposure_patients_assignments', 'tbl_v2_sk_exposure_patients_assignments_details', 'tbl_v2_sk_skills_assignments', 'tbl_v2_sk_skills_assignments_details',
                'tbl_v2_sk_exposure_steps', 'tbl_v2_sk_thoughts', 'tbl_v2_skill_exposure_answer_category', 'tbl_v2_skill_exposure_answers', 'tbl_v2_skills', 'tbl_v2_sk_thoughts_assignments',
                'tbl_v2_feelings_assignments'
            ];
            sqlhelper.clearAllData(tables);
        }

        //now clear Cache
    },
    downloadAudioFiles: function() {
        filehelper.filesToDownload = [];
        console.warn("NOW DOWNLOAD MODULES CALLED");
        if (offlinehelper.isSelfHarm == false) {
            var sql = "SELECT file_name as file, file_url as url, 'audio' as type FROM tbl_extra_files_to_download WHERE file_url!='' AND item_type!='countdown_audio' ORDER BY type ASC";
        } else {
            var sql = "SELECT thought_sound_file as file, sound_url as url, 'audio' as type FROM tbl_v2_sk_thoughts WHERE thought_sound_file!='' UNION SELECT module_icon as file, asset_url as url, 'icon' as type FROM tbl_v2_modules WHERE module_icon!='' UNION SELECT file_name as file, file_url as url, 'audio' as type FROM tbl_extra_files_to_download WHERE file_url!='' ORDER BY type ASC";
        }
        sqlhelper.db.transaction(function(tx) {
            tx.executeSql(sql, [], function(txs, results) {
                if (results.rows.length > 0) {


                    for (i = 0; i < results.rows.length; i++) {
                        /*$file = {
                            'file': results.rows.item(i).file,
                            'type': results.rows.item(i).type,
                            'url': results.rows.item(i).url
                        };
                        filehelper.filesToDownload.push($file);*/
                        filehelper.filesToDownload.push(results.rows.item(i).url);
                    }

                    /* filehelper.filesToDownload.push({
                       'file': "countdown_alert.mp3",
                       'type': "audio",
                       'url': offlinehelper.alertURL
                     });*/

                    filehelper.totalFilesToDownload = filehelper.filesToDownload.length;

                    filehelper.downloadModuleFiles();


                } else {
                    returndata.status = "error";
                    returndata.message = "No feelings Available";
                }

            }, function(err) {
                console.log("Error : " + JSON.stringify(err));
            });
        });
    },
    ShowHideModules: function(key) {
        var mod = offlinehelper.EnabledModules;
        /* var mod = {
                     "available_modules": {
                       "registration":1,
                       "homework_module":1,
                       "homework_id": [3],
                       "crisis_plan": 1,
                       "my_skills":1,
                       "my_feelings":1,
                       "other_modules": [1,2]
                     }
                 };*/

        if (mod != undefined) {
            $val = mod[key];
            return $val;
        } else {
            return "all";
        }
    },
    UpdateAvailableModules: function(modules){
        var userdetails = $.jStorage.get('userdetails');
        var toupdate = {
            where: {
                'user_id': userdetails.user_id,
            },
            fields: {
                'availableModules': modules
            }
        };
        sqlhelper.updateData('tbl_user', toupdate);
    },
    checkModulesEnabled: function(json, success) {

            json = JSON.parse(json);
          
            var returndata = {
                    'status': 'ok',
                    'data': {
                        'hasRegistration': [],
                        'homeworks': [],
                        'crisisplans': []
                    }
                };

            var enabledHomeworks = offlinehelper.ShowHideModules("homework_id");
            if (typeof enabledHomeworks == "object") {
                if (enabledHomeworks.length > 0) {
                    $hwIDs = enabledHomeworks.join();
                    var sqlHomeworks = "SELECT (SELECT count(*) as totalhomeworks FROM tbl_homeworks  INNER JOIN tbl_homework_assignments ON (tbl_homework_assignments.homework_id=tbl_homeworks.homework_id) WHERE tbl_homeworks.homework_status=1 AND tbl_homeworks.homework_id IN(" + $hwIDs + ")) AS TotalHomeworks, (SELECT count(*) as totalhomeworks FROM tbl_homeworks  INNER JOIN tbl_homework_assignments ON (tbl_homework_assignments.homework_id=tbl_homeworks.homework_id) where already_viewed=0 AND tbl_homeworks.homework_status=1 AND tbl_homeworks.homework_id IN(" + $hwIDs + ")) as NewHomeworks, (SELECT count(*) as total_crisis_plans FROM tbl_crisisplans WHERE plan_status=1) AS TotalCrisisPlans, (SELECT count(*) as total_crisis_plans FROM tbl_crisisplans where already_read=0 AND plan_status=1) AS NewCrisisPlans, (SELECT hasRegistrations from tbl_user where username='" + json.username + "' COLLATE NOCASE and password='" + json.password + "') as hasRegistration";
                } else {
                    var sqlHomeworks = "SELECT (SELECT count(*) as totalhomeworks FROM tbl_homeworks  INNER JOIN tbl_homework_assignments ON (tbl_homework_assignments.homework_id=tbl_homeworks.homework_id) WHERE tbl_homeworks.homework_status=1 AND 1=2) AS TotalHomeworks, (SELECT count(*) as totalhomeworks FROM tbl_homeworks  INNER JOIN tbl_homework_assignments ON (tbl_homework_assignments.homework_id=tbl_homeworks.homework_id) where already_viewed=0 AND tbl_homeworks.homework_status=1 AND 1=2) as NewHomeworks, (SELECT count(*) as total_crisis_plans FROM tbl_crisisplans WHERE plan_status=1) AS TotalCrisisPlans, (SELECT count(*) as total_crisis_plans FROM tbl_crisisplans where already_read=0 AND plan_status=1) AS NewCrisisPlans, (SELECT hasRegistrations from tbl_user where username='" + json.username + "' COLLATE NOCASE and password='" + json.password + "') as hasRegistration";
                    //1=2 used in above queries just because no homeworks are activated and we don't want to fetch them.
                }

            } else {
                var sqlHomeworks = "SELECT (SELECT count(*) as totalhomeworks FROM tbl_homeworks  INNER JOIN tbl_homework_assignments ON (tbl_homework_assignments.homework_id=tbl_homeworks.homework_id) WHERE tbl_homeworks.homework_status=1) AS TotalHomeworks, (SELECT count(*) as totalhomeworks FROM tbl_homeworks  INNER JOIN tbl_homework_assignments ON (tbl_homework_assignments.homework_id=tbl_homeworks.homework_id) where already_viewed=0 AND tbl_homeworks.homework_status=1) as NewHomeworks, (SELECT count(*) as total_crisis_plans FROM tbl_crisisplans WHERE plan_status=1) AS TotalCrisisPlans, (SELECT count(*) as total_crisis_plans FROM tbl_crisisplans where already_read=0 AND plan_status=1) AS NewCrisisPlans, (SELECT hasRegistrations from tbl_user where username='" + json.username + "' COLLATE NOCASE and password='" + json.password + "') as hasRegistration";
            }
            console.clear();

            returndata.status = "ok";
            var returndata_hw = {
                total_homeworks: 0,
                new_homeworks: 0
            };

            var returndata_cp = {
                total_crisis_plans: 0,
                new_crisis_plans: 0
            };
            console.clear();
            sqlhelper.db.transaction(function(tx) {
                tx.executeSql(sqlHomeworks, [], function(txs, results) {

                    returndata.data.hasRegistration = results.rows.item(0).hasRegistration;

                    returndata_hw.total_homeworks = results.rows.item(0).TotalHomeworks;
                    returndata_hw.new_homeworks = results.rows.item(0).NewHomeworks;
                    returndata.data.homeworks = JSON.stringify(returndata_hw);

                    returndata_cp.total_crisis_plans = results.rows.item(0).TotalCrisisPlans;
                    returndata_cp.new_crisis_plans = results.rows.item(0).NewCrisisPlans;
                    returndata.data.crisisplans = JSON.stringify(returndata_cp);

                    success(returndata);

                }, function(err) {
                    console.log("Error : " + JSON.stringify(err));
                });
            });
        }
        /*Added by Sabin Aug 31st 2015 <<*/

    //Functions for webservice
};



// $('#review_rating_1_1 select').on('focus', valueReviewFocused);
// $('#review_rating_2_2 select').on('focus', valueReviewFocused);
// $('#review_rating_2_4 select').on('focus', valueReviewFocused);

// $('#review_rating_1_1 select').on('blur', valueReviewBlurred);
// $('#review_rating_2_2 select').on('blur', valueReviewBlurred);
// $('#review_rating_2_4 select').on('blur', valueReviewBlurred);


//$('#tidigare_review').off('click', '.bip_edit', onBipReviewEdit);
;/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

var dateFormat = function() {
    var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
        timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        timezoneClip = /[^-+\dA-Z]/g,
        pad = function(val, len) {
            val = String(val);
            len = len || 2;
            while (val.length < len) val = "0" + val;
            return val;
        };

    // Regexes and supporting functions are cached through closure
    return function(date, mask, utc) {
        var dF = dateFormat;

        // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
        if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
            mask = date;
            date = undefined;
        }

        // Passing date through Date applies Date.parse, if necessary
        date = date ? new Date(date) : new Date;
        if (isNaN(date)) throw SyntaxError("invalid date");

        mask = String(dF.masks[mask] || mask || dF.masks["default"]);

        // Allow setting the utc argument via the mask
        if (mask.slice(0, 4) == "UTC:") {
            mask = mask.slice(4);
            utc = true;
        }

        var _ = utc ? "getUTC" : "get",
            d = date[_ + "Date"](),
            D = date[_ + "Day"](),
            m = date[_ + "Month"](),
            y = date[_ + "FullYear"](),
            H = date[_ + "Hours"](),
            M = date[_ + "Minutes"](),
            s = date[_ + "Seconds"](),
            L = date[_ + "Milliseconds"](),
            o = utc ? 0 : date.getTimezoneOffset(),
            flags = {
                d: d,
                dd: pad(d),
                ddd: dF.i18n.dayNames[D],
                dddd: dF.i18n.dayNames[D + 7],
                m: m + 1,
                mm: pad(m + 1),
                mmm: dF.i18n.monthNames[m],
                mmmm: dF.i18n.monthNames[m + 12],
                yy: String(y).slice(2),
                yyyy: y,
                h: H % 12 || 12,
                hh: pad(H % 12 || 12),
                H: H,
                HH: pad(H),
                M: M,
                MM: pad(M),
                s: s,
                ss: pad(s),
                l: pad(L, 3),
                L: pad(L > 99 ? Math.round(L / 10) : L),
                t: H < 12 ? "a" : "p",
                tt: H < 12 ? "am" : "pm",
                T: H < 12 ? "A" : "P",
                TT: H < 12 ? "AM" : "PM",
                Z: utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                o: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                S: ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
            };

        return mask.replace(token, function($0) {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    };
}();

// Some common format strings
dateFormat.masks = {
    "default": "ddd mmm dd yyyy HH:MM:ss",
    shortDate: "m/d/yy",
    mediumDate: "mmm d, yyyy",
    longDate: "mmmm d, yyyy",
    fullDate: "dddd, mmmm d, yyyy",
    shortTime: "h:MM TT",
    mediumTime: "h:MM:ss TT",
    longTime: "h:MM:ss TT Z",
    isoDate: "yyyy-mm-dd",
    isoTime: "HH:MM:ss",
    isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
    isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

// Internationalization strings
dateFormat.i18n = {
    dayNames: [
        "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
        "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
    ],
    monthNames: [
        "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
        "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
    ]
};

// For convenience...
Date.prototype.format = function(mask, utc) {
    return dateFormat(this, mask, utc);
};


function parseDateTime(dateTime) {

    var dateTimeArray = dateTime.split(" ");
    //our format: 2014 - 05 - 25 12: 25

    var date = dateTimeArray[0].split("-");
    var yyyy = date[0];
    var mm = date[1] - 1;
    var dd = date[2];

    var time = dateTimeArray[1].split(":");
    var h = time[0];
    var m = time[1];
    //var s = parseInt(time[2]); //get rid of that 00.0;

    return new Date(yyyy, mm, dd, h, m); //,s
};  !(function(name, context, definition) {
      if (typeof module != 'undefined' && module.exports) module.exports = definition(name, context);
      else if (typeof define == 'function' && typeof define.amd == 'object') define(definition);
      else context[name] = definition(name, context);
  }('Stopwatch', this, function(name, context) {
      //deliberately forced not to use window.performance since it was giving error on android browsers    
      if (false && typeof window !== 'undefined' && 'performance' in window) {
          var now = function() {
              return performance.now();
          }
      } else {
          var now = function() {
              return Date.now() || (new Date()).getTime();
          };
      }

      var Stopwatch = function Stopwatch() {
          this.t0 = this.t1 = this.s0 = this.offset = 0;
          this.running = false;
          this.intervalIDs = {};
      };

      // getters
      Stopwatch.prototype.isRunning = function() {
          return this.running;
      };

      // starts, or resumes, measuring elapsed time for an interval
      Stopwatch.prototype.start = function() {
          this.running = true;

          // set zero time, resets t1
          !this.t0 ? this.t0 = now() : this.t1 = undefined;

          // adds offset if stop time set, resets stop time
          if ( !! this.s0) {
              this.offset += this.s0 - now();
              this.s0 = undefined;
          }

          return this;
      };

      // stops measuring elapsed time for an interval
      Stopwatch.prototype.stop = function() {
          if (this.running) {
              this.t1 = now();
              this.s0 = this.s0 || now();
          }
          this.running = false;

          return this;
      };

      // stops time interval measurement and reset the elapsed time to zero
      Stopwatch.prototype.reset = function() {
          this.running = false;
          this.t0 = this.t1 = this.s0 = undefined;
          this.offset = 0;

          return this;
      };

      // stops time interval measurement, reset elapsed time to zero and start measuring elapsed time
      Stopwatch.prototype.restart = function() {
          this.reset();
          this.running = true;

          this.start();

          return this;
      };

      // total elapsed time measured by the current instance, in ms
      Stopwatch.prototype.read = function() {
          if (!this.t0) return 0;

          return (this.t1 || now()) - this.t0 + this.offset;
      };

      Stopwatch.prototype.display = function(el, delay, format) {
          if (typeof el == 'undefined') return this;

          var that = this;
          format = format || function(x) {
              return x;
          }; // format defaults to indentity

          var render = function() {
              el.innerText = format(that.read());
          };

          this.intervalIDs[setInterval(render, delay)] = el;

          return this;
      };

      Stopwatch.prototype.stopDisplay = function(el) {
          if (typeof el == 'undefined') return this;

          for (var intervalID in this.intervalIDs) {
              if (el === this.intervalIDs[intervalID]) {
                  clearInterval(intervalID);
                  delete this.intervalIDs[intervalID];
              }
          }

          return this;
      };

      return Stopwatch;
  }));;//! moment.js
//! version : 2.7.0
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
(function(a){function b(a,b,c){switch(arguments.length){case 2:return null!=a?a:b;case 3:return null!=a?a:null!=b?b:c;default:throw new Error("Implement me")}}function c(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function d(a,b){function c(){mb.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+a)}var d=!0;return j(function(){return d&&(c(),d=!1),b.apply(this,arguments)},b)}function e(a,b){return function(c){return m(a.call(this,c),b)}}function f(a,b){return function(c){return this.lang().ordinal(a.call(this,c),b)}}function g(){}function h(a){z(a),j(this,a)}function i(a){var b=s(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._bubble()}function j(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return b.hasOwnProperty("toString")&&(a.toString=b.toString),b.hasOwnProperty("valueOf")&&(a.valueOf=b.valueOf),a}function k(a){var b,c={};for(b in a)a.hasOwnProperty(b)&&Ab.hasOwnProperty(b)&&(c[b]=a[b]);return c}function l(a){return 0>a?Math.ceil(a):Math.floor(a)}function m(a,b,c){for(var d=""+Math.abs(a),e=a>=0;d.length<b;)d="0"+d;return(e?c?"+":"":"-")+d}function n(a,b,c,d){var e=b._milliseconds,f=b._days,g=b._months;d=null==d?!0:d,e&&a._d.setTime(+a._d+e*c),f&&hb(a,"Date",gb(a,"Date")+f*c),g&&fb(a,gb(a,"Month")+g*c),d&&mb.updateOffset(a,f||g)}function o(a){return"[object Array]"===Object.prototype.toString.call(a)}function p(a){return"[object Date]"===Object.prototype.toString.call(a)||a instanceof Date}function q(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e>d;d++)(c&&a[d]!==b[d]||!c&&u(a[d])!==u(b[d]))&&g++;return g+f}function r(a){if(a){var b=a.toLowerCase().replace(/(.)s$/,"$1");a=bc[a]||cc[b]||b}return a}function s(a){var b,c,d={};for(c in a)a.hasOwnProperty(c)&&(b=r(c),b&&(d[b]=a[c]));return d}function t(b){var c,d;if(0===b.indexOf("week"))c=7,d="day";else{if(0!==b.indexOf("month"))return;c=12,d="month"}mb[b]=function(e,f){var g,h,i=mb.fn._lang[b],j=[];if("number"==typeof e&&(f=e,e=a),h=function(a){var b=mb().utc().set(d,a);return i.call(mb.fn._lang,b,e||"")},null!=f)return h(f);for(g=0;c>g;g++)j.push(h(g));return j}}function u(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=b>=0?Math.floor(b):Math.ceil(b)),c}function v(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function w(a,b,c){return bb(mb([a,11,31+b-c]),b,c).week}function x(a){return y(a)?366:365}function y(a){return a%4===0&&a%100!==0||a%400===0}function z(a){var b;a._a&&-2===a._pf.overflow&&(b=a._a[tb]<0||a._a[tb]>11?tb:a._a[ub]<1||a._a[ub]>v(a._a[sb],a._a[tb])?ub:a._a[vb]<0||a._a[vb]>23?vb:a._a[wb]<0||a._a[wb]>59?wb:a._a[xb]<0||a._a[xb]>59?xb:a._a[yb]<0||a._a[yb]>999?yb:-1,a._pf._overflowDayOfYear&&(sb>b||b>ub)&&(b=ub),a._pf.overflow=b)}function A(a){return null==a._isValid&&(a._isValid=!isNaN(a._d.getTime())&&a._pf.overflow<0&&!a._pf.empty&&!a._pf.invalidMonth&&!a._pf.nullInput&&!a._pf.invalidFormat&&!a._pf.userInvalidated,a._strict&&(a._isValid=a._isValid&&0===a._pf.charsLeftOver&&0===a._pf.unusedTokens.length)),a._isValid}function B(a){return a?a.toLowerCase().replace("_","-"):a}function C(a,b){return b._isUTC?mb(a).zone(b._offset||0):mb(a).local()}function D(a,b){return b.abbr=a,zb[a]||(zb[a]=new g),zb[a].set(b),zb[a]}function E(a){delete zb[a]}function F(a){var b,c,d,e,f=0,g=function(a){if(!zb[a]&&Bb)try{require("./lang/"+a)}catch(b){}return zb[a]};if(!a)return mb.fn._lang;if(!o(a)){if(c=g(a))return c;a=[a]}for(;f<a.length;){for(e=B(a[f]).split("-"),b=e.length,d=B(a[f+1]),d=d?d.split("-"):null;b>0;){if(c=g(e.slice(0,b).join("-")))return c;if(d&&d.length>=b&&q(e,d,!0)>=b-1)break;b--}f++}return mb.fn._lang}function G(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function H(a){var b,c,d=a.match(Fb);for(b=0,c=d.length;c>b;b++)d[b]=hc[d[b]]?hc[d[b]]:G(d[b]);return function(e){var f="";for(b=0;c>b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function I(a,b){return a.isValid()?(b=J(b,a.lang()),dc[b]||(dc[b]=H(b)),dc[b](a)):a.lang().invalidDate()}function J(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Gb.lastIndex=0;d>=0&&Gb.test(a);)a=a.replace(Gb,c),Gb.lastIndex=0,d-=1;return a}function K(a,b){var c,d=b._strict;switch(a){case"Q":return Rb;case"DDDD":return Tb;case"YYYY":case"GGGG":case"gggg":return d?Ub:Jb;case"Y":case"G":case"g":return Wb;case"YYYYYY":case"YYYYY":case"GGGGG":case"ggggg":return d?Vb:Kb;case"S":if(d)return Rb;case"SS":if(d)return Sb;case"SSS":if(d)return Tb;case"DDD":return Ib;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":return Mb;case"a":case"A":return F(b._l)._meridiemParse;case"X":return Pb;case"Z":case"ZZ":return Nb;case"T":return Ob;case"SSSS":return Lb;case"MM":case"DD":case"YY":case"GG":case"gg":case"HH":case"hh":case"mm":case"ss":case"ww":case"WW":return d?Sb:Hb;case"M":case"D":case"d":case"H":case"h":case"m":case"s":case"w":case"W":case"e":case"E":return Hb;case"Do":return Qb;default:return c=new RegExp(T(S(a.replace("\\","")),"i"))}}function L(a){a=a||"";var b=a.match(Nb)||[],c=b[b.length-1]||[],d=(c+"").match(_b)||["-",0,0],e=+(60*d[1])+u(d[2]);return"+"===d[0]?-e:e}function M(a,b,c){var d,e=c._a;switch(a){case"Q":null!=b&&(e[tb]=3*(u(b)-1));break;case"M":case"MM":null!=b&&(e[tb]=u(b)-1);break;case"MMM":case"MMMM":d=F(c._l).monthsParse(b),null!=d?e[tb]=d:c._pf.invalidMonth=b;break;case"D":case"DD":null!=b&&(e[ub]=u(b));break;case"Do":null!=b&&(e[ub]=u(parseInt(b,10)));break;case"DDD":case"DDDD":null!=b&&(c._dayOfYear=u(b));break;case"YY":e[sb]=mb.parseTwoDigitYear(b);break;case"YYYY":case"YYYYY":case"YYYYYY":e[sb]=u(b);break;case"a":case"A":c._isPm=F(c._l).isPM(b);break;case"H":case"HH":case"h":case"hh":e[vb]=u(b);break;case"m":case"mm":e[wb]=u(b);break;case"s":case"ss":e[xb]=u(b);break;case"S":case"SS":case"SSS":case"SSSS":e[yb]=u(1e3*("0."+b));break;case"X":c._d=new Date(1e3*parseFloat(b));break;case"Z":case"ZZ":c._useUTC=!0,c._tzm=L(b);break;case"dd":case"ddd":case"dddd":d=F(c._l).weekdaysParse(b),null!=d?(c._w=c._w||{},c._w.d=d):c._pf.invalidWeekday=b;break;case"w":case"ww":case"W":case"WW":case"d":case"e":case"E":a=a.substr(0,1);case"gggg":case"GGGG":case"GGGGG":a=a.substr(0,2),b&&(c._w=c._w||{},c._w[a]=u(b));break;case"gg":case"GG":c._w=c._w||{},c._w[a]=mb.parseTwoDigitYear(b)}}function N(a){var c,d,e,f,g,h,i,j;c=a._w,null!=c.GG||null!=c.W||null!=c.E?(g=1,h=4,d=b(c.GG,a._a[sb],bb(mb(),1,4).year),e=b(c.W,1),f=b(c.E,1)):(j=F(a._l),g=j._week.dow,h=j._week.doy,d=b(c.gg,a._a[sb],bb(mb(),g,h).year),e=b(c.w,1),null!=c.d?(f=c.d,g>f&&++e):f=null!=c.e?c.e+g:g),i=cb(d,e,f,h,g),a._a[sb]=i.year,a._dayOfYear=i.dayOfYear}function O(a){var c,d,e,f,g=[];if(!a._d){for(e=Q(a),a._w&&null==a._a[ub]&&null==a._a[tb]&&N(a),a._dayOfYear&&(f=b(a._a[sb],e[sb]),a._dayOfYear>x(f)&&(a._pf._overflowDayOfYear=!0),d=Z(f,0,a._dayOfYear),a._a[tb]=d.getUTCMonth(),a._a[ub]=d.getUTCDate()),c=0;3>c&&null==a._a[c];++c)a._a[c]=g[c]=e[c];for(;7>c;c++)a._a[c]=g[c]=null==a._a[c]?2===c?1:0:a._a[c];a._d=(a._useUTC?Z:Y).apply(null,g),null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()+a._tzm)}}function P(a){var b;a._d||(b=s(a._i),a._a=[b.year,b.month,b.day,b.hour,b.minute,b.second,b.millisecond],O(a))}function Q(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function R(a){if(a._f===mb.ISO_8601)return void V(a);a._a=[],a._pf.empty=!0;var b,c,d,e,f,g=F(a._l),h=""+a._i,i=h.length,j=0;for(d=J(a._f,g).match(Fb)||[],b=0;b<d.length;b++)e=d[b],c=(h.match(K(e,a))||[])[0],c&&(f=h.substr(0,h.indexOf(c)),f.length>0&&a._pf.unusedInput.push(f),h=h.slice(h.indexOf(c)+c.length),j+=c.length),hc[e]?(c?a._pf.empty=!1:a._pf.unusedTokens.push(e),M(e,c,a)):a._strict&&!c&&a._pf.unusedTokens.push(e);a._pf.charsLeftOver=i-j,h.length>0&&a._pf.unusedInput.push(h),a._isPm&&a._a[vb]<12&&(a._a[vb]+=12),a._isPm===!1&&12===a._a[vb]&&(a._a[vb]=0),O(a),z(a)}function S(a){return a.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e})}function T(a){return a.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function U(a){var b,d,e,f,g;if(0===a._f.length)return a._pf.invalidFormat=!0,void(a._d=new Date(0/0));for(f=0;f<a._f.length;f++)g=0,b=j({},a),b._pf=c(),b._f=a._f[f],R(b),A(b)&&(g+=b._pf.charsLeftOver,g+=10*b._pf.unusedTokens.length,b._pf.score=g,(null==e||e>g)&&(e=g,d=b));j(a,d||b)}function V(a){var b,c,d=a._i,e=Xb.exec(d);if(e){for(a._pf.iso=!0,b=0,c=Zb.length;c>b;b++)if(Zb[b][1].exec(d)){a._f=Zb[b][0]+(e[6]||" ");break}for(b=0,c=$b.length;c>b;b++)if($b[b][1].exec(d)){a._f+=$b[b][0];break}d.match(Nb)&&(a._f+="Z"),R(a)}else a._isValid=!1}function W(a){V(a),a._isValid===!1&&(delete a._isValid,mb.createFromInputFallback(a))}function X(b){var c=b._i,d=Cb.exec(c);c===a?b._d=new Date:d?b._d=new Date(+d[1]):"string"==typeof c?W(b):o(c)?(b._a=c.slice(0),O(b)):p(c)?b._d=new Date(+c):"object"==typeof c?P(b):"number"==typeof c?b._d=new Date(c):mb.createFromInputFallback(b)}function Y(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970>a&&h.setFullYear(a),h}function Z(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970>a&&b.setUTCFullYear(a),b}function $(a,b){if("string"==typeof a)if(isNaN(a)){if(a=b.weekdaysParse(a),"number"!=typeof a)return null}else a=parseInt(a,10);return a}function _(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function ab(a,b,c){var d=rb(Math.abs(a)/1e3),e=rb(d/60),f=rb(e/60),g=rb(f/24),h=rb(g/365),i=d<ec.s&&["s",d]||1===e&&["m"]||e<ec.m&&["mm",e]||1===f&&["h"]||f<ec.h&&["hh",f]||1===g&&["d"]||g<=ec.dd&&["dd",g]||g<=ec.dm&&["M"]||g<ec.dy&&["MM",rb(g/30)]||1===h&&["y"]||["yy",h];return i[2]=b,i[3]=a>0,i[4]=c,_.apply({},i)}function bb(a,b,c){var d,e=c-b,f=c-a.day();return f>e&&(f-=7),e-7>f&&(f+=7),d=mb(a).add("d",f),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function cb(a,b,c,d,e){var f,g,h=Z(a,0,1).getUTCDay();return h=0===h?7:h,c=null!=c?c:e,f=e-h+(h>d?7:0)-(e>h?7:0),g=7*(b-1)+(c-e)+f+1,{year:g>0?a:a-1,dayOfYear:g>0?g:x(a-1)+g}}function db(b){var c=b._i,d=b._f;return null===c||d===a&&""===c?mb.invalid({nullInput:!0}):("string"==typeof c&&(b._i=c=F().preparse(c)),mb.isMoment(c)?(b=k(c),b._d=new Date(+c._d)):d?o(d)?U(b):R(b):X(b),new h(b))}function eb(a,b){var c,d;if(1===b.length&&o(b[0])&&(b=b[0]),!b.length)return mb();for(c=b[0],d=1;d<b.length;++d)b[d][a](c)&&(c=b[d]);return c}function fb(a,b){var c;return"string"==typeof b&&(b=a.lang().monthsParse(b),"number"!=typeof b)?a:(c=Math.min(a.date(),v(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a)}function gb(a,b){return a._d["get"+(a._isUTC?"UTC":"")+b]()}function hb(a,b,c){return"Month"===b?fb(a,c):a._d["set"+(a._isUTC?"UTC":"")+b](c)}function ib(a,b){return function(c){return null!=c?(hb(this,a,c),mb.updateOffset(this,b),this):gb(this,a)}}function jb(a){mb.duration.fn[a]=function(){return this._data[a]}}function kb(a,b){mb.duration.fn["as"+a]=function(){return+this/b}}function lb(a){"undefined"==typeof ender&&(nb=qb.moment,qb.moment=a?d("Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release.",mb):mb)}for(var mb,nb,ob,pb="2.7.0",qb="undefined"!=typeof global?global:this,rb=Math.round,sb=0,tb=1,ub=2,vb=3,wb=4,xb=5,yb=6,zb={},Ab={_isAMomentObject:null,_i:null,_f:null,_l:null,_strict:null,_tzm:null,_isUTC:null,_offset:null,_pf:null,_lang:null},Bb="undefined"!=typeof module&&module.exports,Cb=/^\/?Date\((\-?\d+)/i,Db=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Eb=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,Fb=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,Gb=/(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,Hb=/\d\d?/,Ib=/\d{1,3}/,Jb=/\d{1,4}/,Kb=/[+\-]?\d{1,6}/,Lb=/\d+/,Mb=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Nb=/Z|[\+\-]\d\d:?\d\d/gi,Ob=/T/i,Pb=/[\+\-]?\d+(\.\d{1,3})?/,Qb=/\d{1,2}/,Rb=/\d/,Sb=/\d\d/,Tb=/\d{3}/,Ub=/\d{4}/,Vb=/[+-]?\d{6}/,Wb=/[+-]?\d+/,Xb=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Yb="YYYY-MM-DDTHH:mm:ssZ",Zb=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],$b=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],_b=/([\+\-]|\d\d)/gi,ac=("Date|Hours|Minutes|Seconds|Milliseconds".split("|"),{Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6}),bc={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",D:"date",w:"week",W:"isoWeek",M:"month",Q:"quarter",y:"year",DDD:"dayOfYear",e:"weekday",E:"isoWeekday",gg:"weekYear",GG:"isoWeekYear"},cc={dayofyear:"dayOfYear",isoweekday:"isoWeekday",isoweek:"isoWeek",weekyear:"weekYear",isoweekyear:"isoWeekYear"},dc={},ec={s:45,m:45,h:22,dd:25,dm:45,dy:345},fc="DDD w W M D d".split(" "),gc="M D H h m s w W".split(" "),hc={M:function(){return this.month()+1},MMM:function(a){return this.lang().monthsShort(this,a)},MMMM:function(a){return this.lang().months(this,a)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(a){return this.lang().weekdaysMin(this,a)},ddd:function(a){return this.lang().weekdaysShort(this,a)},dddd:function(a){return this.lang().weekdays(this,a)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return m(this.year()%100,2)},YYYY:function(){return m(this.year(),4)},YYYYY:function(){return m(this.year(),5)},YYYYYY:function(){var a=this.year(),b=a>=0?"+":"-";return b+m(Math.abs(a),6)},gg:function(){return m(this.weekYear()%100,2)},gggg:function(){return m(this.weekYear(),4)},ggggg:function(){return m(this.weekYear(),5)},GG:function(){return m(this.isoWeekYear()%100,2)},GGGG:function(){return m(this.isoWeekYear(),4)},GGGGG:function(){return m(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.lang().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.lang().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return u(this.milliseconds()/100)},SS:function(){return m(u(this.milliseconds()/10),2)},SSS:function(){return m(this.milliseconds(),3)},SSSS:function(){return m(this.milliseconds(),3)},Z:function(){var a=-this.zone(),b="+";return 0>a&&(a=-a,b="-"),b+m(u(a/60),2)+":"+m(u(a)%60,2)},ZZ:function(){var a=-this.zone(),b="+";return 0>a&&(a=-a,b="-"),b+m(u(a/60),2)+m(u(a)%60,2)},z:function(){return this.zoneAbbr()},zz:function(){return this.zoneName()},X:function(){return this.unix()},Q:function(){return this.quarter()}},ic=["months","monthsShort","weekdays","weekdaysShort","weekdaysMin"];fc.length;)ob=fc.pop(),hc[ob+"o"]=f(hc[ob],ob);for(;gc.length;)ob=gc.pop(),hc[ob+ob]=e(hc[ob],2);for(hc.DDDD=e(hc.DDD,3),j(g.prototype,{set:function(a){var b,c;for(c in a)b=a[c],"function"==typeof b?this[c]=b:this["_"+c]=b},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(a){return this._months[a.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(a){return this._monthsShort[a.month()]},monthsParse:function(a){var b,c,d;for(this._monthsParse||(this._monthsParse=[]),b=0;12>b;b++)if(this._monthsParse[b]||(c=mb.utc([2e3,b]),d="^"+this.months(c,"")+"|^"+this.monthsShort(c,""),this._monthsParse[b]=new RegExp(d.replace(".",""),"i")),this._monthsParse[b].test(a))return b},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(a){return this._weekdays[a.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(a){return this._weekdaysShort[a.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(a){return this._weekdaysMin[a.day()]},weekdaysParse:function(a){var b,c,d;for(this._weekdaysParse||(this._weekdaysParse=[]),b=0;7>b;b++)if(this._weekdaysParse[b]||(c=mb([2e3,1]).day(b),d="^"+this.weekdays(c,"")+"|^"+this.weekdaysShort(c,"")+"|^"+this.weekdaysMin(c,""),this._weekdaysParse[b]=new RegExp(d.replace(".",""),"i")),this._weekdaysParse[b].test(a))return b},_longDateFormat:{LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D YYYY",LLL:"MMMM D YYYY LT",LLLL:"dddd, MMMM D YYYY LT"},longDateFormat:function(a){var b=this._longDateFormat[a];return!b&&this._longDateFormat[a.toUpperCase()]&&(b=this._longDateFormat[a.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a]=b),b},isPM:function(a){return"p"===(a+"").toLowerCase().charAt(0)},_meridiemParse:/[ap]\.?m?\.?/i,meridiem:function(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(a,b){var c=this._calendar[a];return"function"==typeof c?c.apply(b):c},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(a,b,c,d){var e=this._relativeTime[c];return"function"==typeof e?e(a,b,c,d):e.replace(/%d/i,a)},pastFuture:function(a,b){var c=this._relativeTime[a>0?"future":"past"];return"function"==typeof c?c(b):c.replace(/%s/i,b)},ordinal:function(a){return this._ordinal.replace("%d",a)},_ordinal:"%d",preparse:function(a){return a},postformat:function(a){return a},week:function(a){return bb(a,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6},_invalidDate:"Invalid date",invalidDate:function(){return this._invalidDate}}),mb=function(b,d,e,f){var g;return"boolean"==typeof e&&(f=e,e=a),g={},g._isAMomentObject=!0,g._i=b,g._f=d,g._l=e,g._strict=f,g._isUTC=!1,g._pf=c(),db(g)},mb.suppressDeprecationWarnings=!1,mb.createFromInputFallback=d("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(a){a._d=new Date(a._i)}),mb.min=function(){var a=[].slice.call(arguments,0);return eb("isBefore",a)},mb.max=function(){var a=[].slice.call(arguments,0);return eb("isAfter",a)},mb.utc=function(b,d,e,f){var g;return"boolean"==typeof e&&(f=e,e=a),g={},g._isAMomentObject=!0,g._useUTC=!0,g._isUTC=!0,g._l=e,g._i=b,g._f=d,g._strict=f,g._pf=c(),db(g).utc()},mb.unix=function(a){return mb(1e3*a)},mb.duration=function(a,b){var c,d,e,f=a,g=null;return mb.isDuration(a)?f={ms:a._milliseconds,d:a._days,M:a._months}:"number"==typeof a?(f={},b?f[b]=a:f.milliseconds=a):(g=Db.exec(a))?(c="-"===g[1]?-1:1,f={y:0,d:u(g[ub])*c,h:u(g[vb])*c,m:u(g[wb])*c,s:u(g[xb])*c,ms:u(g[yb])*c}):(g=Eb.exec(a))&&(c="-"===g[1]?-1:1,e=function(a){var b=a&&parseFloat(a.replace(",","."));return(isNaN(b)?0:b)*c},f={y:e(g[2]),M:e(g[3]),d:e(g[4]),h:e(g[5]),m:e(g[6]),s:e(g[7]),w:e(g[8])}),d=new i(f),mb.isDuration(a)&&a.hasOwnProperty("_lang")&&(d._lang=a._lang),d},mb.version=pb,mb.defaultFormat=Yb,mb.ISO_8601=function(){},mb.momentProperties=Ab,mb.updateOffset=function(){},mb.relativeTimeThreshold=function(b,c){return ec[b]===a?!1:(ec[b]=c,!0)},mb.lang=function(a,b){var c;return a?(b?D(B(a),b):null===b?(E(a),a="en"):zb[a]||F(a),c=mb.duration.fn._lang=mb.fn._lang=F(a),c._abbr):mb.fn._lang._abbr},mb.langData=function(a){return a&&a._lang&&a._lang._abbr&&(a=a._lang._abbr),F(a)},mb.isMoment=function(a){return a instanceof h||null!=a&&a.hasOwnProperty("_isAMomentObject")},mb.isDuration=function(a){return a instanceof i},ob=ic.length-1;ob>=0;--ob)t(ic[ob]);mb.normalizeUnits=function(a){return r(a)},mb.invalid=function(a){var b=mb.utc(0/0);return null!=a?j(b._pf,a):b._pf.userInvalidated=!0,b},mb.parseZone=function(){return mb.apply(null,arguments).parseZone()},mb.parseTwoDigitYear=function(a){return u(a)+(u(a)>68?1900:2e3)},j(mb.fn=h.prototype,{clone:function(){return mb(this)},valueOf:function(){return+this._d+6e4*(this._offset||0)},unix:function(){return Math.floor(+this/1e3)},toString:function(){return this.clone().lang("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._offset?new Date(+this):this._d},toISOString:function(){var a=mb(this).utc();return 0<a.year()&&a.year()<=9999?I(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):I(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var a=this;return[a.year(),a.month(),a.date(),a.hours(),a.minutes(),a.seconds(),a.milliseconds()]},isValid:function(){return A(this)},isDSTShifted:function(){return this._a?this.isValid()&&q(this._a,(this._isUTC?mb.utc(this._a):mb(this._a)).toArray())>0:!1},parsingFlags:function(){return j({},this._pf)},invalidAt:function(){return this._pf.overflow},utc:function(){return this.zone(0)},local:function(){return this.zone(0),this._isUTC=!1,this},format:function(a){var b=I(this,a||mb.defaultFormat);return this.lang().postformat(b)},add:function(a,b){var c;return c="string"==typeof a&&"string"==typeof b?mb.duration(isNaN(+b)?+a:+b,isNaN(+b)?b:a):"string"==typeof a?mb.duration(+b,a):mb.duration(a,b),n(this,c,1),this},subtract:function(a,b){var c;return c="string"==typeof a&&"string"==typeof b?mb.duration(isNaN(+b)?+a:+b,isNaN(+b)?b:a):"string"==typeof a?mb.duration(+b,a):mb.duration(a,b),n(this,c,-1),this},diff:function(a,b,c){var d,e,f=C(a,this),g=6e4*(this.zone()-f.zone());return b=r(b),"year"===b||"month"===b?(d=432e5*(this.daysInMonth()+f.daysInMonth()),e=12*(this.year()-f.year())+(this.month()-f.month()),e+=(this-mb(this).startOf("month")-(f-mb(f).startOf("month")))/d,e-=6e4*(this.zone()-mb(this).startOf("month").zone()-(f.zone()-mb(f).startOf("month").zone()))/d,"year"===b&&(e/=12)):(d=this-f,e="second"===b?d/1e3:"minute"===b?d/6e4:"hour"===b?d/36e5:"day"===b?(d-g)/864e5:"week"===b?(d-g)/6048e5:d),c?e:l(e)},from:function(a,b){return mb.duration(this.diff(a)).lang(this.lang()._abbr).humanize(!b)},fromNow:function(a){return this.from(mb(),a)},calendar:function(a){var b=a||mb(),c=C(b,this).startOf("day"),d=this.diff(c,"days",!0),e=-6>d?"sameElse":-1>d?"lastWeek":0>d?"lastDay":1>d?"sameDay":2>d?"nextDay":7>d?"nextWeek":"sameElse";return this.format(this.lang().calendar(e,this))},isLeapYear:function(){return y(this.year())},isDST:function(){return this.zone()<this.clone().month(0).zone()||this.zone()<this.clone().month(5).zone()},day:function(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=$(a,this.lang()),this.add({d:a-b})):b},month:ib("Month",!0),startOf:function(a){switch(a=r(a)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a?this.weekday(0):"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this},endOf:function(a){return a=r(a),this.startOf(a).add("isoWeek"===a?"week":a,1).subtract("ms",1)},isAfter:function(a,b){return b="undefined"!=typeof b?b:"millisecond",+this.clone().startOf(b)>+mb(a).startOf(b)},isBefore:function(a,b){return b="undefined"!=typeof b?b:"millisecond",+this.clone().startOf(b)<+mb(a).startOf(b)},isSame:function(a,b){return b=b||"ms",+this.clone().startOf(b)===+C(a,this).startOf(b)},min:d("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(a){return a=mb.apply(null,arguments),this>a?this:a}),max:d("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(a){return a=mb.apply(null,arguments),a>this?this:a}),zone:function(a,b){var c=this._offset||0;return null==a?this._isUTC?c:this._d.getTimezoneOffset():("string"==typeof a&&(a=L(a)),Math.abs(a)<16&&(a=60*a),this._offset=a,this._isUTC=!0,c!==a&&(!b||this._changeInProgress?n(this,mb.duration(c-a,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,mb.updateOffset(this,!0),this._changeInProgress=null)),this)},zoneAbbr:function(){return this._isUTC?"UTC":""},zoneName:function(){return this._isUTC?"Coordinated Universal Time":""},parseZone:function(){return this._tzm?this.zone(this._tzm):"string"==typeof this._i&&this.zone(this._i),this},hasAlignedHourOffset:function(a){return a=a?mb(a).zone():0,(this.zone()-a)%60===0},daysInMonth:function(){return v(this.year(),this.month())},dayOfYear:function(a){var b=rb((mb(this).startOf("day")-mb(this).startOf("year"))/864e5)+1;return null==a?b:this.add("d",a-b)},quarter:function(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)},weekYear:function(a){var b=bb(this,this.lang()._week.dow,this.lang()._week.doy).year;return null==a?b:this.add("y",a-b)},isoWeekYear:function(a){var b=bb(this,1,4).year;return null==a?b:this.add("y",a-b)},week:function(a){var b=this.lang().week(this);return null==a?b:this.add("d",7*(a-b))},isoWeek:function(a){var b=bb(this,1,4).week;return null==a?b:this.add("d",7*(a-b))},weekday:function(a){var b=(this.day()+7-this.lang()._week.dow)%7;return null==a?b:this.add("d",a-b)},isoWeekday:function(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)},isoWeeksInYear:function(){return w(this.year(),1,4)},weeksInYear:function(){var a=this._lang._week;return w(this.year(),a.dow,a.doy)},get:function(a){return a=r(a),this[a]()},set:function(a,b){return a=r(a),"function"==typeof this[a]&&this[a](b),this},lang:function(b){return b===a?this._lang:(this._lang=F(b),this)}}),mb.fn.millisecond=mb.fn.milliseconds=ib("Milliseconds",!1),mb.fn.second=mb.fn.seconds=ib("Seconds",!1),mb.fn.minute=mb.fn.minutes=ib("Minutes",!1),mb.fn.hour=mb.fn.hours=ib("Hours",!0),mb.fn.date=ib("Date",!0),mb.fn.dates=d("dates accessor is deprecated. Use date instead.",ib("Date",!0)),mb.fn.year=ib("FullYear",!0),mb.fn.years=d("years accessor is deprecated. Use year instead.",ib("FullYear",!0)),mb.fn.days=mb.fn.day,mb.fn.months=mb.fn.month,mb.fn.weeks=mb.fn.week,mb.fn.isoWeeks=mb.fn.isoWeek,mb.fn.quarters=mb.fn.quarter,mb.fn.toJSON=mb.fn.toISOString,j(mb.duration.fn=i.prototype,{_bubble:function(){var a,b,c,d,e=this._milliseconds,f=this._days,g=this._months,h=this._data;h.milliseconds=e%1e3,a=l(e/1e3),h.seconds=a%60,b=l(a/60),h.minutes=b%60,c=l(b/60),h.hours=c%24,f+=l(c/24),h.days=f%30,g+=l(f/30),h.months=g%12,d=l(g/12),h.years=d},weeks:function(){return l(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*u(this._months/12)},humanize:function(a){var b=+this,c=ab(b,!a,this.lang());return a&&(c=this.lang().pastFuture(b,c)),this.lang().postformat(c)},add:function(a,b){var c=mb.duration(a,b);return this._milliseconds+=c._milliseconds,this._days+=c._days,this._months+=c._months,this._bubble(),this},subtract:function(a,b){var c=mb.duration(a,b);return this._milliseconds-=c._milliseconds,this._days-=c._days,this._months-=c._months,this._bubble(),this},get:function(a){return a=r(a),this[a.toLowerCase()+"s"]()},as:function(a){return a=r(a),this["as"+a.charAt(0).toUpperCase()+a.slice(1)+"s"]()},lang:mb.fn.lang,toIsoString:function(){var a=Math.abs(this.years()),b=Math.abs(this.months()),c=Math.abs(this.days()),d=Math.abs(this.hours()),e=Math.abs(this.minutes()),f=Math.abs(this.seconds()+this.milliseconds()/1e3);return this.asSeconds()?(this.asSeconds()<0?"-":"")+"P"+(a?a+"Y":"")+(b?b+"M":"")+(c?c+"D":"")+(d||e||f?"T":"")+(d?d+"H":"")+(e?e+"M":"")+(f?f+"S":""):"P0D"}});for(ob in ac)ac.hasOwnProperty(ob)&&(kb(ob,ac[ob]),jb(ob.toLowerCase()));kb("Weeks",6048e5),mb.duration.fn.asMonths=function(){return(+this-31536e6*this.years())/2592e6+12*this.years()},mb.lang("en",{ordinal:function(a){var b=a%10,c=1===u(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),Bb?module.exports=mb:"function"==typeof define&&define.amd?(define("moment",function(a,b,c){return c.config&&c.config()&&c.config().noGlobal===!0&&(qb.moment=nb),mb}),lb(!0)):lb()}).call(this);;var filehelper = {
     filesToDownload: [],
    noOfCompletedFiles: 0,
    totalFilesToDownload: 0,
    downloadAsset: function(fileName, assetURL, callback) {
    	if(window.cordova){
    		var fileTransfer = new FileTransfer();
	      var  destinationPath =  cordova.file.dataDirectory;

        if(fileName==="countdown_alert.mp3"){
             $fileToCheck = cordova.file.dataDirectory+"justbogusfilename.jpg";
        }else{
             $fileToCheck = cordova.file.dataDirectory+fileName;
        }

        window.resolveLocalFileSystemURL($fileToCheck, function(){
            console.info($fileToCheck+" already exist, no need to download");
            filehelper.noOfCompletedFiles++;
            if(typeof callback!="undefined"){
                callback();
            }
        }, function(){
          fileTransfer.download(assetURL, destinationPath + fileName,
              function(entry) {
                console.info("Downloaded file: "+fileName);
                filehelper.noOfCompletedFiles++;
                if(typeof callback!="undefined"){
                    callback();
                }
                return true;
              },
              function(err) {
                filehelper.noOfCompletedFiles++;
                if(typeof callback!="undefined"){
                    callback();
                }
                console.info("Download Error = "+JSON.stringify(err));
                  return false;
              }
          );
        });

	        

    	}else{
    		console.log("WEB VERSION! No download possible");
    		return false;
    	}
    },

    checkFileExist: function(filePath){
    	var response = $.ajax({
    		url: filePath,
    		type: "HEAD",
    		async: false
    	}).status;

    	return (response!="200") ? false: true;
    },
    downloadModuleFiles: function(){
       
        if(filehelper.filesToDownload.length===0){
            console.warn("DOWNLOAD COMPLETE!");
            return;
        }

        var file = filehelper.filesToDownload.pop();
        var fileName = file.split("/").pop(); //get the filename to process

        if(window.cordova){
          var fileTransfer = new FileTransfer();
          var  destinationPath =  cordova.file.dataDirectory;

          if(fileName==="countdown_alert.mp3"){
               $fileToCheck = cordova.file.dataDirectory+"justbogusfilename.jpg";
          }else{
               $fileToCheck = cordova.file.dataDirectory+fileName;
          }

          window.resolveLocalFileSystemURL($fileToCheck, function(){
              filehelper.showDownloadProgress();
              filehelper.downloadModuleFiles();
              
          }, function(){
            fileTransfer.download(file, destinationPath + fileName,
                function(entry) {
                  console.warn("Downloaded file: "+fileName);
                  filehelper.showDownloadProgress();
                  filehelper.downloadModuleFiles();
                  return true;
                },
                function(err) {
                  console.warn("Download Error = "+JSON.stringify(err));
                  filehelper.showDownloadProgress();
                  filehelper.downloadModuleFiles();
                  return false;
                }
            );
          });

          

      }else{
        console.log("WEB VERSION! No download possible");
        return false;
      }
    },
    showDownloadProgress: function(){
         filehelper.noOfCompletedFiles = filehelper.totalFilesToDownload-filehelper.filesToDownload.length;
         $unitLength = 100/filehelper.totalFilesToDownload;
         $progresslength = filehelper.noOfCompletedFiles * $unitLength;
         console.warn("Total Items: "+filehelper.totalFilesToDownload+", Completed: "+filehelper.noOfCompletedFiles+", progress: "+$progresslength);
         $("#downloading-files-progress").find(".file-dwnld-progress").css("width",$progresslength+"%");
        if(filehelper.noOfCompletedFiles==filehelper.totalFilesToDownload || $progresslength>=100){
              var timerOut = setTimeout(function(){
                   $("#downloading-files-progress").find(".file-dwnld-progress").css("width","0%");
                   clearTimeout(timerOut);
              },2000);
         }
    },
     downloadModuleFilesOld: function(data){ //Module icons and countdown audio
            //now save module icons only if there is any
         // filehelper.noOfCompletedFiles = 0;

          if(data.constructor == Array && data.length>0){
                  var micons = data;
                  //if(window.cordova){
                   // console.info("FILE = "+JSON.stringify(data));
                    for(var k=0;k<micons.length;k++){
                        var obj = micons[k];
                        if($.trim(obj.url)!=""){
                           
                            //file doesnot exist download it.
                            filehelper.downloadAsset(obj.file, obj.url,function(){
                                 $unitLength = 100/(micons.length);
                                 $progresslength = filehelper.noOfCompletedFiles * $unitLength;
                                
                                 $("#downloading-files-progress").find(".file-dwnld-progress").css("width",$progresslength+"%");
                                 if(filehelper.noOfCompletedFiles==micons.length ||   $progresslength>=100){
                                      var timerOut = setTimeout(function(){
                                           $("#downloading-files-progress").find(".file-dwnld-progress").css("width","0%");
                                           clearTimeout(timerOut);
                                      },2000);
                                 }
                            });
                        }
                    }
                  //}

            }
    },
    killAllSound: function(){
         if(typeof MySkills!="undefined"){
            if(typeof MySkills.MyAudio!="undefined"){
                MySkills.MyAudio.pause();
                if(typeof MySkills.isPlaying!="undefined") MySkills.isPlaying = 0;
            }

            //clear countdown timer
            if(typeof MySkills.intervalID!="undefined"){
                 clearInterval(MySkills.intervalID);
                 MySkills.intervalID = 0;
                 $(".countdown_time").val(0);
            }
           
        }
    },
    getFileVersion: function(){
        var s = "BIP v2.0.3 Build 6.05.08";
        $("#Login").find(".app-version").html(s);
    },
    showHideKeyBoard: function(doWhat){
         if(typeof Keyboard!="undefined"){
            if(doWhat=="show"){
                Keyboard.show();
            }else{
                Keyboard.hide();
            }
        }
    },
    getRemotePath: function(){
        $host = webServiceURL;
        $split = $host.split("index.php");
        $remoteUrl = $split[0];
        
        return $remoteUrl;
    }

};
;/*! rangeslider.js - v1.3.3 | (c) 2015 @andreruffert | MIT license | https://github.com/andreruffert/rangeslider.js */
!function(a){"use strict";"function"==typeof define&&define.amd?define(["jquery"],a):a("object"==typeof exports?require("jquery"):jQuery)}(function(a){"use strict";function b(){var a=document.createElement("input");return a.setAttribute("type","range"),"text"!==a.type}function c(a,b){var c=Array.prototype.slice.call(arguments,2);return setTimeout(function(){return a.apply(null,c)},b)}function d(a,b){return b=b||100,function(){if(!a.debouncing){var c=Array.prototype.slice.apply(arguments);a.lastReturnVal=a.apply(window,c),a.debouncing=!0}return clearTimeout(a.debounceTimeout),a.debounceTimeout=setTimeout(function(){a.debouncing=!1},b),a.lastReturnVal}}function e(a){return a&&(0===a.offsetWidth||0===a.offsetHeight||a.open===!1)}function f(a){for(var b=[],c=a.parentNode;e(c);)b.push(c),c=c.parentNode;return b}function g(a,b){function c(a){"undefined"!=typeof a.open&&(a.open=a.open?!1:!0)}var d=f(a),e=d.length,g=[],h=a[b];if(e){for(var i=0;e>i;i++)g[i]=d[i].style.cssText,d[i].style.display="block",d[i].style.height="0",d[i].style.overflow="hidden",d[i].style.visibility="hidden",c(d[i]);h=a[b];for(var j=0;e>j;j++)d[j].style.cssText=g[j],c(d[j])}return h}function h(a,b){var c=parseFloat(a);return Number.isNaN(c)?b:c}function i(b,e){if(this.$window=a(window),this.$document=a(document),this.$element=a(b),this.options=a.extend({},m,e),this.polyfill=this.options.polyfill,this.onInit=this.options.onInit,this.onSlide=this.options.onSlide,this.onSlideEnd=this.options.onSlideEnd,this.polyfill&&l)return!1;this.identifier="js-"+j+"-"+k++,this.startEvent=this.options.startEvent.join("."+this.identifier+" ")+"."+this.identifier,this.moveEvent=this.options.moveEvent.join("."+this.identifier+" ")+"."+this.identifier,this.endEvent=this.options.endEvent.join("."+this.identifier+" ")+"."+this.identifier,this.toFixed=(this.step+"").replace(".","").length-1,this.$fill=a('<div class="'+this.options.fillClass+'" />'),this.$handle=a('<div class="'+this.options.handleClass+'" />'),this.$range=a('<div class="'+this.options.rangeClass+'" id="'+this.identifier+'" />').insertAfter(this.$element).prepend(this.$fill,this.$handle),this.$element.css({position:"absolute",width:"1px",height:"1px",overflow:"hidden",opacity:"0"}),this.handleDown=a.proxy(this.handleDown,this),this.handleMove=a.proxy(this.handleMove,this),this.handleEnd=a.proxy(this.handleEnd,this),this.init();var f=this;this.$window.on("resize."+this.identifier,d(function(){c(function(){f.update()},300)},20)),this.$document.on(this.startEvent,"#"+this.identifier+":not(."+this.options.disabledClass+")",this.handleDown),this.$element.on("change."+this.identifier,function(a,b){if(!b||b.origin!==f.identifier){var c=a.target.value,d=f.getPositionFromValue(c);f.setPosition(d)}})}Number.isNaN=Number.isNaN||function(a){return"number"==typeof a&&a!==a};var j="rangeslider",k=0,l=b(),m={polyfill:!0,rangeClass:"rangeslider",disabledClass:"rangeslider--disabled",fillClass:"rangeslider__fill",handleClass:"rangeslider__handle",startEvent:["mousedown","touchstart","pointerdown"],moveEvent:["mousemove","touchmove","pointermove"],endEvent:["mouseup","touchend","pointerup"]};i.prototype.init=function(){this.update(!0),this.$element[0].value=this.value,this.onInit&&"function"==typeof this.onInit&&this.onInit()},i.prototype.update=function(a){a=a||!1,a&&(this.min=h(this.$element[0].getAttribute("min"),0),this.max=h(this.$element[0].getAttribute("max"),100),this.value=h(this.$element[0].value,this.min+(this.max-this.min)/2),this.step=h(this.$element[0].getAttribute("step"),1)),this.handleWidth=g(this.$handle[0],"offsetWidth"),this.rangeWidth=g(this.$range[0],"offsetWidth"),this.maxHandleX=this.rangeWidth-this.handleWidth,this.grabX=this.handleWidth/2,this.position=this.getPositionFromValue(this.value),this.$element[0].disabled?this.$range.addClass(this.options.disabledClass):this.$range.removeClass(this.options.disabledClass),this.setPosition(this.position,!1)},i.prototype.handleDown=function(a){if(a.preventDefault(),this.$document.on(this.moveEvent,this.handleMove),this.$document.on(this.endEvent,this.handleEnd),!((" "+a.target.className+" ").replace(/[\n\t]/g," ").indexOf(this.options.handleClass)>-1)){var b=this.getRelativePosition(a),c=this.$range[0].getBoundingClientRect().left,d=this.getPositionFromNode(this.$handle[0])-c;this.setPosition(b-this.grabX),b>=d&&b<d+this.handleWidth&&(this.grabX=b-d)}},i.prototype.handleMove=function(a){a.preventDefault();var b=this.getRelativePosition(a);this.setPosition(b-this.grabX)},i.prototype.handleEnd=function(a){a.preventDefault(),this.$document.off(this.moveEvent,this.handleMove),this.$document.off(this.endEvent,this.handleEnd),this.$element.trigger("change",{origin:this.identifier}),this.onSlideEnd&&"function"==typeof this.onSlideEnd&&this.onSlideEnd(this.position,this.value)},i.prototype.cap=function(a,b,c){return b>a?b:a>c?c:a},i.prototype.setPosition=function(a,b){var c,d;c=this.getValueFromPosition(this.cap(a,0,this.maxHandleX)),d=this.getPositionFromValue(c),this.$fill[0].style.width=d+this.grabX+"px",this.$handle[0].style.left=d+"px",this.setValue(c),this.position=d,this.value=c,this.onSlide&&"function"==typeof this.onSlide&&"undefined"==typeof b&&this.onSlide(d,c)},i.prototype.getPositionFromNode=function(a){for(var b=0;null!==a;)b+=a.offsetLeft,a=a.offsetParent;return b},i.prototype.getRelativePosition=function(a){var b=this.$range[0].getBoundingClientRect().left,c=0;return"undefined"!=typeof a.pageX?c=a.pageX:"undefined"!=typeof a.originalEvent.clientX?c=a.originalEvent.clientX:a.originalEvent.touches&&a.originalEvent.touches[0]&&"undefined"!=typeof a.originalEvent.touches[0].clientX?c=a.originalEvent.touches[0].clientX:a.currentPoint&&"undefined"!=typeof a.currentPoint.x&&(c=a.currentPoint.x),c-b},i.prototype.getPositionFromValue=function(a){var b,c;return b=(a-this.min)/(this.max-this.min),c=b*this.maxHandleX},i.prototype.getValueFromPosition=function(a){var b,c;return b=a/(this.maxHandleX||1),c=this.step*Math.round(b*(this.max-this.min)/this.step)+this.min,Number(c.toFixed(this.toFixed))},i.prototype.setValue=function(a){a!==this.value&&this.$element.val(a).trigger("input",{origin:this.identifier})},i.prototype.destroy=function(){this.$document.off("."+this.identifier),this.$window.off("."+this.identifier),this.$element.off("."+this.identifier).removeAttr("style").removeData("plugin_"+j),this.$range&&this.$range.length&&this.$range[0].parentNode.removeChild(this.$range[0])},a.fn[j]=function(b){var c=Array.prototype.slice.call(arguments,1);return this.each(function(){var d=a(this),e=d.data("plugin_"+j);e||d.data("plugin_"+j,e=new i(this,b)),"string"==typeof b&&e[b].apply(e,c)})}});;/*!
 * Mobiscroll v2.11.0
 * http://mobiscroll.com
 *
 * Copyright 2010-2014, Acid Media
 * Licensed under the MIT license.
 *
 */
(function ($) {

    function testProps(props) {
        var i;
        for (i in props) {
            if (mod[props[i]] !== undefined) {
                return true;
            }
        }
        return false;
    }

    function testPrefix() {
        var prefixes = ['Webkit', 'Moz', 'O', 'ms'],
            p;

        for (p in prefixes) {
            if (testProps([prefixes[p] + 'Transform'])) {
                return '-' + prefixes[p].toLowerCase() + '-';
            }
        }
        return '';
    }

    function getCoord(e, c) {
        e = e.originalEvent || e;
        return e.changedTouches ? e.changedTouches[0]['page' + c] : e['page' + c];
    }

    function init(that, options, args) {
        var ret = that;

        // Init
        if (typeof options === 'object') {
            return that.each(function () {
                if (!this.id) {
                    this.id = 'mobiscroll' + (++id);
                }
                if (instances[this.id]) {
                    instances[this.id].destroy();
                }
                new $.mobiscroll.classes[options.component || 'Scroller'](this, options);
            });
        }

        // Method call
        if (typeof options === 'string') {
            that.each(function () {
                var r,
                    inst = instances[this.id];

                if (inst && inst[options]) {
                    r = inst[options].apply(this, Array.prototype.slice.call(args, 1));
                    if (r !== undefined) {
                        ret = r;
                        return false;
                    }
                }
            });
        }

        return ret;
    }

    function testTouch(e) {
        if (e.type == 'touchstart') {
            touches[e.target] = true;
        } else if (touches[e.target]) {
            delete touches[e.target];
            return false;
        }
        return true;
    }

    var id = +new Date(),
        touches = {},
        instances = {},
        extend = $.extend,
        mod = document.createElement('modernizr').style,
        has3d = testProps(['perspectiveProperty', 'WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective']),
        hasFlex = testProps(['flex', 'msFlex', 'WebkitBoxDirection']),
        prefix = testPrefix(),
        pr = prefix.replace(/^\-/, '').replace(/\-$/, '').replace('moz', 'Moz');

    $.fn.mobiscroll = function (method) {
        extend(this, $.mobiscroll.components);
        return init(this, method, arguments);
    };

    $.mobiscroll = $.mobiscroll || {
        util: {
            prefix: prefix,
            jsPrefix: pr,
            has3d: has3d,
            hasFlex: hasFlex,
            getCoord: getCoord,
            testTouch: testTouch
        },
        presets: {},
        themes: {},
        i18n: {},
        instances: instances,
        classes: {},
        components: {},
        defaults: {},
        userdef: {},
        setDefaults: function (o) {
            extend(this.userdef, o);
        },
        presetShort: function (name, c) {
            this.components[name] = function (s) {
                return init(this, extend(s, { component: c, preset: name }), arguments);
            };
        }
    };

    $.scroller = $.scroller || $.mobiscroll;
    $.fn.scroller = $.fn.scroller || $.fn.mobiscroll;

})(jQuery);
;(function ($) {

    $.mobiscroll.classes.Scroller = function (el, settings) {
        var $doc,
            $header,
            $markup,
            $overlay,
            $persp,
            $popup,
            $wnd,
            hasButtons,
            isLiquid,
            isModal,
            isScrollable,
            isVisible,
            itemHeight,
            preset,
            preventChange,
            preventPos,
            scrollLock,
            theme,
            valueText,
            wasReadOnly,
            wndWidth,
            wndHeight,

            m,
            mw, // Modal width
            mh, // Modal height
            anim,
            lang,
            click,
            moved,
            start,
            startTime,
            stop,
            p,
            min,
            max,
            target,
            index,
            lines,
            timer,
            buttons,
            btn,
            that = this,
            $elm = $(el),
            s,
            iv = {},
            pos = {},
            pixels = {},
            wheels = [],
            elmList = [],
            isInput = $elm.is('input');

        // Event handlers

        function onStart(ev) {
            // Scroll start
            if (testTouch(ev) && !move && !click && !btn && !isReadOnly(this)) {
                // Prevent touch highlight
                ev.preventDefault();

                move = true;
                isScrollable = s.mode != 'clickpick';
                target = $('.dw-ul', this);
                setGlobals(target);
                moved = iv[index] !== undefined; // Don't allow tap, if still moving
                p = moved ? getCurrentPosition(target) : pos[index];
                start = getCoord(ev, 'Y');
                startTime = new Date();
                stop = start;
                scroll(target, index, p, 0.001);

                if (isScrollable) {
                    target.closest('.dwwl').addClass('dwa');
                }

                if (ev.type === 'mousedown') {
                    $(document).on('mousemove', onMove).on('mouseup', onEnd);
                }
            }
        }

        function onMove(ev) {
            if (move) {
                if (isScrollable) {
                    // Prevent scroll
                    ev.preventDefault();
                    ev.stopPropagation();
                    stop = getCoord(ev, 'Y');
                    scroll(target, index, constrain(p + (start - stop) / itemHeight, min - 1, max + 1));
                }
                if (start !== stop) {
                    moved = true;
                }
            }
        }

        function onEnd(ev) {
            if (move) {
                var time = new Date() - startTime,
                    val = constrain(p + (start - stop) / itemHeight, min - 1, max + 1),
                    speed,
                    dist,
                    tindex,
                    ttop = target.offset().top;

                if (has3d && time < 300) {
                    speed = (stop - start) / time;
                    dist = (speed * speed) / s.speedUnit;
                    if (stop - start < 0) {
                        dist = -dist;
                    }
                } else {
                    dist = stop - start;
                }

                tindex = Math.round(p - dist / itemHeight);

                if (!dist && !moved) { // this is a "tap"
                    var idx = Math.floor((stop - ttop) / itemHeight),
                        li = $($('.dw-li', target)[idx]),
                        hl = isScrollable;
                    if (event('onValueTap', [li]) !== false) {
                        tindex = idx;
                    } else {
                        hl = true;
                    }

                    if (hl) {
                        li.addClass('dw-hl'); // Highlight
                        setTimeout(function () {
                            li.removeClass('dw-hl');
                        }, 200);
                    }
                }

                if (isScrollable) {
                    calc(target, tindex, 0, true, Math.round(val));
                }

                if (ev.type === 'mouseup') {
                    $(document).off('mousemove', onMove).off('mouseup', onEnd);
                }

                move = false;
            }
        }

        function onBtnStart(ev) {
            // Can't call preventDefault here, it kills page scroll
            if (btn) {
                btn.removeClass('dwb-a');
            }
            btn = $(this);
            // Active button
            if (!btn.hasClass('dwb-d') && !btn.hasClass('dwb-nhl')) {
                btn.addClass('dwb-a');
            }
            // +/- buttons
            if (btn.hasClass('dwwb')) {
                if (testTouch(ev)) {
                    step(ev, btn.closest('.dwwl'), btn.hasClass('dwwbp') ? plus : minus);
                }
            }
            if (ev.type === 'mousedown') {
                $(document).on('mouseup', onBtnEnd);
            }
        }

        function onBtnEnd(ev) {
            if (click) {
                clearInterval(timer);
                click = false;
            }
            if (btn) {
                btn.removeClass('dwb-a');
                btn = null;
            }
            if (ev.type === 'mouseup') {
                $(document).off('mousedown', onBtnEnd);
            }
        }

        function onKeyDown(ev) {
            if (ev.keyCode == 38) { // up
                step(ev, $(this), minus);
            } else if (ev.keyCode == 40) { // down
                step(ev, $(this), plus);
            }
        }

        function onKeyUp() {
            if (click) {
                clearInterval(timer);
                click = false;
            }
        }

        function onScroll(ev) {
            if (!isReadOnly(this)) {
                ev.preventDefault();
                ev = ev.originalEvent || ev;
                var delta = ev.wheelDelta ? (ev.wheelDelta / 120) : (ev.detail ? (-ev.detail / 3) : 0),
                    t = $('.dw-ul', this);

                setGlobals(t);
                calc(t, Math.round(pos[index] - delta), delta < 0 ? 1 : 2);
            }
        }

        function onHide(prevAnim) {
            var activeEl,
                value,
                type;

            $markup.remove();
            if ($activeElm && !prevAnim) {
                setTimeout(function () {
                    preventShow = true;
                    activeEl = $activeElm[0];
                    type = activeEl.type;
                    value = activeEl.value;
                    activeEl.type = 'button';
                    $activeElm.focus();
                    activeEl.type = type;
                    activeEl.value = value;
                }, 200);
            }
            isVisible = false;
        }

        // Private functions

        function step(ev, w, func) {
            ev.stopPropagation();
            ev.preventDefault();
            if (!click && !isReadOnly(w) && !w.hasClass('dwa')) {
                click = true;
                // + Button
                var t = w.find('.dw-ul');

                setGlobals(t);
                clearInterval(timer);
                timer = setInterval(function () { func(t); }, s.delay);
                func(t);
            }
        }

        function isReadOnly(wh) {
            if ($.isArray(s.readonly)) {
                var i = $('.dwwl', $markup).index(wh);
                return s.readonly[i];
            }
            return s.readonly;
        }

        function generateWheelItems(i) {
            var html = '<div class="dw-bf">',
                ww = wheels[i],
                // @deprecated since 2.6.0, backward compatibility code
                // ---
                w = ww.values ? ww : convert(ww),
                // ---
                l = 1,
                labels = w.labels || [],
                values = w.values,
                keys = w.keys || values;

            $.each(values, function (j, v) {
                if (l % 20 === 0) {
                    html += '</div><div class="dw-bf">';
                }
                html += '<div role="option" aria-selected="false" class="dw-li dw-v" data-val="' + keys[j] + '"' + (labels[j] ? ' aria-label="' + labels[j] + '"' : '') + ' style="height:' + itemHeight + 'px;line-height:' + itemHeight + 'px;">' +
                    '<div class="dw-i"' + (lines > 1 ? ' style="line-height:' + Math.round(itemHeight / lines) + 'px;font-size:' + Math.round(itemHeight / lines * 0.8) + 'px;"' : '') + '>' + v + '</div></div>';
                l++;
            });

            html += '</div>';
            return html;
        }

        function setGlobals(t) {
            min = $('.dw-li', t).index($('.dw-v', t).eq(0));
            max = $('.dw-li', t).index($('.dw-v', t).eq(-1));
            index = $('.dw-ul', $markup).index(t);
        }

        function formatHeader(v) {
            var t = s.headerText;
            return t ? (typeof t === 'function' ? t.call(el, v) : t.replace(/\{value\}/i, v)) : '';
        }

        function readValue() {
            that.temp = that.values ? that.values.slice(0) : s.parseValue($elm.val() || '', that);
            setValue();
        }

        function getCurrentPosition(t) {
            var style = window.getComputedStyle ? getComputedStyle(t[0]) : t[0].style,
                matrix,
                px;

            if (has3d) {
                $.each(['t', 'webkitT', 'MozT', 'OT', 'msT'], function (i, v) {
                    if (style[v + 'ransform'] !== undefined) {
                        matrix = style[v + 'ransform'];
                        return false;
                    }
                });
                matrix = matrix.split(')')[0].split(', ');
                px = matrix[13] || matrix[5];
            } else {
                px = style.top.replace('px', '');
            }

            return Math.round(m - (px / itemHeight));
        }

        function ready(t, i) {
            clearTimeout(iv[i]);
            delete iv[i];
            t.closest('.dwwl').removeClass('dwa');
        }

        function scroll(t, index, val, time, active) {
            var px = (m - val) * itemHeight,
                style = t[0].style;

            if (px == pixels[index] && iv[index]) {
                return;
            }

            if (time && px != pixels[index]) {
                // Trigger animation start event
                event('onAnimStart', [$markup, index, time]);
            }

            pixels[index] = px;

            style[pr + 'Transition'] = 'all ' + (time ? time.toFixed(3) : 0) + 's ease-out';

            if (has3d) {
                style[pr + 'Transform'] = 'translate3d(0,' + px + 'px,0)';
            } else {
                style.top = px + 'px';
            }

            if (iv[index]) {
                ready(t, index);
            }

            if (time && active) {
                t.closest('.dwwl').addClass('dwa');
                iv[index] = setTimeout(function () {
                    ready(t, index);
                }, time * 1000);
            }

            pos[index] = val;
        }

        function getValid(val, t, dir) {
            var cell = $('.dw-li[data-val="' + val + '"]', t),
                cells = $('.dw-li', t),
                v = cells.index(cell),
                l = cells.length;

            // Scroll to a valid cell
            if (!cell.hasClass('dw-v')) {
                var cell1 = cell,
                    cell2 = cell,
                    dist1 = 0,
                    dist2 = 0;

                while (v - dist1 >= 0 && !cell1.hasClass('dw-v')) {
                    dist1++;
                    cell1 = cells.eq(v - dist1);
                }

                while (v + dist2 < l && !cell2.hasClass('dw-v')) {
                    dist2++;
                    cell2 = cells.eq(v + dist2);
                }

                // If we have direction (+/- or mouse wheel), the distance does not count
                if (((dist2 < dist1 && dist2 && dir !== 2) || !dist1 || (v - dist1 < 0) || dir == 1) && cell2.hasClass('dw-v')) {
                    cell = cell2;
                    v = v + dist2;
                } else {
                    cell = cell1;
                    v = v - dist1;
                }
            }

            return {
                cell: cell,
                v: v,
                val: cell.hasClass('dw-v') ? cell.attr('data-val') : null
            };
        }

        function scrollToPos(time, index, manual, dir, active) {
            // Call validation event
            if (event('validate', [$markup, index, time, dir]) !== false) {
                // Set scrollers to position
                $('.dw-ul', $markup).each(function (i) {
                    var t = $(this),
                        sc = i == index || index === undefined,
                        res = getValid(that.temp[i], t, dir),
                        cell = res.cell;

                    if (!(cell.hasClass('dw-sel')) || sc) {
                        // Set valid value
                        that.temp[i] = res.val;

                        if (!s.multiple) {
                            $('.dw-sel', t).removeAttr('aria-selected');
                            cell.attr('aria-selected', 'true');
                        }

                        // Add selected class to cell
                        $('.dw-sel', t).removeClass('dw-sel');
                        cell.addClass('dw-sel');

                        // Scroll to position
                        scroll(t, i, res.v, sc ? time : 0.1, sc ? active : false);
                    }
                });

                // Reformat value if validation changed something
                valueText = s.formatResult(that.temp);
                if (that.live) {
                    setValue(manual, manual, 0, true);
                }

                $header.html(formatHeader(valueText));

                if (manual) {
                    event('onChange', [valueText]);
                }
            }

        }

        function event(name, args) {
            var ret;
            args.push(that);
            $.each([userdef, theme, preset, settings], function (i, v) {
                if (v && v[name]) { // Call preset event
                    ret = v[name].apply(el, args);
                }
            });
            return ret;
        }

        function calc(t, val, dir, anim, orig) {
            val = constrain(val, min, max);

            var cell = $('.dw-li', t).eq(val),
                o = orig === undefined ? val : orig,
                active = orig !== undefined,
                idx = index,
                time = anim ? (val == o ? 0.1 : Math.abs((val - o) * s.timeUnit)) : 0;

            // Set selected scroller value
            that.temp[idx] = cell.attr('data-val');

            scroll(t, idx, val, time, active);

            setTimeout(function () {
                // Validate
                scrollToPos(time, idx, true, dir, active);
            }, 10);
        }

        function plus(t) {
            var val = pos[index] + 1;
            calc(t, val > max ? min : val, 1, true);
        }

        function minus(t) {
            var val = pos[index] - 1;
            calc(t, val < min ? max : val, 2, true);
        }

        function setValue(fill, change, time, noscroll, temp) {
            if (isVisible && !noscroll) {
                scrollToPos(time);
            }

            valueText = s.formatResult(that.temp);

            if (!temp) {
                that.values = that.temp.slice(0);
                that.val = valueText;
            }

            if (fill) {

                event('onValueFill', [valueText, change]);

                if (isInput) {
                    $elm.val(valueText);
                    if (change) {
                        preventChange = true;
                        $elm.change();
                    }
                }
            }
        }

        function attachPosition(ev, checkLock) {
            var debounce;
            $wnd.on(ev, function () {
                clearTimeout(debounce);
                debounce = setTimeout(function () {
                    if ((scrollLock && checkLock) || !checkLock) {
                        that.position(!checkLock);
                    }
                }, 200);
            });
        }

        // Public functions

        /**
        * Positions the scroller on the screen.
        */
        that.position = function (check) {

            var nw = $persp.width(), // To get the width without scrollbar
                nh = $wnd[0].innerHeight || $wnd.innerHeight();

            if (!(wndWidth === nw && wndHeight === nh && check) && !preventPos && (event('onPosition', [$markup, nw, nh]) !== false) && isModal) {
                var w,
                    l,
                    t,
                    aw, // anchor width
                    ah, // anchor height
                    ap, // anchor position
                    at, // anchor top
                    al, // anchor left
                    arr, // arrow
                    arrw, // arrow width
                    arrl, // arrow left
                    dh,
                    scroll,
                    totalw = 0,
                    minw = 0,
                    sl = $wnd.scrollLeft(),
                    st = $wnd.scrollTop(),
                    wr = $('.dwwr', $markup),
                    d = $('.dw', $markup),
                    css = {},
                    anchor = s.anchor === undefined ? $elm : s.anchor;

                // Set / unset liquid layout based on screen width, but only if not set explicitly by the user
                if (isLiquid && s.layout !== 'liquid') {
                    if (nw < 400) {
                        $markup.addClass('dw-liq');
                    } else {
                        $markup.removeClass('dw-liq');
                    }
                }

                if (/modal|bubble/.test(s.display)) {
                    wr.width('');
                    $('.dwc', $markup).each(function () {
                        w = $(this).outerWidth(true);
                        totalw += w;
                        minw = (w > minw) ? w : minw;
                    });
                    w = totalw > nw ? minw : totalw;
                    wr.width(w).css('white-space', totalw > nw ? '' : 'nowrap');
                }

                mw = d.outerWidth();
                mh = d.outerHeight(true);
                scrollLock = mh <= nh && mw <= nw;

                that.scrollLock = scrollLock;

                if (s.display == 'modal') {
                    l = Math.max(0, (nw - mw) / 2);
                    t = st + (nh - mh) / 2;
                } else if (s.display == 'bubble') {
                    scroll = true;
                    arr = $('.dw-arrw-i', $markup);
                    ap = anchor.offset();
                    at = Math.abs($(s.context).offset().top - ap.top);
                    al = Math.abs($(s.context).offset().left - ap.left);

                    // horizontal positioning
                    aw = anchor.outerWidth();
                    ah = anchor.outerHeight();
                    l = constrain(al - (d.outerWidth(true) - aw) / 2 - sl, 3, nw - mw - 3);

                    // vertical positioning
                    t = at - mh; // above the input
                    if ((t < st) || (at > st + nh)) { // if doesn't fit above or the input is out of the screen
                        d.removeClass('dw-bubble-top').addClass('dw-bubble-bottom');
                        t = at + ah; // below the input
                    } else {
                        d.removeClass('dw-bubble-bottom').addClass('dw-bubble-top');
                    }

                    // Calculate Arrow position
                    arrw = arr.outerWidth();
                    arrl = constrain(al + aw / 2 - (l + (mw - arrw) / 2) - sl, 0, arrw);

                    // Limit Arrow position
                    $('.dw-arr', $markup).css({ left: arrl });
                } else {
                    if (s.display == 'top') {
                        t = st;
                    } else if (s.display == 'bottom') {
                        t = st + nh - mh;
                    }
                }

                css.top = t < 0 ? 0 : t;
                css.left = l;
                d.css(css);

                // If top + modal height > doc height, increase doc height
                $persp.height(0);
                dh = Math.max(t + mh, s.context == 'body' ? $(document).height() : $doc.scrollHeight);
                $persp.css({ height: dh, left: sl });

                // Scroll needed
                if (scroll && ((t + mh > st + nh) || (at > st + nh))) {
                    preventPos = true;
                    setTimeout(function () { preventPos = false; }, 300);
                    $wnd.scrollTop(Math.min(t + mh - nh, dh - nh));
                }
            }

            wndWidth = nw;
            wndHeight = nh;
        };

        /**
        * Enables the scroller and the associated input.
        */
        that.enable = function () {
            s.disabled = false;
            if (isInput) {
                $elm.prop('disabled', false);
            }
        };

        /**
        * Disables the scroller and the associated input.
        */
        that.disable = function () {
            s.disabled = true;
            if (isInput) {
                $elm.prop('disabled', true);
            }
        };

        /**
        * Gets the selected wheel values, formats it, and set the value of the scroller instance.
        * If input parameter is true, populates the associated input element.
        * @param {Array} values Wheel values.
        * @param {Boolean} [fill=false] Also set the value of the associated input element.
        * @param {Number} [time=0] Animation time
        * @param {Boolean} [temp=false] If true, then only set the temporary value.(only scroll there but not set the value)
        */
        that.setValue = function (values, fill, time, temp, change) {
            that.temp = $.isArray(values) ? values.slice(0) : s.parseValue.call(el, values + '', that);
            setValue(fill, change === undefined ? fill : change, time, false, temp);
        };

        /**
        * Return the selected wheel values.
        */
        that.getValue = function () {
            return that.values;
        };

        /**
        * Return selected values, if in multiselect mode.
        */
        that.getValues = function () {
            var ret = [],
                i;

            for (i in that._selectedValues) {
                ret.push(that._selectedValues[i]);
            }
            return ret;
        };

        /**
        * Changes the values of a wheel, and scrolls to the correct position
        * @param {Array} idx Indexes of the wheels to change.
        * @param {Number} [time=0] Animation time when scrolling to the selected value on the new wheel.
        * @param {Boolean} [manual=false] Indicates that the change was triggered by the user or from code.
        */
        that.changeWheel = function (idx, time, manual) {
            if ($markup) {
                var i = 0,
                    nr = idx.length;

                $.each(s.wheels, function (j, wg) {
                    $.each(wg, function (k, w) {
                        if ($.inArray(i, idx) > -1) {
                            wheels[i] = w;
                            $('.dw-ul', $markup).eq(i).html(generateWheelItems(i));
                            nr--;
                            if (!nr) {
                                that.position();
                                scrollToPos(time, undefined, manual);
                                return false;
                            }
                        }
                        i++;
                    });
                    if (!nr) {
                        return false;
                    }
                });
            }
        };

        /**
        * Return true if the scroller is currently visible.
        */
        that.isVisible = function () {
            return isVisible;
        };

        /**
        * Attach tap event to the given element.
        */
        that.tap = function (el, handler, prevent) {
            var startX,
                startY;

            if (s.tap) {
                el.on('touchstart.dw', function (ev) {
                    // Can't always call preventDefault here, it kills page scroll
                    if (prevent) {
                        ev.preventDefault();
                    }
                    startX = getCoord(ev, 'X');
                    startY = getCoord(ev, 'Y');
                }).on('touchend.dw', function (ev) {
                    var that = this;
                    // If movement is less than 20px, fire the click event handler
                    if (Math.abs(getCoord(ev, 'X') - startX) < 20 && Math.abs(getCoord(ev, 'Y') - startY) < 20) {
                        // preventDefault and setTimeout are needed by iOS
                        ev.preventDefault();
                        setTimeout(function () {
                            handler.call(that, ev);
                        }, isOldAndroid ? 400 : 10);
                    }
                    setTap();
                });
            }

            el.on('click.dw', function (ev) {
                if (!tap) {
                    // If handler was not called on touchend, call it on click;
                    handler.call(this, ev);
                }
                ev.preventDefault();
            });

        };

        /**
        * Shows the scroller instance.
        * @param {Boolean} prevAnim - Prevent animation if true
        * @param {Boolean} prevFocus - Prevent focusing if true
        */
        that.show = function (prevAnim, prevFocus) {
            // Create wheels
            var lbl,
                html,
                l = 0,
                mAnim = '';

            if (s.disabled || isVisible) {
                return;
            }

            if (anim !== false) {
                if (s.display == 'top') {
                    anim = 'slidedown';
                }
                if (s.display == 'bottom') {
                    anim = 'slideup';
                }
            }

            // Parse value from input
            readValue();

            event('onBeforeShow', []);

            if (isModal && anim && !prevAnim) {
                mAnim = 'dw-' + anim + ' dw-in';
            }

            // Create wheels containers
            html = '<div class="' + s.theme + ' dw-' + s.display +
                (isLiquid ? ' dw-liq' : '') +
                (lines > 1 ? ' dw-ml' : '') +
                (hasButtons ? '' : ' dw-nobtn') + '">' +
                    '<div class="dw-persp">' +
                        (isModal ? '<div class="dwo"></div>' : '') + // Overlay
                        '<div' + (isModal ? ' role="dialog" tabindex="-1"' : '') + ' class="dw dwbg ' + mAnim + (s.rtl ? ' dw-rtl' : ' dw-ltr') + '">' + // Popup
                            (s.display === 'bubble' ? '<div class="dw-arrw"><div class="dw-arrw-i"><div class="dw-arr"></div></div></div>' : '') + // Bubble arrow
                            '<div class="dwwr">' + // Popup content
                                '<div aria-live="assertive" class="dwv' + (s.headerText ? '' : ' dw-hidden') + '"></div>' + // Header
                                '<div class="dwcc">'; // Wheel group container

            $.each(s.wheels, function (i, wg) { // Wheel groups
                html += '<div class="dwc' + (s.mode != 'scroller' ? ' dwpm' : ' dwsc') + (s.showLabel ? '' : ' dwhl') + '">' +
                            '<div class="dwwc"' + (s.maxWidth ? '' : ' style="max-width:600px;"') + '>' +
                                (hasFlex ? '' : '<table class="dw-tbl" cellpadding="0" cellspacing="0"><tr>');

                $.each(wg, function (j, w) { // Wheels
                    wheels[l] = w;
                    lbl = w.label !== undefined ? w.label : j;
                    html += '<' + (hasFlex ? 'div' : 'td') + ' class="dwfl"' + ' style="' +
                                    (s.fixedWidth ? ('width:' + (s.fixedWidth[l] || s.fixedWidth) + 'px;') :
                                    (s.minWidth ? ('min-width:' + (s.minWidth[l] || s.minWidth) + 'px;') : 'min-width:' + s.width + 'px;') +
                                    (s.maxWidth ? ('max-width:' + (s.maxWidth[l] || s.maxWidth) + 'px;') : '')) + '">' +
                                '<div class="dwwl dwwl' + l + '">' +
                                (s.mode != 'scroller' ?
                                    '<a href="#" tabindex="-1" class="dwb-e dwwb dwwbp ' + (s.btnPlusClass || '') + '" style="height:' + itemHeight + 'px;line-height:' + itemHeight + 'px;"><span>+</span></a>' + // + button
                                    '<a href="#" tabindex="-1" class="dwb-e dwwb dwwbm ' + (s.btnMinusClass  || '') + '" style="height:' + itemHeight + 'px;line-height:' + itemHeight + 'px;"><span>&ndash;</span></a>' : '') + // - button
                                '<div class="dwl">' + lbl + '</div>' + // Wheel label
                                '<div tabindex="0" aria-live="off" aria-label="' + lbl + '" role="listbox" class="dwww">' +
                                    '<div class="dww" style="height:' + (s.rows * itemHeight) + 'px;">' +
                                        '<div class="dw-ul">';

                    // Create wheel values
                    html += generateWheelItems(l) +
                        '</div></div><div class="dwwo"></div></div><div class="dwwol"' +
                        (s.selectedLineHeight ? ' style="height:' + itemHeight + 'px;margin-top:-' + (itemHeight / 2 + (s.selectedLineBorder || 0)) + 'px;"' : '') + '></div></div>' +
                        (hasFlex ? '</div>' : '</td>');

                    l++;
                });

                html += (hasFlex ? '' : '</tr></table>') + '</div></div>';
            });

            html += '</div>';

            if (isModal && hasButtons) {
                html += '<div class="dwbc">';
                $.each(buttons, function (i, b) {
                    b = (typeof b === 'string') ? that.buttons[b] : b;
                    html += '<span' + (s.btnWidth ? ' style="width:' + (100 / buttons.length) + '%"' : '') + ' class="dwbw ' + b.css + '"><a href="#" class="dwb dwb' + i + ' dwb-e" role="button">' + b.text + '</a></span>';
                });
                html += '</div>';
            }
            html += '</div></div></div></div>';

            $markup = $(html);
            $persp = $('.dw-persp', $markup);
            $overlay = $('.dwo', $markup);
            $header = $('.dwv', $markup);
            $popup = $('.dw', $markup);

            pixels = {};

            isVisible = true;

            scrollToPos();

            event('onMarkupReady', [$markup]);

            // Show
            if (isModal) {
                ms.activeInstance = that;
                $markup.appendTo(s.context);
                if (has3d && anim && !prevAnim) {
                    $markup.addClass('dw-trans').on(animEnd, function () {
                        $markup.removeClass('dw-trans').find('.dw').removeClass(mAnim);
                        if (!prevFocus) {
                            $popup.focus();
                        }
                    });
                }
            } else if ($elm.is('div')) {
                $elm.html($markup);
            } else {
                $markup.insertAfter($elm);
            }

            event('onMarkupInserted', [$markup]);

            if (isModal) {
                // Enter / ESC
                $(window).on('keydown.dw', function (ev) {
                    if (ev.keyCode == 13) {
                        that.select();
                    } else if (ev.keyCode == 27) {
                        that.cancel();
                    }
                });

                // Prevent scroll if not specified otherwise
                if (s.scrollLock) {
                    $markup.on('touchmove', function (ev) {
                        if (scrollLock) {
                            ev.preventDefault();
                        }
                    });
                }

                // Disable inputs to prevent bleed through (Android bug)
                //if (isOldAndroid) {
                if (pr !== 'Moz') {
                    $('input,select,button', $doc).each(function () {
                        if (!this.disabled) {
                            $(this).addClass('dwtd').prop('disabled', true);
                        }
                    });
                }

                attachPosition('scroll.dw', true);
            }

            // Set position
            that.position();
            attachPosition('orientationchange.dw resize.dw', false);

            // Events
            $markup.on('DOMMouseScroll mousewheel', '.dwwl', onScroll)
                .on('keydown', '.dwwl', onKeyDown)
                .on('keyup', '.dwwl', onKeyUp)
                .on('selectstart mousedown', prevdef) // Prevents blue highlight on Android and text selection in IE
                .on('click', '.dwb-e', prevdef)
                .on('keydown', '.dwb-e', function (ev) {
                    if (ev.keyCode == 32) { // Space
                        ev.preventDefault();
                        ev.stopPropagation();
                        $(this).click();
                    }
                });

            setTimeout(function () {
                // Init buttons
                $.each(buttons, function (i, b) {
                    that.tap($('.dwb' + i, $markup), function (ev) {
                        b = (typeof b === 'string') ? that.buttons[b] : b;
                        b.handler.call(this, ev, that);
                    }, true);
                });

                if (s.closeOnOverlay) {
                    that.tap($overlay, function () {
                        that.cancel();
                    });
                }

                if (isModal && !anim && !prevFocus) {
                    $popup.focus();
                }

                $markup
                    .on('touchstart mousedown', '.dwwl', onStart)
                    .on('touchmove', '.dwwl', onMove)
                    .on('touchend', '.dwwl', onEnd)
                    .on('touchstart mousedown', '.dwb-e', onBtnStart)
                    .on('touchend', '.dwb-e', onBtnEnd);

            }, 300);

            event('onShow', [$markup, valueText]);
        };

        /**
        * Hides the scroller instance.
        */
        that.hide = function (prevAnim, btn, force) {

            // If onClose handler returns false, prevent hide
            if (!isVisible || (!force && event('onClose', [valueText, btn]) === false)) {
                return false;
            }

            // Re-enable temporary disabled fields
            //if (isOldAndroid) {
            if (pr !== 'Moz') {
                $('.dwtd', $doc).each(function () {
                    $(this).prop('disabled', false).removeClass('dwtd');
                });
            }

            // Hide wheels and overlay
            if ($markup) {
                if (has3d && isModal && anim && !prevAnim && !$markup.hasClass('dw-trans')) { // If dw-trans class was not removed, means that there was no animation
                    $markup.addClass('dw-trans').find('.dw').addClass('dw-' + anim + ' dw-out').on(animEnd, function () {
                        onHide(prevAnim);
                    });
                } else {
                    onHide(prevAnim);
                }

                // Stop positioning on window resize
                $wnd.off('.dw');
            }

            delete ms.activeInstance;
        };

        /**
        * Set button handler.
        */
        that.select = function () {
            if (that.hide(false, 'set') !== false) {
                setValue(true, true, 0, true);
                event('onSelect', [that.val]);
            }
        };

        /**
        * Cancel and hide the scroller instance.
        */
        that.cancel = function () {
            if (that.hide(false, 'cancel') !== false) {
                event('onCancel', [that.val]);
            }
        };

        /**
        * Show mobiscroll on focus and click event of the parameter.
        * @param {jQuery} $elm - Events will be attached to this element.
        * @param {Function} [beforeShow=undefined] - Optional function to execute before showing mobiscroll.
        */
        that.attachShow = function ($elm, beforeShow) {
            elmList.push($elm);
            if (s.display !== 'inline') {
                $elm
                    .on('mousedown.dw', prevdef) // Prevent input to get focus on tap (virtual keyboard pops up on some devices)
                    .on((s.showOnFocus ? 'focus.dw' : '') + (s.showOnTap ? ' click.dw' : ''), function (ev) {
                        if ((ev.type !== 'focus' || (ev.type === 'focus' && !preventShow)) && !tap) {
                            if (beforeShow) {
                                beforeShow();
                            }
                            // Hide virtual keyboard
                            if ($(document.activeElement).is('input,textarea')) {
                                $(document.activeElement).blur();
                            }
                            $activeElm = $elm;
                            that.show();
                        }
                        setTimeout(function () {
                            preventShow = false;
                        }, 300); // With jQuery < 1.9 focus is fired twice in IE
                    });
            }
        };

        /**
        * Scroller initialization.
        */
        that.init = function (ss) {
            var pres;

            // Update original user settings
            extend(settings, ss); 

            s = extend({}, defaults, userdef, settings);

            // Get theme defaults
            theme = ms.themes[s.theme];

            // Get language defaults
            lang = ms.i18n[s.lang];

            event('onThemeLoad', [lang, settings]);

            extend(s, theme, lang, userdef, settings);

            // Add default buttons
            s.buttons = s.buttons || ['set', 'cancel'];

            // Hide header text in inline mode by default
            s.headerText = s.headerText === undefined ? (s.display !== 'inline' ? '{value}' : false) : s.headerText;

            that.settings = s;

            // Unbind all events (if re-init)
            $elm.off('.dw');

            pres = ms.presets[s.preset];

            if (pres) {
                preset = pres.call(el, that);
                extend(s, preset, settings); // Load preset settings
            }

            // Set private members
            m = Math.floor(s.rows / 2);
            itemHeight = s.height;
            anim = isOldAndroid ? false : s.animate;
            lines = s.multiline;
            isLiquid = (s.layout || (/top|bottom/.test(s.display) && s.wheels.length == 1 ? 'liquid' : '')) === 'liquid';
            isModal = s.display !== 'inline';
            buttons = s.buttons;
            $wnd = $(s.context == 'body' ? window : s.context);
            $doc = $(s.context)[0];

            // @deprecated since 2.8.0, backward compatibility code
            // ---
            if (!s.setText) {
                buttons.splice($.inArray('set', buttons), 1);
            }
            if (!s.cancelText) {
                buttons.splice($.inArray('cancel', buttons), 1);
            }
            if (s.button3) {
                buttons.splice($.inArray('set', buttons) + 1, 0, { text: s.button3Text, handler: s.button3 });
            }
            // ---

            that.context = $wnd;
            that.live = !isModal || ($.inArray('set', buttons) == -1);
            that.buttons.set = { text: s.setText, css: 'dwb-s', handler: that.select };
            that.buttons.cancel = { text: (that.live) ? s.closeText : s.cancelText, css: 'dwb-c', handler: that.cancel };
            that.buttons.clear = {
                text: s.clearText,
                css: 'dwb-cl',
                handler: function () {
                    that.trigger('onClear', [$markup]);
                    $elm.val('');
                    if (!that.live) {
                        that.hide(false, 'clear');
                    }
                }
            };

            hasButtons = buttons.length > 0;

            if (isVisible) {
                that.hide(true, false, true);
            }

            if (isModal) {
                readValue();
                if (isInput) {
                    // Set element readonly, save original state
                    if (wasReadOnly === undefined) {
                        wasReadOnly = el.readOnly;
                    }
                    el.readOnly = true;
                }
                that.attachShow($elm);
            } else {
                that.show();
            }

            if (isInput) {
                $elm.on('change.dw', function () {
                    if (!preventChange) {
                        that.setValue($elm.val(), false, 0.2);
                    }
                    preventChange = false;
                });
            }
        };

        /**
        * Sets one ore more options.
        */
        that.option = function (opt, value) {
            var obj = {};
            if (typeof opt === 'object') {
                obj = opt;
            } else {
                obj[opt] = value;
            }
            that.init(obj);
        };

        /**
        * Destroys the mobiscroll instance.
        */
        that.destroy = function () {
            // Force hide without animation
            that.hide(true, false, true);

            // Remove all events from elements
            $.each(elmList, function (i, v) {
                v.off('.dw');
            });

            // Reset original readonly state
            if (isInput) {
                el.readOnly = wasReadOnly;
            }

            // Delete scroller instance
            delete instances[el.id];

            event('onDestroy', []);
        };

        /**
        * Returns the mobiscroll instance.
        */
        that.getInst = function () {
            return that;
        };

        /**
        * Returns the closest valid cell.
        */
        that.getValidCell = getValid;

        /**
        * Triggers a mobiscroll event.
        */
        that.trigger = event;

        instances[el.id] = that;

        that.values = null;
        that.val = null;
        that.temp = null;
        that.buttons = {};
        that._selectedValues = {};

        that.init(settings);
    };

    function setTap() {
        tap = true;
        setTimeout(function () {
            tap = false;
        }, 500);
    }

    function constrain(val, min, max) {
        return Math.max(min, Math.min(val, max));
    }

    /**
     * @deprecated since 2.6.0, backward compatibility code
     */
    function convert(w) {
        var ret = {
            values: [],
            keys: []
        };
        $.each(w, function (k, v) {
            ret.keys.push(k);
            ret.values.push(v);
        });
        return ret;
    }

    var $activeElm,
        move,
        tap,
        preventShow,
        ms = $.mobiscroll,
        instances = ms.instances,
        util = ms.util,
        pr = util.jsPrefix,
        has3d = util.has3d,
        hasFlex = util.hasFlex,
        getCoord = util.getCoord,
        testTouch = util.testTouch,
        prevdef = function (ev) { ev.preventDefault(); },
        extend = $.extend,
        animEnd = 'webkitAnimationEnd animationend',
        userdef = ms.userdef,
        isOldAndroid = /android [1-3]/i.test(navigator.userAgent),
        defaults = extend(ms.defaults, {
            // Localization
            setText: 'Set',
            selectedText: 'Selected',
            closeText: 'Close',
            cancelText: 'Cancel',
            clearText: 'Clear',
            // Options
            minWidth: 80,
            height: 40,
            rows: 3,
            multiline: 1,
            delay: 300,
            disabled: false,
            readonly: false,
            closeOnOverlay: true,
            showOnFocus: true,
            showOnTap: true,
            showLabel: true,
            wheels: [],
            theme: '',
            display: 'modal',
            mode: 'scroller',
            preset: '',
            //lang: 'en-US',
            context: 'body',
            scrollLock: true,
            tap: true,
            btnWidth: true,
            speedUnit: 0.0012,
            timeUnit: 0.1,
            formatResult: function (d) {
                return d.join(' ');
            },
            parseValue: function (value, inst) {
                var val = value.split(' '),
                    ret = [],
                    i = 0,
                    keys;

                $.each(inst.settings.wheels, function (j, wg) {
                    $.each(wg, function (k, w) {
                        // @deprecated since 2.6.0, backward compatibility code
                        // ---
                        w = w.values ? w : convert(w);
                        // ---
                        keys = w.keys || w.values;
                        if ($.inArray(val[i], keys) !== -1) {
                            ret.push(val[i]);
                        } else {
                            ret.push(keys[0]);
                        }
                        i++;
                    });
                });
                return ret;
            }
        });

    // Prevent re-show on window focus
    $(window).on('focus', function () {
        if ($activeElm) {
            preventShow = true;
        }
    });

    $(document).on('mouseover mouseup mousedown click', function (ev) { // Prevent standard behaviour on body click
        if (tap) {
            ev.stopPropagation();
            ev.preventDefault();
            return false;
        }
    });

})(jQuery);
;(function ($) {

    var ms = $.mobiscroll,
        date = new Date(),
        defaults = {
            startYear: date.getFullYear() - 100,
            endYear: date.getFullYear() + 1,
            shortYearCutoff: '+10',
            showNow: false,
            stepHour: 1,
            stepMinute: 1,
            stepSecond: 1,
            separator: ' ',
            // Localization
            dateFormat: 'mm/dd/yy',
            dateOrder: 'mmddy',
            timeWheels: 'hhiiA',
            timeFormat: 'hh:ii A',
            monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            monthText: 'Month',
            dayText: 'Day',
            yearText: 'Year',
            hourText: 'Hours',
            minuteText: 'Minutes',
            ampmText: '&nbsp;',
            secText: 'Seconds',
            amText: 'am',
            pmText: 'pm',
            nowText: 'Now',
            getYear: function (d) { return d.getFullYear(); },
            getMonth: function (d) { return d.getMonth(); },
            getDay: function (d) { return d.getDate(); },
            getDate: function (y, m, d, h, i, s) { return new Date(y, m, d, h || 0, i || 0, s || 0); },
            getMaxDayOfMonth: function (y, m) { return 32 - new Date(y, m, 32).getDate(); },
            getWeekNumber: function (d) {
                // Copy date so don't modify original
                d = new Date(d);
                d.setHours(0, 0, 0);
                // Set to nearest Thursday: current date + 4 - current day number
                // Make Sunday's day number 7
                d.setDate(d.getDate() + 4 - (d.getDay() || 7));
                // Get first day of year
                var yearStart = new Date(d.getFullYear(), 0, 1);
                // Calculate full weeks to nearest Thursday
                return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
            }
        },
        /**
         * @class Mobiscroll.datetime
         * @extends Mobiscroll
         * Mobiscroll Datetime component
         */
        preset = function (inst) {
            var that = $(this),
                html5def = {},
                format;
            // Force format for html5 date inputs (experimental)
            if (that.is('input')) {
                switch (that.attr('type')) {
                case 'date':
                    format = 'yy-mm-dd';
                    break;
                case 'datetime':
                    format = 'yy-mm-ddTHH:ii:ssZ';
                    break;
                case 'datetime-local':
                    format = 'yy-mm-ddTHH:ii:ss';
                    break;
                case 'month':
                    format = 'yy-mm';
                    html5def.dateOrder = 'mmyy';
                    break;
                case 'time':
                    format = 'HH:ii:ss';
                    break;
                }
                // Check for min/max attributes
                var min = that.attr('min'),
                    max = that.attr('max');
                if (min) {
                    html5def.minDate = ms.parseDate(format, min);
                }
                if (max) {
                    html5def.maxDate = ms.parseDate(format, max);
                }
            }

            // Set year-month-day order
            var i,
                k,
                keys,
                values,
                wg,
                start,
                end,
                hasTime,
                orig = $.extend({}, inst.settings),
                s = $.extend(inst.settings, defaults, html5def, orig),
                offset = 0,
                wheels = [],
                ord = [],
                o = {},
                f = { y: getYear, m: getMonth, d: getDay, h: getHour, i: getMinute, s: getSecond, a: getAmPm },
                invalid = s.invalid,
                valid = s.valid,
                p = s.preset,
                dord = s.dateOrder,
                tord = s.timeWheels,
                regen = dord.match(/D/),
                ampm = tord.match(/a/i),
                hampm = tord.match(/h/),
                hformat = p == 'datetime' ? s.dateFormat + s.separator + s.timeFormat : p == 'time' ? s.timeFormat : s.dateFormat,
                defd = new Date(),
                stepH = s.stepHour,
                stepM = s.stepMinute,
                stepS = s.stepSecond,
                mind = s.minDate || new Date(s.startYear, 0, 1),
                maxd = s.maxDate || new Date(s.endYear, 11, 31, 23, 59, 59),
                minH = mind.getHours() % stepH,
                minM = mind.getMinutes() % stepM,
                minS = mind.getSeconds() % stepS,
                maxH = getMax(stepH, minH, (hampm ? 11 : 23)),
                maxM = getMax(stepM, minM, 59),
                maxS = getMax(stepM, minM, 59);

            format = format || hformat;

            if (p.match(/date/i)) {

                // Determine the order of year, month, day wheels
                $.each(['y', 'm', 'd'], function (j, v) {
                    i = dord.search(new RegExp(v, 'i'));
                    if (i > -1) {
                        ord.push({ o: i, v: v });
                    }
                });
                ord.sort(function (a, b) { return a.o > b.o ? 1 : -1; });
                $.each(ord, function (i, v) {
                    o[v.v] = i;
                });

                wg = [];
                for (k = 0; k < 3; k++) {
                    if (k == o.y) {
                        offset++;
                        values = [];
                        keys = [];
                        start = s.getYear(mind);
                        end = s.getYear(maxd);
                        for (i = start; i <= end; i++) {
                            keys.push(i);
                            values.push((dord.match(/yy/i) ? i : (i + '').substr(2, 2)) + (s.yearSuffix || ''));
                        }
                        addWheel(wg, keys, values, s.yearText);
                    } else if (k == o.m) {
                        offset++;
                        values = [];
                        keys = [];
                        for (i = 0; i < 12; i++) {
                            var str = dord.replace(/[dy]/gi, '').replace(/mm/, (i < 9 ? '0' + (i + 1) : i + 1) + (s.monthSuffix || '')).replace(/m/, i + 1 + (s.monthSuffix || ''));
                            keys.push(i);
                            values.push(str.match(/MM/) ? str.replace(/MM/, '<span class="dw-mon">' + s.monthNames[i] + '</span>') : str.replace(/M/, '<span class="dw-mon">' + s.monthNamesShort[i] + '</span>'));
                        }
                        addWheel(wg, keys, values, s.monthText);
                    } else if (k == o.d) {
                        offset++;
                        values = [];
                        keys = [];
                        for (i = 1; i < 32; i++) {
                            keys.push(i);
                            values.push((dord.match(/dd/i) && i < 10 ? '0' + i : i) + (s.daySuffix || ''));
                        }
                        addWheel(wg, keys, values, s.dayText);
                    }
                }
                wheels.push(wg);
            }

            if (p.match(/time/i)) {
                hasTime = true;

                // Determine the order of hours, minutes, seconds wheels
                ord = [];
                $.each(['h', 'i', 's', 'a'], function (i, v) {
                    i = tord.search(new RegExp(v, 'i'));
                    if (i > -1) {
                        ord.push({ o: i, v: v });
                    }
                });
                ord.sort(function (a, b) {
                    return a.o > b.o ? 1 : -1;
                });
                $.each(ord, function (i, v) {
                    o[v.v] = offset + i;
                });

                wg = [];
                for (k = offset; k < offset + 4; k++) {
                    if (k == o.h) {
                        offset++;
                        values = [];
                        keys = [];
                        for (i = minH; i < (hampm ? 12 : 24); i += stepH) {
                            keys.push(i);
                            values.push(hampm && i === 0 ? 12 : tord.match(/hh/i) && i < 10 ? '0' + i : i);
                        }
                        addWheel(wg, keys, values, s.hourText);
                    } else if (k == o.i) {
                        offset++;
                        values = [];
                        keys = [];
                        for (i = minM; i < 60; i += stepM) {
                            keys.push(i);
                            values.push(tord.match(/ii/) && i < 10 ? '0' + i : i);
                        }
                        addWheel(wg, keys, values, s.minuteText);
                    } else if (k == o.s) {
                        offset++;
                        values = [];
                        keys = [];
                        for (i = minS; i < 60; i += stepS) {
                            keys.push(i);
                            values.push(tord.match(/ss/) && i < 10 ? '0' + i : i);
                        }
                        addWheel(wg, keys, values, s.secText);
                    } else if (k == o.a) {
                        offset++;
                        var upper = tord.match(/A/);
                        addWheel(wg, [0, 1], upper ? [s.amText.toUpperCase(), s.pmText.toUpperCase()] : [s.amText, s.pmText], s.ampmText);
                    }
                }

                wheels.push(wg);
            }

            function get(d, i, def) {
                if (o[i] !== undefined) {
                    return +d[o[i]];
                }
                if (def !== undefined) {
                    return def;
                }
                return f[i](defd);
            }

            function addWheel(wg, k, v, lbl) {
                wg.push({
                    values: v,
                    keys: k,
                    label: lbl
                });
            }

            function step(v, st, min, max) {
                return Math.min(max, Math.floor(v / st) * st + min);
            }

            function getYear(d) {
                return s.getYear(d);
            }
			
            function getMonth(d) {
                return s.getMonth(d);
            }

            function getDay(d) {
                return s.getDay(d);
            }

            function getHour(d) {
                var hour = d.getHours();
                hour = hampm && hour >= 12 ? hour - 12 : hour;
                return step(hour, stepH, minH, maxH);
            }

            function getMinute(d) {
                return step(d.getMinutes(), stepM, minM, maxM);
            }

            function getSecond(d) {
                return step(d.getSeconds(), stepS, minS, maxS);
            }

            function getAmPm(d) {
                return ampm && d.getHours() > 11 ? 1 : 0;
            }

            function getDate(d) {
                var hour = get(d, 'h', 0);
                return s.getDate(get(d, 'y'), get(d, 'm'), get(d, 'd'), get(d, 'a', 0) ? hour + 12 : hour, get(d, 'i', 0), get(d, 's', 0));
            }

            function getMax(step, min, max) {
                return Math.floor((max - min) / step) * step + min;
            }

            function getClosestValidDate(d, dir) {
                var next,
                    prev,
                    nextValid = false,
                    prevValid = false,
                    up = 0,
                    down = 0;

                if (isValid(d)) {
                    return d;
                }

                if (d < mind) {
                    d = mind;
                }

                if (d > maxd) {
                    d = maxd;
                }

                next = d;
                prev = d;

                if (dir !== 2) {
                    nextValid = isValid(next);

                    while (!nextValid && next < maxd) {
                        next = new Date(next.getTime() + 1000 * 60 * 60 * 24);
                        nextValid = isValid(next);
                        up++;
                    }
                }

                if (dir !== 1) {
                    prevValid = isValid(prev);

                    while (!prevValid && prev > mind) {
                        prev = new Date(prev.getTime() - 1000 * 60 * 60 * 24);
                        prevValid = isValid(prev);
                        down++;
                    }
                }

                if (dir === 1 && nextValid) {
                    return next;
                }

                if (dir === 2 && prevValid) {
                    return prev;
                }

                return down < up && prevValid ? prev : next;
            }

            function isValid(d) {
                if (d < mind) {
                    return false;
                }

                if (d > maxd) {
                    return false;
                }

                if (isInObj(d, valid)) {
                    return true;
                }

                if (isInObj(d, invalid)) {
                    return false;
                }

                return true;
            }

            function isInObj(d, obj) {
                var curr,
                    j,
                    v;

                if (obj) {
                    for (j = 0; j < obj.length; j++) {
                        curr = obj[j];
                        v = curr + '';
                        if (!curr.start) {
                            if (curr.getTime) { // Exact date
                                if (d.getFullYear() == curr.getFullYear() && d.getMonth() == curr.getMonth() && d.getDate() == curr.getDate()) {
                                    return true;
                                }
                            } else if (!v.match(/w/i)) { // Day of month
                                v = v.split('/');
                                if (v[1]) {
                                    if ((v[0] - 1) == d.getMonth() && v[1] == d.getDate()) {
                                        return true;
                                    }
                                } else if (v[0] == d.getDate()) {
                                    return true;
                                }
                            } else { // Day of week
                                v = +v.replace('w', '');
                                if (v == d.getDay()) {
                                    return true;
                                }
                            }
                        }
                    }
                }
                return false;
            }

            function validateDates(obj, y, m, first, maxdays, idx, val) {
                var j, d, v;

                if (obj) {
                    for (j = 0; j < obj.length; j++) {
                        d = obj[j];
                        v = d + '';
                        if (!d.start) {
                            if (d.getTime) { // Exact date
                                if (s.getYear(d) == y && s.getMonth(d) == m) {
                                    idx[s.getDay(d) - 1] = val;
                                }
                            } else if (!v.match(/w/i)) { // Day of month
                                v = v.split('/');
                                if (v[1]) {
                                    if (v[0] - 1 == m) {
                                        idx[v[1] - 1] = val;
                                    }
                                } else {
                                    idx[v[0] - 1] = val;
                                }
                            } else { // Day of week
                                v = +v.replace('w', '');
                                for (k = v - first; k < maxdays; k += 7) {
                                    if (k >= 0) {
                                        idx[k] = val;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            function validateTimes(vobj, temp, y, m, mins, maxs, dir, dw, valid) {
                var dd, v, val, str, parts1, parts2, j, v1, v2, i1, i2, prop1, prop2, target, add, remove,
                    spec = {},
                    steps = { h: stepH, i: stepM, s: stepS, a: 1 },
                    d = get(temp, 'd'),
                    day = s.getDate(y, m, d),
                    w = ['a', 'h', 'i', 's'];

                if (vobj) {
                    $.each(vobj, function (i, obj) {
                        if (obj.start) {
                            obj.apply = false;
                            dd = obj.d;
                            v = dd + '';
                            str = v.split('/');
                            if (dd && ((dd.getTime && y == s.getYear(dd) && m == s.getMonth(dd) && d == s.getDay(dd)) || // Exact date
                                (!v.match(/w/i) && ((str[1] && d == str[1] && m == str[0] - 1) || (!str[1] && d == str[0]))) || // Day of month
                                (v.match(/w/i) && day.getDay() == +v.replace('w', '')) // Day of week
                                )) {
                                obj.apply = true;
                                spec[day] = true; // Prevent applying generic rule on day, if specific exists
                            }
                        }
                    });

                    $.each(vobj, function (i, obj) {
                        if (obj.start && (obj.apply || (!obj.d && !spec[day]))) {

                            parts1 = obj.start.split(':');
                            parts2 = obj.end.split(':');

                            for (j = 0; j < 3; j++) {
                                if (parts1[j] === undefined) {
                                    parts1[j] = 0;
                                }
                                if (parts2[j] === undefined) {
                                    parts2[j] = 59;
                                }
                                parts1[j] = +parts1[j];
                                parts2[j] = +parts2[j];
                            }

                            parts1.unshift(parts1[0] > 11 ? 1 : 0);
                            parts2.unshift(parts2[0] > 11 ? 1 : 0);

                            if (hampm) {
                                if (parts1[1] >= 12) {
                                    parts1[1] = parts1[1] - 12;
                                }

                                if (parts2[1] >= 12) {
                                    parts2[1] = parts2[1] - 12;
                                }
                            }

                            prop1 = true;
                            prop2 = true;
                            $.each(w, function (i, v) {
                                if (o[v] !== undefined) {
                                    val = get(temp, v);
                                    add = 0;
                                    remove = 0;
                                    i1 = 0;
                                    i2 = undefined;
                                    target = $('.dw-ul', dw).eq(o[v]);

                                    // Look ahead if next wheels should be disabled completely
                                    for (j = i + 1; j < 4; j++) {
                                        if (parts1[j] > 0) {
                                            add = steps[v];
                                        }
                                        if (parts2[j] < maxs[w[j]]) {
                                            remove = steps[v];
                                        }
                                    }

                                    // Calculate min and max values
                                    v1 = step(parts1[i], steps[v], mins[v], maxs[v]) + add;
                                    v2 = step(parts2[i], steps[v], mins[v], maxs[v]) - remove;

                                    if (prop1) {
                                        i1 = getValidIndex(target, v1, maxs[v], 0);
                                    }

                                    if (prop2) {
                                        i2 = getValidIndex(target, v2, maxs[v], 1);
                                    }

                                    // Disable values
                                    if (prop1 || prop2) {
                                        if (valid) {
                                            $('.dw-li', target).slice(i1, i2).addClass('dw-v');
                                        } else {
                                            $('.dw-li', target).slice(i1, i2).removeClass('dw-v');
                                        }
                                    }

                                    // Get valid value
                                    val = inst.getValidCell(val, target, dir).val;

                                    prop1 = prop1 && val == step(parts1[i], steps[v], mins[v], maxs[v]);
                                    prop2 = prop2 && val == step(parts2[i], steps[v], mins[v], maxs[v]);
                                }
                            });
                        }
                    });
                }
            }

            function getIndex(t, v) {
                return $('.dw-li', t).index($('.dw-li[data-val="' + v + '"]', t));
            }

            function getValidIndex(t, v, max, add) {
                if (v < 0) {
                    return 0;
                }
                if (v > max) {
                    return $('.dw-li', t).length;
                }
                return getIndex(t, v) + add;
            }

            function getArray(d) {
                var i,
                    ret = [];

                for (i in o) {
                    ret[o[i]] = f[i](d);
                }

                return ret;
            }

            function convertRanges(arr) {
                var i, v, start,
                    ret = [];

                if (arr) {
                    for (i = 0; i < arr.length; i++) {
                        v = arr[i];
                        if (v.start && v.start.getTime) {
                            start = new Date(v.start);
                            while (start <= v.end) {
                                ret.push(new Date(start.getFullYear(), start.getMonth(), start.getDate()));
                                start.setDate(start.getDate() + 1);
                            }
                        } else {
                            ret.push(v);
                        }
                    }
                    return ret;
                }
                return arr;
            }

            // Extended methods
            // ---

            /**
             * Sets the selected date
             *
             * @param {Date} d Date to select.
             * @param {Boolean} [fill=false] Also set the value of the associated input element. Default is true.
             * @param {Number} [time=0] Animation time to scroll to the selected date.
             * @param {Boolean} [temp=false] Set temporary value only.
             * @param {Boolean} [change=fill] Trigger change on input element.
             */
            inst.setDate = function (d, fill, time, temp, change) {
                inst.temp = getArray(d);
                inst.setValue(inst.temp, fill, time, temp, change);
            };

            /**
             * Returns the currently selected date.
             *
             * @param {Boolean} [temp=false] If true, return the currently shown date on the picker, otherwise the last selected one.
             * @return {Date}
             */
            inst.getDate = function (temp) {
                return getDate(temp ? inst.temp : inst.values);
            };

            /**
             * @deprecated since 2.7.0, backward compatibility code
             */
            inst.convert = function (obj) {
                var x = obj;

                if (!$.isArray(obj)) { // Convert from old format
                    x = [];
                    $.each(obj, function (i, o) {
                        $.each(o, function (j, o) {
                            if (i === 'daysOfWeek') {
                                if (o.d) {
                                    o.d = 'w' + o.d;
                                } else {
                                    o = 'w' + o;
                                }
                            }
                            x.push(o);
                        });
                    });
                }

                return x;
            };

            // ---


            // Initializations
            // --- 

            inst.format = hformat;
            inst.buttons.now = { text: s.nowText, css: 'dwb-n', handler: function () { inst.setDate(new Date(), false, 0.3, true, true); } };

            // @deprecated since 2.8.0, backward compatibility code
            // ---
            if (s.showNow) {
                s.buttons.splice($.inArray('set', s.buttons) + 1, 0, 'now');
            }
            invalid = invalid ? inst.convert(invalid) : false;
            // ---

            invalid = convertRanges(invalid);
            valid = convertRanges(valid);

            // Normalize min and max dates for comparing later (set default values where there are no values from wheels)
            mind = getDate(getArray(mind));
            maxd = getDate(getArray(maxd));

            // ---

            return {
                wheels: wheels,
                headerText: s.headerText ? function () {
                    return ms.formatDate(hformat, getDate(inst.temp), s);
                } : false,
                formatResult: function (d) {
                    return ms.formatDate(format, getDate(d), s);
                },
                parseValue: function (val) {
                    return getArray(ms.parseDate(format, val, s));
                },
                validate: function (dw, i, time, dir) {
                    var validated = getClosestValidDate(getDate(inst.temp), dir),
                        temp = getArray(validated),//inst.temp,//.slice(0),
                        mins = { y: mind.getFullYear(), m: 0, d: 1, h: minH, i: minM, s: minS, a: 0 },
                        maxs = { y: maxd.getFullYear(), m: 11, d: 31, h: maxH, i: maxM, s: maxS, a: 1 },
                        y = get(temp, 'y'),
                        m = get(temp, 'm'),
                        minprop = true,
                        maxprop = true;

                    $.each(['y', 'm', 'd', 'a', 'h', 'i', 's'], function (x, i) {
                        if (o[i] !== undefined) {
                            var min = mins[i],
                                max = maxs[i],
                                maxdays = 31,
                                val = get(temp, i),
                                t = $('.dw-ul', dw).eq(o[i]);

                            if (i == 'd') {
                                maxdays = s.getMaxDayOfMonth(y, m);
                                max = maxdays;
                                if (regen) {
                                    $('.dw-li', t).each(function () {
                                        var that = $(this),
                                            d = that.data('val'),
                                            w = s.getDate(y, m, d).getDay(),
                                            str = dord.replace(/[my]/gi, '').replace(/dd/, (d < 10 ? '0' + d : d) + (s.daySuffix || '')).replace(/d/, d + (s.daySuffix || ''));
                                        $('.dw-i', that).html(str.match(/DD/) ? str.replace(/DD/, '<span class="dw-day">' + s.dayNames[w] + '</span>') : str.replace(/D/, '<span class="dw-day">' + s.dayNamesShort[w] + '</span>'));
                                    });
                                }
                            }
                            if (minprop && mind) {
                                min = f[i](mind);
                            }
                            if (maxprop && maxd) {
                                max = f[i](maxd);
                            }
                            if (i != 'y') {
                                var i1 = getIndex(t, min),
                                    i2 = getIndex(t, max);
                                $('.dw-li', t).removeClass('dw-v').slice(i1, i2 + 1).addClass('dw-v');
                                if (i == 'd') { // Hide days not in month
                                    $('.dw-li', t).removeClass('dw-h').slice(maxdays).addClass('dw-h');
                                }
                            }
                            if (val < min) {
                                val = min;
                            }
                            if (val > max) {
                                val = max;
                            }
                            if (minprop) {
                                minprop = val == min;
                            }
                            if (maxprop) {
                                maxprop = val == max;
                            }
                            // Disable some days
                            if (i == 'd') {
                                var first = s.getDate(y, m, 1).getDay(),
                                    idx = {};

                                // Set invalid indexes
                                validateDates(invalid, y, m, first, maxdays, idx, 1);
                                // Delete indexes which are valid 
                                validateDates(valid, y, m, first, maxdays, idx, 0);

                                $.each(idx, function (i, v) {
                                    if (v) {
                                        $('.dw-li', t).eq(i).removeClass('dw-v');
                                    }
                                });
                            }
                        }
                    });

                    // Invalid times
                    if (hasTime) {
                        validateTimes(invalid, temp, y, m, mins, maxs, dir, dw, 0);
                        validateTimes(valid, temp, y, m, mins, maxs, dir, dw, 1);
                    }

                    inst.temp = temp;
                }
            };
        };

    $.each(['date', 'time', 'datetime'], function (i, v) {
        ms.presets[v] = preset;
        ms.presetShort(v);
    });

    // Utility functions
    ms.datetime = {};

    /**
    * Format a date into a string value with a specified format.
    * @param {String} format Output format.
    * @param {Date} date Date to format.
    * @param {Object} [settings={}] Settings.
    * @return {String} Returns the formatted date string.
    */
    ms.formatDate = ms.datetime.formatDate = function (format, date, settings) {
        if (!date) {
            return null;
        }
        var s = $.extend({}, defaults, settings),
            look = function (m) { // Check whether a format character is doubled
                var n = 0;
                while (i + 1 < format.length && format.charAt(i + 1) == m) {
                    n++;
                    i++;
                }
                return n;
            },
            f1 = function (m, val, len) { // Format a number, with leading zero if necessary
                var n = '' + val;
                if (look(m)) {
                    while (n.length < len) {
                        n = '0' + n;
                    }
                }
                return n;
            },
            f2 = function (m, val, s, l) { // Format a name, short or long as requested
                return (look(m) ? l[val] : s[val]);
            },
            i,
            year,
            output = '',
            literal = false;

        for (i = 0; i < format.length; i++) {
            if (literal) {
                if (format.charAt(i) == "'" && !look("'")) {
                    literal = false;
                } else {
                    output += format.charAt(i);
                }
            } else {
                switch (format.charAt(i)) {
                case 'd':
                    output += f1('d', s.getDay(date), 2);
                    break;
                case 'D':
                    output += f2('D', date.getDay(), s.dayNamesShort, s.dayNames);
                    break;
                case 'o':
                    output += f1('o', (date.getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000, 3);
                    break;
                case 'm':
                    output += f1('m', s.getMonth(date) + 1, 2);
                    break;
                case 'M':
                    output += f2('M', s.getMonth(date), s.monthNamesShort, s.monthNames);
                    break;
                case 'y':
                    year = s.getYear(date);
                    output += (look('y') ? year : (year % 100 < 10 ? '0' : '') + year % 100);
                    //output += (look('y') ? date.getFullYear() : (date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100);
                    break;
                case 'h':
                    var h = date.getHours();
                    output += f1('h', (h > 12 ? (h - 12) : (h === 0 ? 12 : h)), 2);
                    break;
                case 'H':
                    output += f1('H', date.getHours(), 2);
                    break;
                case 'i':
                    output += f1('i', date.getMinutes(), 2);
                    break;
                case 's':
                    output += f1('s', date.getSeconds(), 2);
                    break;
                case 'a':
                    output += date.getHours() > 11 ? s.pmText : s.amText;
                    break;
                case 'A':
                    output += date.getHours() > 11 ? s.pmText.toUpperCase() : s.amText.toUpperCase();
                    break;
                case "'":
                    if (look("'")) {
                        output += "'";
                    } else {
                        literal = true;
                    }
                    break;
                default:
                    output += format.charAt(i);
                }
            }
        }
        return output;
    };

    /**
    * Extract a date from a string value with a specified format.
    * @param {String} format Input format.
    * @param {String} value String to parse.
    * @param {Object} [settings={}] Settings.
    * @return {Date} Returns the extracted date.
    */
    ms.parseDate = ms.datetime.parseDate = function (format, value, settings) {
        var s = $.extend({}, defaults, settings),
            def = s.defaultValue || new Date();

        if (!format || !value) {
            return def;
        }

        value = (typeof value == 'object' ? value.toString() : value + '');

        var shortYearCutoff = s.shortYearCutoff,
            year = s.getYear(def),
            month = s.getMonth(def) + 1,
            day = s.getDay(def),
            doy = -1,
            hours = def.getHours(),
            minutes = def.getMinutes(),
            seconds = 0, //def.getSeconds(),
            ampm = -1,
            literal = false, // Check whether a format character is doubled
            lookAhead = function (match) {
                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                if (matches) {
                    iFormat++;
                }
                return matches;
            },
            getNumber = function (match) { // Extract a number from the string value
                lookAhead(match);
                var size = (match == '@' ? 14 : (match == '!' ? 20 : (match == 'y' ? 4 : (match == 'o' ? 3 : 2)))),
                    digits = new RegExp('^\\d{1,' + size + '}'),
                    num = value.substr(iValue).match(digits);

                if (!num) {
                    return 0;
                }
                iValue += num[0].length;
                return parseInt(num[0], 10);
            },
            getName = function (match, s, l) { // Extract a name from the string value and convert to an index
                var names = (lookAhead(match) ? l : s),
                    i;

                for (i = 0; i < names.length; i++) {
                    if (value.substr(iValue, names[i].length).toLowerCase() == names[i].toLowerCase()) {
                        iValue += names[i].length;
                        return i + 1;
                    }
                }
                return 0;
            },
            checkLiteral = function () {
                iValue++;
            },
            iValue = 0,
            iFormat;

        for (iFormat = 0; iFormat < format.length; iFormat++) {
            if (literal) {
                if (format.charAt(iFormat) == "'" && !lookAhead("'")) {
                    literal = false;
                } else {
                    checkLiteral();
                }
            } else {
                switch (format.charAt(iFormat)) {
                case 'd':
                    day = getNumber('d');
                    break;
                case 'D':
                    getName('D', s.dayNamesShort, s.dayNames);
                    break;
                case 'o':
                    doy = getNumber('o');
                    break;
                case 'm':
                    month = getNumber('m');
                    break;
                case 'M':
                    month = getName('M', s.monthNamesShort, s.monthNames);
                    break;
                case 'y':
                    year = getNumber('y');
                    break;
                case 'H':
                    hours = getNumber('H');
                    break;
                case 'h':
                    hours = getNumber('h');
                    break;
                case 'i':
                    minutes = getNumber('i');
                    break;
                case 's':
                    seconds = getNumber('s');
                    break;
                case 'a':
                    ampm = getName('a', [s.amText, s.pmText], [s.amText, s.pmText]) - 1;
                    break;
                case 'A':
                    ampm = getName('A', [s.amText, s.pmText], [s.amText, s.pmText]) - 1;
                    break;
                case "'":
                    if (lookAhead("'")) {
                        checkLiteral();
                    } else {
                        literal = true;
                    }
                    break;
                default:
                    checkLiteral();
                }
            }
        }
        if (year < 100) {
            year += new Date().getFullYear() - new Date().getFullYear() % 100 +
                (year <= (typeof shortYearCutoff != 'string' ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10)) ? 0 : -100);
        }
        if (doy > -1) {
            month = 1;
            day = doy;
            do {
                var dim = 32 - new Date(year, month - 1, 32).getDate();
                if (day <= dim) {
                    break;
                }
                month++;
                day -= dim;
            } while (true);
        }
        hours = (ampm == -1) ? hours : ((ampm && hours < 12) ? (hours + 12) : (!ampm && hours == 12 ? 0 : hours));

        var date = s.getDate(year, month - 1, day, hours, minutes, seconds);

        if (s.getYear(date) != year || s.getMonth(date) + 1 != month || s.getDay(date) != day) {
            return def; // Invalid date
        }

        return date;
    };

})(jQuery);
;(function ($) {
    $.mobiscroll.i18n.sv = $.extend($.mobiscroll.i18n.sv, {
        // Core
        setText: 'OK',
        cancelText: 'Avbryt',
        clearText: 'Klara',
        selectedText: 'Vald',
        // Datetime component
        dateFormat: 'yy-mm-dd',
        dateOrder: 'yymmdd',
        dayNames: ['Söndag', 'Måndag', 'Tisdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lördag'],
        dayNamesShort: ['Sö', 'Må', 'Ti', 'On', 'To', 'Fr', 'Lö'],
        dayText: 'Dag',
        hourText: 'Timme',
        minuteText: 'Minut',
        monthNames: ['Januari', 'Februari', 'Mars', 'April', 'Maj', 'Juni', 'Juli', 'Augusti', 'September', 'Oktober', 'November', 'December'],
        monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'],
        monthText: 'Månad',
        secText: 'Sekund',
        timeFormat: 'HH:ii',
        timeWheels: 'HHii',
        yearText: 'År',
        nowText: 'Nu',
        pmText: 'pm',
        amText: 'am',
        // Calendar component
        dateText: 'Datum',
        timeText: 'Tid',
        calendarText: 'Kalender',
        closeText: 'Stäng',
        // Daterange component
        fromText: 'Start',
        toText: 'Slut',
        // Measurement components
        wholeText: 'Hela',
        fractionText: 'Bråk',
        unitText: 'Enhet',
        // Time / Timespan component
        labels: ['År', 'Månader', 'Dagar', 'Timmar', 'Minuter', 'Sekunder', ''],
        labelsShort: ['År', 'Mån', 'Dag', 'Tim', 'Min', 'Sek', ''],
        // Timer component
        startText: 'Start',
        stopText: 'Stopp',
        resetText: 'Återställ',
        lapText: 'Varv',
        hideText: 'Dölj'
    });
})(jQuery);;(function ($) {

    $.mobiscroll.themes.android = {
        dateOrder: 'Mddyy',
        mode: 'clickpick',
        height: 50,
        showLabel: false,
        btnStartClass: 'mbsc-ic mbsc-ic-play3',
        btnStopClass: 'mbsc-ic mbsc-ic-pause2',
        btnResetClass: 'mbsc-ic mbsc-ic-stop2',
        btnLapClass: 'mbsc-ic mbsc-ic-loop2'
    };

})(jQuery);

;(function ($) {

    $.mobiscroll.themes.ios = {
        dateOrder: 'MMdyy',
        rows: 5,
        height: 30,
        minWidth: 60,
        headerText: false,
        showLabel: false,
        btnWidth: false,
        selectedLineHeight: true,
        selectedLineBorder: 2,
        useShortLabels: true
    };

})(jQuery);
;(function ($) {

    $.mobiscroll.themes.ios7 = {
        dateOrder: 'MMdyy',
        rows: 5,
        height: 34,
        minWidth: 55,
        headerText: false,
        showLabel: false,
        btnWidth: false,
        selectedLineHeight: true,
        selectedLineBorder: 1,
        useShortLabels: true,
        btnCalPrevClass: 'mbsc-ic mbsc-ic-arrow-left5',
        btnCalNextClass: 'mbsc-ic mbsc-ic-arrow-right5',
        btnPlusClass: 'mbsc-ic mbsc-ic-arrow-down5',
        btnMinusClass: 'mbsc-ic mbsc-ic-arrow-up5'
    };

})(jQuery);
;/*
(function ($) {
    $.getScriptSync = function (url) {
    	$.ajax({
    		async:false,
    		url:url,
    		dataType: "script"
    	});
    };
}(jQuery));

*/
(function ($) {
    $.getScriptSync = function (url) {
    	$.ajax({
    		async:false,
    		url:url,
    		//dataType: "script",
    		success: function (res){
    			$.globalEval(res);
    		}
    	});
    };
}(jQuery));

(function($){
    $.loadCss=function(url){
        var link = $("<link>");
                    link.attr({
                            type: 'text/css',
                            rel: 'stylesheet',
                            href: url
                    });
        $("head").append( link );
    };
}(jQuery));


;/*!
 * iScroll v4.2.5 ~ Copyright (c) 2012 Matteo Spinelli, http://cubiq.org
 * Released under MIT license, http://cubiq.org/license
 */
(function(window, doc){
var m = Math,
	dummyStyle = doc.createElement('div').style,
	vendor = (function () {
		var vendors = 't,webkitT,MozT,msT,OT'.split(','),
			t,
			i = 0,
			l = vendors.length;

		for ( ; i < l; i++ ) {
			t = vendors[i] + 'ransform';
			if ( t in dummyStyle ) {
				return vendors[i].substr(0, vendors[i].length - 1);
			}
		}

		return false;
	})(),
	cssVendor = vendor ? '-' + vendor.toLowerCase() + '-' : '',

	// Style properties
	transform = prefixStyle('transform'),
	transitionProperty = prefixStyle('transitionProperty'),
	transitionDuration = prefixStyle('transitionDuration'),
	transformOrigin = prefixStyle('transformOrigin'),
	transitionTimingFunction = prefixStyle('transitionTimingFunction'),
	transitionDelay = prefixStyle('transitionDelay'),

    // Browser capabilities
	isAndroid = (/android/gi).test(navigator.appVersion),
	isIDevice = (/iphone|ipad/gi).test(navigator.appVersion),
	isTouchPad = (/hp-tablet/gi).test(navigator.appVersion),

    has3d = prefixStyle('perspective') in dummyStyle,
    hasTouch = 'ontouchstart' in window && !isTouchPad,
    hasTransform = vendor !== false,
    hasTransitionEnd = prefixStyle('transition') in dummyStyle,

	RESIZE_EV = 'onorientationchange' in window ? 'orientationchange' : 'resize',
	START_EV = hasTouch ? 'touchstart' : 'mousedown',
	MOVE_EV = hasTouch ? 'touchmove' : 'mousemove',
	END_EV = hasTouch ? 'touchend' : 'mouseup',
	CANCEL_EV = hasTouch ? 'touchcancel' : 'mouseup',
	TRNEND_EV = (function () {
		if ( vendor === false ) return false;

		var transitionEnd = {
				''			: 'transitionend',
				'webkit'	: 'webkitTransitionEnd',
				'Moz'		: 'transitionend',
				'O'			: 'otransitionend',
				'ms'		: 'MSTransitionEnd'
			};

		return transitionEnd[vendor];
	})(),

	nextFrame = (function() {
		return window.requestAnimationFrame ||
			window.webkitRequestAnimationFrame ||
			window.mozRequestAnimationFrame ||
			window.oRequestAnimationFrame ||
			window.msRequestAnimationFrame ||
			function(callback) { return setTimeout(callback, 1); };
	})(),
	cancelFrame = (function () {
		return window.cancelRequestAnimationFrame ||
			window.webkitCancelAnimationFrame ||
			window.webkitCancelRequestAnimationFrame ||
			window.mozCancelRequestAnimationFrame ||
			window.oCancelRequestAnimationFrame ||
			window.msCancelRequestAnimationFrame ||
			clearTimeout;
	})(),

	// Helpers
	translateZ = has3d ? ' translateZ(0)' : '',

	// Constructor
	iScroll = function (el, options) {
		var that = this,
			i;

		that.wrapper = typeof el == 'object' ? el : doc.getElementById(el);
		that.wrapper.style.overflow = 'hidden';
		that.scroller = that.wrapper.children[0];

		// Default options
		that.options = {
			hScroll: true,
			vScroll: true,
			x: 0,
			y: 0,
			bounce: true,
			bounceLock: false,
			momentum: true,
			lockDirection: true,
			useTransform: true,
			useTransition: false,
			topOffset: 0,
			checkDOMChanges: false,		// Experimental
			handleClick: true,

			// Scrollbar
			hScrollbar: true,
			vScrollbar: true,
			fixedScrollbar: isAndroid,
			hideScrollbar: isIDevice,
			fadeScrollbar: isIDevice && has3d,
			scrollbarClass: '',

			// Zoom
			zoom: false,
			zoomMin: 1,
			zoomMax: 4,
			doubleTapZoom: 2,
			wheelAction: 'scroll',

			// Snap
			snap: false,
			snapThreshold: 1,

			// Events
			onRefresh: null,
			onBeforeScrollStart: function (e) { e.preventDefault(); },
			onScrollStart: null,
			onBeforeScrollMove: null,
			onScrollMove: null,
			onBeforeScrollEnd: null,
			onScrollEnd: null,
			onTouchEnd: null,
			onDestroy: null,
			onZoomStart: null,
			onZoom: null,
			onZoomEnd: null
		};

		// User defined options
		for (i in options) that.options[i] = options[i];
		
		// Set starting position
		that.x = that.options.x;
		that.y = that.options.y;

		// Normalize options
		that.options.useTransform = hasTransform && that.options.useTransform;
		that.options.hScrollbar = that.options.hScroll && that.options.hScrollbar;
		that.options.vScrollbar = that.options.vScroll && that.options.vScrollbar;
		that.options.zoom = that.options.useTransform && that.options.zoom;
		that.options.useTransition = hasTransitionEnd && that.options.useTransition;

		// Helpers FIX ANDROID BUG!
		// translate3d and scale doesn't work together!
		// Ignoring 3d ONLY WHEN YOU SET that.options.zoom
		if ( that.options.zoom && isAndroid ){
			translateZ = '';
		}
		
		// Set some default styles
		that.scroller.style[transitionProperty] = that.options.useTransform ? cssVendor + 'transform' : 'top left';
		that.scroller.style[transitionDuration] = '0';
		that.scroller.style[transformOrigin] = '0 0';
		if (that.options.useTransition) that.scroller.style[transitionTimingFunction] = 'cubic-bezier(0.33,0.66,0.66,1)';
		
		if (that.options.useTransform) that.scroller.style[transform] = 'translate(' + that.x + 'px,' + that.y + 'px)' + translateZ;
		else that.scroller.style.cssText += ';position:absolute;top:' + that.y + 'px;left:' + that.x + 'px';

		if (that.options.useTransition) that.options.fixedScrollbar = true;

		that.refresh();

		that._bind(RESIZE_EV, window);
		that._bind(START_EV);
		if (!hasTouch) {
			if (that.options.wheelAction != 'none') {
				that._bind('DOMMouseScroll');
				that._bind('mousewheel');
			}
		}

		if (that.options.checkDOMChanges) that.checkDOMTime = setInterval(function () {
			that._checkDOMChanges();
		}, 500);
	};

// Prototype
iScroll.prototype = {
	enabled: true,
	x: 0,
	y: 0,
	steps: [],
	scale: 1,
	currPageX: 0, currPageY: 0,
	pagesX: [], pagesY: [],
	aniTime: null,
	wheelZoomCount: 0,
	
	handleEvent: function (e) {
		var that = this;
		switch(e.type) {
			case START_EV:
				if (!hasTouch && e.button !== 0) return;
				that._start(e);
				break;
			case MOVE_EV: that._move(e); break;
			case END_EV:
			case CANCEL_EV: that._end(e); break;
			case RESIZE_EV: that._resize(); break;
			case 'DOMMouseScroll': case 'mousewheel': that._wheel(e); break;
			case TRNEND_EV: that._transitionEnd(e); break;
		}
	},
	
	_checkDOMChanges: function () {
		if (this.moved || this.zoomed || this.animating ||
			(this.scrollerW == this.scroller.offsetWidth * this.scale && this.scrollerH == this.scroller.offsetHeight * this.scale)) return;

		this.refresh();
	},
	
	_scrollbar: function (dir) {
		var that = this,
			bar;

		if (!that[dir + 'Scrollbar']) {
			if (that[dir + 'ScrollbarWrapper']) {
				if (hasTransform) that[dir + 'ScrollbarIndicator'].style[transform] = '';
				that[dir + 'ScrollbarWrapper'].parentNode.removeChild(that[dir + 'ScrollbarWrapper']);
				that[dir + 'ScrollbarWrapper'] = null;
				that[dir + 'ScrollbarIndicator'] = null;
			}

			return;
		}

		if (!that[dir + 'ScrollbarWrapper']) {
			// Create the scrollbar wrapper
			bar = doc.createElement('div');

			if (that.options.scrollbarClass) bar.className = that.options.scrollbarClass + dir.toUpperCase();
			else bar.style.cssText = 'position:absolute;z-index:100;' + (dir == 'h' ? 'height:7px;bottom:1px;left:2px;right:' + (that.vScrollbar ? '7' : '2') + 'px' : 'width:7px;bottom:' + (that.hScrollbar ? '7' : '2') + 'px;top:2px;right:1px');

			bar.style.cssText += ';pointer-events:none;' + cssVendor + 'transition-property:opacity;' + cssVendor + 'transition-duration:' + (that.options.fadeScrollbar ? '350ms' : '0') + ';overflow:hidden;opacity:' + (that.options.hideScrollbar ? '0' : '1');

			that.wrapper.appendChild(bar);
			that[dir + 'ScrollbarWrapper'] = bar;

			// Create the scrollbar indicator
			bar = doc.createElement('div');
			if (!that.options.scrollbarClass) {
				bar.style.cssText = 'position:absolute;z-index:100;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);' + cssVendor + 'background-clip:padding-box;' + cssVendor + 'box-sizing:border-box;' + (dir == 'h' ? 'height:100%' : 'width:100%') + ';' + cssVendor + 'border-radius:3px;border-radius:3px';
			}
			bar.style.cssText += ';pointer-events:none;' + cssVendor + 'transition-property:' + cssVendor + 'transform;' + cssVendor + 'transition-timing-function:cubic-bezier(0.33,0.66,0.66,1);' + cssVendor + 'transition-duration:0;' + cssVendor + 'transform: translate(0,0)' + translateZ;
			if (that.options.useTransition) bar.style.cssText += ';' + cssVendor + 'transition-timing-function:cubic-bezier(0.33,0.66,0.66,1)';

			that[dir + 'ScrollbarWrapper'].appendChild(bar);
			that[dir + 'ScrollbarIndicator'] = bar;
		}

		if (dir == 'h') {
			that.hScrollbarSize = that.hScrollbarWrapper.clientWidth;
			that.hScrollbarIndicatorSize = m.max(m.round(that.hScrollbarSize * that.hScrollbarSize / that.scrollerW), 8);
			that.hScrollbarIndicator.style.width = that.hScrollbarIndicatorSize + 'px';
			that.hScrollbarMaxScroll = that.hScrollbarSize - that.hScrollbarIndicatorSize;
			that.hScrollbarProp = that.hScrollbarMaxScroll / that.maxScrollX;
		} else {
			that.vScrollbarSize = that.vScrollbarWrapper.clientHeight;
			that.vScrollbarIndicatorSize = m.max(m.round(that.vScrollbarSize * that.vScrollbarSize / that.scrollerH), 8);
			that.vScrollbarIndicator.style.height = that.vScrollbarIndicatorSize + 'px';
			that.vScrollbarMaxScroll = that.vScrollbarSize - that.vScrollbarIndicatorSize;
			that.vScrollbarProp = that.vScrollbarMaxScroll / that.maxScrollY;
		}

		// Reset position
		that._scrollbarPos(dir, true);
	},
	
	_resize: function () {
		var that = this;
		setTimeout(function () { that.refresh(); }, isAndroid ? 200 : 0);
	},
	
	_pos: function (x, y) {
		if (this.zoomed) return;

		x = this.hScroll ? x : 0;
		y = this.vScroll ? y : 0;

		if (this.options.useTransform) {
			this.scroller.style[transform] = 'translate(' + x + 'px,' + y + 'px) scale(' + this.scale + ')' + translateZ;
		} else {
			x = m.round(x);
			y = m.round(y);
			this.scroller.style.left = x + 'px';
			this.scroller.style.top = y + 'px';
		}

		this.x = x;
		this.y = y;

		this._scrollbarPos('h');
		this._scrollbarPos('v');
	},

	_scrollbarPos: function (dir, hidden) {
		var that = this,
			pos = dir == 'h' ? that.x : that.y,
			size;

		if (!that[dir + 'Scrollbar']) return;

		pos = that[dir + 'ScrollbarProp'] * pos;

		if (pos < 0) {
			if (!that.options.fixedScrollbar) {
				size = that[dir + 'ScrollbarIndicatorSize'] + m.round(pos * 3);
				if (size < 8) size = 8;
				that[dir + 'ScrollbarIndicator'].style[dir == 'h' ? 'width' : 'height'] = size + 'px';
			}
			pos = 0;
		} else if (pos > that[dir + 'ScrollbarMaxScroll']) {
			if (!that.options.fixedScrollbar) {
				size = that[dir + 'ScrollbarIndicatorSize'] - m.round((pos - that[dir + 'ScrollbarMaxScroll']) * 3);
				if (size < 8) size = 8;
				that[dir + 'ScrollbarIndicator'].style[dir == 'h' ? 'width' : 'height'] = size + 'px';
				pos = that[dir + 'ScrollbarMaxScroll'] + (that[dir + 'ScrollbarIndicatorSize'] - size);
			} else {
				pos = that[dir + 'ScrollbarMaxScroll'];
			}
		}

		that[dir + 'ScrollbarWrapper'].style[transitionDelay] = '0';
		that[dir + 'ScrollbarWrapper'].style.opacity = hidden && that.options.hideScrollbar ? '0' : '1';
		that[dir + 'ScrollbarIndicator'].style[transform] = 'translate(' + (dir == 'h' ? pos + 'px,0)' : '0,' + pos + 'px)') + translateZ;
	},
	
	_start: function (e) {
		var that = this,
			point = hasTouch ? e.touches[0] : e,
			matrix, x, y,
			c1, c2;

		if (!that.enabled) return;

		if (that.options.onBeforeScrollStart) that.options.onBeforeScrollStart.call(that, e);

		if (that.options.useTransition || that.options.zoom) that._transitionTime(0);

		that.moved = false;
		that.animating = false;
		that.zoomed = false;
		that.distX = 0;
		that.distY = 0;
		that.absDistX = 0;
		that.absDistY = 0;
		that.dirX = 0;
		that.dirY = 0;

		// Gesture start
		if (that.options.zoom && hasTouch && e.touches.length > 1) {
			c1 = m.abs(e.touches[0].pageX-e.touches[1].pageX);
			c2 = m.abs(e.touches[0].pageY-e.touches[1].pageY);
			that.touchesDistStart = m.sqrt(c1 * c1 + c2 * c2);

			that.originX = m.abs(e.touches[0].pageX + e.touches[1].pageX - that.wrapperOffsetLeft * 2) / 2 - that.x;
			that.originY = m.abs(e.touches[0].pageY + e.touches[1].pageY - that.wrapperOffsetTop * 2) / 2 - that.y;

			if (that.options.onZoomStart) that.options.onZoomStart.call(that, e);
		}

		if (that.options.momentum) {
			if (that.options.useTransform) {
				// Very lame general purpose alternative to CSSMatrix
				matrix = getComputedStyle(that.scroller, null)[transform].replace(/[^0-9\-.,]/g, '').split(',');
				x = +(matrix[12] || matrix[4]);
				y = +(matrix[13] || matrix[5]);
			} else {
				x = +getComputedStyle(that.scroller, null).left.replace(/[^0-9-]/g, '');
				y = +getComputedStyle(that.scroller, null).top.replace(/[^0-9-]/g, '');
			}
			
			if (x != that.x || y != that.y) {
				if (that.options.useTransition) that._unbind(TRNEND_EV);
				else cancelFrame(that.aniTime);
				that.steps = [];
				that._pos(x, y);
				if (that.options.onScrollEnd) that.options.onScrollEnd.call(that);
			}
		}

		that.absStartX = that.x;	// Needed by snap threshold
		that.absStartY = that.y;

		that.startX = that.x;
		that.startY = that.y;
		that.pointX = point.pageX;
		that.pointY = point.pageY;

		that.startTime = e.timeStamp || Date.now();

		if (that.options.onScrollStart) that.options.onScrollStart.call(that, e);

		that._bind(MOVE_EV, window);
		that._bind(END_EV, window);
		that._bind(CANCEL_EV, window);
	},
	
	_move: function (e) {
		var that = this,
			point = hasTouch ? e.touches[0] : e,
			deltaX = point.pageX - that.pointX,
			deltaY = point.pageY - that.pointY,
			newX = that.x + deltaX,
			newY = that.y + deltaY,
			c1, c2, scale,
			timestamp = e.timeStamp || Date.now();

		if (that.options.onBeforeScrollMove) that.options.onBeforeScrollMove.call(that, e);

		// Zoom
		if (that.options.zoom && hasTouch && e.touches.length > 1) {
			c1 = m.abs(e.touches[0].pageX - e.touches[1].pageX);
			c2 = m.abs(e.touches[0].pageY - e.touches[1].pageY);
			that.touchesDist = m.sqrt(c1*c1+c2*c2);

			that.zoomed = true;

			scale = 1 / that.touchesDistStart * that.touchesDist * this.scale;

			if (scale < that.options.zoomMin) scale = 0.5 * that.options.zoomMin * Math.pow(2.0, scale / that.options.zoomMin);
			else if (scale > that.options.zoomMax) scale = 2.0 * that.options.zoomMax * Math.pow(0.5, that.options.zoomMax / scale);

			that.lastScale = scale / this.scale;

			newX = this.originX - this.originX * that.lastScale + this.x;
			newY = this.originY - this.originY * that.lastScale + this.y;

			this.scroller.style[transform] = 'translate(' + newX + 'px,' + newY + 'px) scale(' + scale + ')' + translateZ;

			if (that.options.onZoom) that.options.onZoom.call(that, e);
			return;
		}

		that.pointX = point.pageX;
		that.pointY = point.pageY;

		// Slow down if outside of the boundaries
		if (newX > 0 || newX < that.maxScrollX) {
			newX = that.options.bounce ? that.x + (deltaX / 2) : newX >= 0 || that.maxScrollX >= 0 ? 0 : that.maxScrollX;
		}
		if (newY > that.minScrollY || newY < that.maxScrollY) {
			newY = that.options.bounce ? that.y + (deltaY / 2) : newY >= that.minScrollY || that.maxScrollY >= 0 ? that.minScrollY : that.maxScrollY;
		}

		that.distX += deltaX;
		that.distY += deltaY;
		that.absDistX = m.abs(that.distX);
		that.absDistY = m.abs(that.distY);

		if (that.absDistX < 6 && that.absDistY < 6) {
			return;
		}

		// Lock direction
		if (that.options.lockDirection) {
			if (that.absDistX > that.absDistY + 5) {
				newY = that.y;
				deltaY = 0;
			} else if (that.absDistY > that.absDistX + 5) {
				newX = that.x;
				deltaX = 0;
			}
		}

		that.moved = true;
		that._pos(newX, newY);
		that.dirX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;
		that.dirY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;

		if (timestamp - that.startTime > 300) {
			that.startTime = timestamp;
			that.startX = that.x;
			that.startY = that.y;
		}
		
		if (that.options.onScrollMove) that.options.onScrollMove.call(that, e);
	},
	
	_end: function (e) {
		if (hasTouch && e.touches.length !== 0) return;

		var that = this,
			point = hasTouch ? e.changedTouches[0] : e,
			target, ev,
			momentumX = { dist:0, time:0 },
			momentumY = { dist:0, time:0 },
			duration = (e.timeStamp || Date.now()) - that.startTime,
			newPosX = that.x,
			newPosY = that.y,
			distX, distY,
			newDuration,
			snap,
			scale;

		that._unbind(MOVE_EV, window);
		that._unbind(END_EV, window);
		that._unbind(CANCEL_EV, window);

		if (that.options.onBeforeScrollEnd) that.options.onBeforeScrollEnd.call(that, e);

		if (that.zoomed) {
			scale = that.scale * that.lastScale;
			scale = Math.max(that.options.zoomMin, scale);
			scale = Math.min(that.options.zoomMax, scale);
			that.lastScale = scale / that.scale;
			that.scale = scale;

			that.x = that.originX - that.originX * that.lastScale + that.x;
			that.y = that.originY - that.originY * that.lastScale + that.y;
			
			that.scroller.style[transitionDuration] = '200ms';
			that.scroller.style[transform] = 'translate(' + that.x + 'px,' + that.y + 'px) scale(' + that.scale + ')' + translateZ;
			
			that.zoomed = false;
			that.refresh();

			if (that.options.onZoomEnd) that.options.onZoomEnd.call(that, e);
			return;
		}

		if (!that.moved) {
			if (hasTouch) {
				if (that.doubleTapTimer && that.options.zoom) {
					// Double tapped
					clearTimeout(that.doubleTapTimer);
					that.doubleTapTimer = null;
					if (that.options.onZoomStart) that.options.onZoomStart.call(that, e);
					that.zoom(that.pointX, that.pointY, that.scale == 1 ? that.options.doubleTapZoom : 1);
					if (that.options.onZoomEnd) {
						setTimeout(function() {
							that.options.onZoomEnd.call(that, e);
						}, 200); // 200 is default zoom duration
					}
				} else if (this.options.handleClick) {
					that.doubleTapTimer = setTimeout(function () {
						that.doubleTapTimer = null;

						// Find the last touched element
						target = point.target;
						while (target.nodeType != 1) target = target.parentNode;

						if (target.tagName != 'SELECT' && target.tagName != 'INPUT' && target.tagName != 'TEXTAREA') {
							ev = doc.createEvent('MouseEvents');
							ev.initMouseEvent('click', true, true, e.view, 1,
								point.screenX, point.screenY, point.clientX, point.clientY,
								e.ctrlKey, e.altKey, e.shiftKey, e.metaKey,
								0, null);
							ev._fake = true;
							target.dispatchEvent(ev);
						}
					}, that.options.zoom ? 250 : 0);
				}
			}

			that._resetPos(400);

			if (that.options.onTouchEnd) that.options.onTouchEnd.call(that, e);
			return;
		}

		if (duration < 300 && that.options.momentum) {
			momentumX = newPosX ? that._momentum(newPosX - that.startX, duration, -that.x, that.scrollerW - that.wrapperW + that.x, that.options.bounce ? that.wrapperW : 0) : momentumX;
			momentumY = newPosY ? that._momentum(newPosY - that.startY, duration, -that.y, (that.maxScrollY < 0 ? that.scrollerH - that.wrapperH + that.y - that.minScrollY : 0), that.options.bounce ? that.wrapperH : 0) : momentumY;

			newPosX = that.x + momentumX.dist;
			newPosY = that.y + momentumY.dist;

			if ((that.x > 0 && newPosX > 0) || (that.x < that.maxScrollX && newPosX < that.maxScrollX)) momentumX = { dist:0, time:0 };
			if ((that.y > that.minScrollY && newPosY > that.minScrollY) || (that.y < that.maxScrollY && newPosY < that.maxScrollY)) momentumY = { dist:0, time:0 };
		}

		if (momentumX.dist || momentumY.dist) {
			newDuration = m.max(m.max(momentumX.time, momentumY.time), 10);

			// Do we need to snap?
			if (that.options.snap) {
				distX = newPosX - that.absStartX;
				distY = newPosY - that.absStartY;
				if (m.abs(distX) < that.options.snapThreshold && m.abs(distY) < that.options.snapThreshold) { that.scrollTo(that.absStartX, that.absStartY, 200); }
				else {
					snap = that._snap(newPosX, newPosY);
					newPosX = snap.x;
					newPosY = snap.y;
					newDuration = m.max(snap.time, newDuration);
				}
			}

			that.scrollTo(m.round(newPosX), m.round(newPosY), newDuration);

			if (that.options.onTouchEnd) that.options.onTouchEnd.call(that, e);
			return;
		}

		// Do we need to snap?
		if (that.options.snap) {
			distX = newPosX - that.absStartX;
			distY = newPosY - that.absStartY;
			if (m.abs(distX) < that.options.snapThreshold && m.abs(distY) < that.options.snapThreshold) that.scrollTo(that.absStartX, that.absStartY, 200);
			else {
				snap = that._snap(that.x, that.y);
				if (snap.x != that.x || snap.y != that.y) that.scrollTo(snap.x, snap.y, snap.time);
			}

			if (that.options.onTouchEnd) that.options.onTouchEnd.call(that, e);
			return;
		}

		that._resetPos(200);
		if (that.options.onTouchEnd) that.options.onTouchEnd.call(that, e);
	},
	
	_resetPos: function (time) {
		var that = this,
			resetX = that.x >= 0 ? 0 : that.x < that.maxScrollX ? that.maxScrollX : that.x,
			resetY = that.y >= that.minScrollY || that.maxScrollY > 0 ? that.minScrollY : that.y < that.maxScrollY ? that.maxScrollY : that.y;

		if (resetX == that.x && resetY == that.y) {
			if (that.moved) {
				that.moved = false;
				if (that.options.onScrollEnd) that.options.onScrollEnd.call(that);		// Execute custom code on scroll end
			}

			if (that.hScrollbar && that.options.hideScrollbar) {
				if (vendor == 'webkit') that.hScrollbarWrapper.style[transitionDelay] = '300ms';
				that.hScrollbarWrapper.style.opacity = '0';
			}
			if (that.vScrollbar && that.options.hideScrollbar) {
				if (vendor == 'webkit') that.vScrollbarWrapper.style[transitionDelay] = '300ms';
				that.vScrollbarWrapper.style.opacity = '0';
			}

			return;
		}

		that.scrollTo(resetX, resetY, time || 0);
	},

	_wheel: function (e) {
		var that = this,
			wheelDeltaX, wheelDeltaY,
			deltaX, deltaY,
			deltaScale;

		if ('wheelDeltaX' in e) {
			wheelDeltaX = e.wheelDeltaX / 12;
			wheelDeltaY = e.wheelDeltaY / 12;
		} else if('wheelDelta' in e) {
			wheelDeltaX = wheelDeltaY = e.wheelDelta / 12;
		} else if ('detail' in e) {
			wheelDeltaX = wheelDeltaY = -e.detail * 3;
		} else {
			return;
		}
		
		if (that.options.wheelAction == 'zoom') {
			deltaScale = that.scale * Math.pow(2, 1/3 * (wheelDeltaY ? wheelDeltaY / Math.abs(wheelDeltaY) : 0));
			if (deltaScale < that.options.zoomMin) deltaScale = that.options.zoomMin;
			if (deltaScale > that.options.zoomMax) deltaScale = that.options.zoomMax;
			
			if (deltaScale != that.scale) {
				if (!that.wheelZoomCount && that.options.onZoomStart) that.options.onZoomStart.call(that, e);
				that.wheelZoomCount++;
				
				that.zoom(e.pageX, e.pageY, deltaScale, 400);
				
				setTimeout(function() {
					that.wheelZoomCount--;
					if (!that.wheelZoomCount && that.options.onZoomEnd) that.options.onZoomEnd.call(that, e);
				}, 400);
			}
			
			return;
		}
		
		deltaX = that.x + wheelDeltaX;
		deltaY = that.y + wheelDeltaY;

		if (deltaX > 0) deltaX = 0;
		else if (deltaX < that.maxScrollX) deltaX = that.maxScrollX;

		if (deltaY > that.minScrollY) deltaY = that.minScrollY;
		else if (deltaY < that.maxScrollY) deltaY = that.maxScrollY;
    
		if (that.maxScrollY < 0) {
			that.scrollTo(deltaX, deltaY, 0);
		}
	},
	
	_transitionEnd: function (e) {
		var that = this;

		if (e.target != that.scroller) return;

		that._unbind(TRNEND_EV);
		
		that._startAni();
	},


	/**
	*
	* Utilities
	*
	*/
	_startAni: function () {
		var that = this,
			startX = that.x, startY = that.y,
			startTime = Date.now(),
			step, easeOut,
			animate;

		if (that.animating) return;
		
		if (!that.steps.length) {
			that._resetPos(400);
			return;
		}
		
		step = that.steps.shift();
		
		if (step.x == startX && step.y == startY) step.time = 0;

		that.animating = true;
		that.moved = true;
		
		if (that.options.useTransition) {
			that._transitionTime(step.time);
			that._pos(step.x, step.y);
			that.animating = false;
			if (step.time) that._bind(TRNEND_EV);
			else that._resetPos(0);
			return;
		}

		animate = function () {
			var now = Date.now(),
				newX, newY;

			if (now >= startTime + step.time) {
				that._pos(step.x, step.y);
				that.animating = false;
				if (that.options.onAnimationEnd) that.options.onAnimationEnd.call(that);			// Execute custom code on animation end
				that._startAni();
				return;
			}

			now = (now - startTime) / step.time - 1;
			easeOut = m.sqrt(1 - now * now);
			newX = (step.x - startX) * easeOut + startX;
			newY = (step.y - startY) * easeOut + startY;
			that._pos(newX, newY);
			if (that.animating) that.aniTime = nextFrame(animate);
		};

		animate();
	},

	_transitionTime: function (time) {
		time += 'ms';
		this.scroller.style[transitionDuration] = time;
		if (this.hScrollbar) this.hScrollbarIndicator.style[transitionDuration] = time;
		if (this.vScrollbar) this.vScrollbarIndicator.style[transitionDuration] = time;
	},

	_momentum: function (dist, time, maxDistUpper, maxDistLower, size) {
		var deceleration = 0.0006,
			speed = m.abs(dist) / time,
			newDist = (speed * speed) / (2 * deceleration),
			newTime = 0, outsideDist = 0;

		// Proportinally reduce speed if we are outside of the boundaries
		if (dist > 0 && newDist > maxDistUpper) {
			outsideDist = size / (6 / (newDist / speed * deceleration));
			maxDistUpper = maxDistUpper + outsideDist;
			speed = speed * maxDistUpper / newDist;
			newDist = maxDistUpper;
		} else if (dist < 0 && newDist > maxDistLower) {
			outsideDist = size / (6 / (newDist / speed * deceleration));
			maxDistLower = maxDistLower + outsideDist;
			speed = speed * maxDistLower / newDist;
			newDist = maxDistLower;
		}

		newDist = newDist * (dist < 0 ? -1 : 1);
		newTime = speed / deceleration;

		return { dist: newDist, time: m.round(newTime) };
	},

	_offset: function (el) {
		var left = -el.offsetLeft,
			top = -el.offsetTop;
			
		while (el = el.offsetParent) {
			left -= el.offsetLeft;
			top -= el.offsetTop;
		}
		
		if (el != this.wrapper) {
			left *= this.scale;
			top *= this.scale;
		}

		return { left: left, top: top };
	},

	_snap: function (x, y) {
		var that = this,
			i, l,
			page, time,
			sizeX, sizeY;

		// Check page X
		page = that.pagesX.length - 1;
		for (i=0, l=that.pagesX.length; i<l; i++) {
			if (x >= that.pagesX[i]) {
				page = i;
				break;
			}
		}
		if (page == that.currPageX && page > 0 && that.dirX < 0) page--;
		x = that.pagesX[page];
		sizeX = m.abs(x - that.pagesX[that.currPageX]);
		sizeX = sizeX ? m.abs(that.x - x) / sizeX * 500 : 0;
		that.currPageX = page;

		// Check page Y
		page = that.pagesY.length-1;
		for (i=0; i<page; i++) {
			if (y >= that.pagesY[i]) {
				page = i;
				break;
			}
		}
		if (page == that.currPageY && page > 0 && that.dirY < 0) page--;
		y = that.pagesY[page];
		sizeY = m.abs(y - that.pagesY[that.currPageY]);
		sizeY = sizeY ? m.abs(that.y - y) / sizeY * 500 : 0;
		that.currPageY = page;

		// Snap with constant speed (proportional duration)
		time = m.round(m.max(sizeX, sizeY)) || 200;

		return { x: x, y: y, time: time };
	},

	_bind: function (type, el, bubble) {
		(el || this.scroller).addEventListener(type, this, !!bubble);
	},

	_unbind: function (type, el, bubble) {
		(el || this.scroller).removeEventListener(type, this, !!bubble);
	},


	/**
	*
	* Public methods
	*
	*/
	destroy: function () {
		var that = this;

		that.scroller.style[transform] = '';

		// Remove the scrollbars
		that.hScrollbar = false;
		that.vScrollbar = false;
		that._scrollbar('h');
		that._scrollbar('v');

		// Remove the event listeners
		that._unbind(RESIZE_EV, window);
		that._unbind(START_EV);
		that._unbind(MOVE_EV, window);
		that._unbind(END_EV, window);
		that._unbind(CANCEL_EV, window);
		
		if (!that.options.hasTouch) {
			that._unbind('DOMMouseScroll');
			that._unbind('mousewheel');
		}
		
		if (that.options.useTransition) that._unbind(TRNEND_EV);
		
		if (that.options.checkDOMChanges) clearInterval(that.checkDOMTime);
		
		if (that.options.onDestroy) that.options.onDestroy.call(that);
	},

	refresh: function () {
		var that = this,
			offset,
			i, l,
			els,
			pos = 0,
			page = 0;

		if (that.scale < that.options.zoomMin) that.scale = that.options.zoomMin;
		that.wrapperW = that.wrapper.clientWidth || 1;
		that.wrapperH = that.wrapper.clientHeight || 1;

		that.minScrollY = -that.options.topOffset || 0;
		that.scrollerW = m.round(that.scroller.offsetWidth * that.scale);
		that.scrollerH = m.round((that.scroller.offsetHeight + that.minScrollY) * that.scale);
		that.maxScrollX = that.wrapperW - that.scrollerW;
		that.maxScrollY = that.wrapperH - that.scrollerH + that.minScrollY;
		that.dirX = 0;
		that.dirY = 0;

		if (that.options.onRefresh) that.options.onRefresh.call(that);

		that.hScroll = that.options.hScroll && that.maxScrollX < 0;
		that.vScroll = that.options.vScroll && (!that.options.bounceLock && !that.hScroll || that.scrollerH > that.wrapperH);

		that.hScrollbar = that.hScroll && that.options.hScrollbar;
		that.vScrollbar = that.vScroll && that.options.vScrollbar && that.scrollerH > that.wrapperH;

		offset = that._offset(that.wrapper);
		that.wrapperOffsetLeft = -offset.left;
		that.wrapperOffsetTop = -offset.top;

		// Prepare snap
		if (typeof that.options.snap == 'string') {
			that.pagesX = [];
			that.pagesY = [];
			els = that.scroller.querySelectorAll(that.options.snap);
			for (i=0, l=els.length; i<l; i++) {
				pos = that._offset(els[i]);
				pos.left += that.wrapperOffsetLeft;
				pos.top += that.wrapperOffsetTop;
				that.pagesX[i] = pos.left < that.maxScrollX ? that.maxScrollX : pos.left * that.scale;
				that.pagesY[i] = pos.top < that.maxScrollY ? that.maxScrollY : pos.top * that.scale;
			}
		} else if (that.options.snap) {
			that.pagesX = [];
			while (pos >= that.maxScrollX) {
				that.pagesX[page] = pos;
				pos = pos - that.wrapperW;
				page++;
			}
			if (that.maxScrollX%that.wrapperW) that.pagesX[that.pagesX.length] = that.maxScrollX - that.pagesX[that.pagesX.length-1] + that.pagesX[that.pagesX.length-1];

			pos = 0;
			page = 0;
			that.pagesY = [];
			while (pos >= that.maxScrollY) {
				that.pagesY[page] = pos;
				pos = pos - that.wrapperH;
				page++;
			}
			if (that.maxScrollY%that.wrapperH) that.pagesY[that.pagesY.length] = that.maxScrollY - that.pagesY[that.pagesY.length-1] + that.pagesY[that.pagesY.length-1];
		}

		// Prepare the scrollbars
		that._scrollbar('h');
		that._scrollbar('v');

		if (!that.zoomed) {
			that.scroller.style[transitionDuration] = '0';
			that._resetPos(400);
		}
	},

	scrollTo: function (x, y, time, relative) {
		var that = this,
			step = x,
			i, l;

		that.stop();

		if (!step.length) step = [{ x: x, y: y, time: time, relative: relative }];
		
		for (i=0, l=step.length; i<l; i++) {
			if (step[i].relative) { step[i].x = that.x - step[i].x; step[i].y = that.y - step[i].y; }
			that.steps.push({ x: step[i].x, y: step[i].y, time: step[i].time || 0 });
		}

		that._startAni();
	},

	scrollToElement: function (el, time) {
		var that = this, pos;
		el = el.nodeType ? el : that.scroller.querySelector(el);
		if (!el) return;

		pos = that._offset(el);
		pos.left += that.wrapperOffsetLeft;
		pos.top += that.wrapperOffsetTop;

		pos.left = pos.left > 0 ? 0 : pos.left < that.maxScrollX ? that.maxScrollX : pos.left;
		pos.top = pos.top > that.minScrollY ? that.minScrollY : pos.top < that.maxScrollY ? that.maxScrollY : pos.top;
		time = time === undefined ? m.max(m.abs(pos.left)*2, m.abs(pos.top)*2) : time;

		that.scrollTo(pos.left, pos.top, time);
	},

	scrollToPage: function (pageX, pageY, time) {
		var that = this, x, y;
		
		time = time === undefined ? 400 : time;

		if (that.options.onScrollStart) that.options.onScrollStart.call(that);

		if (that.options.snap) {
			pageX = pageX == 'next' ? that.currPageX+1 : pageX == 'prev' ? that.currPageX-1 : pageX;
			pageY = pageY == 'next' ? that.currPageY+1 : pageY == 'prev' ? that.currPageY-1 : pageY;

			pageX = pageX < 0 ? 0 : pageX > that.pagesX.length-1 ? that.pagesX.length-1 : pageX;
			pageY = pageY < 0 ? 0 : pageY > that.pagesY.length-1 ? that.pagesY.length-1 : pageY;

			that.currPageX = pageX;
			that.currPageY = pageY;
			x = that.pagesX[pageX];
			y = that.pagesY[pageY];
		} else {
			x = -that.wrapperW * pageX;
			y = -that.wrapperH * pageY;
			if (x < that.maxScrollX) x = that.maxScrollX;
			if (y < that.maxScrollY) y = that.maxScrollY;
		}

		that.scrollTo(x, y, time);
	},

	disable: function () {
		this.stop();
		this._resetPos(0);
		this.enabled = false;

		// If disabled after touchstart we make sure that there are no left over events
		this._unbind(MOVE_EV, window);
		this._unbind(END_EV, window);
		this._unbind(CANCEL_EV, window);
	},
	
	enable: function () {
		this.enabled = true;
	},
	
	stop: function () {
		if (this.options.useTransition) this._unbind(TRNEND_EV);
		else cancelFrame(this.aniTime);
		this.steps = [];
		this.moved = false;
		this.animating = false;
	},
	
	zoom: function (x, y, scale, time) {
		var that = this,
			relScale = scale / that.scale;

		if (!that.options.useTransform) return;

		that.zoomed = true;
		time = time === undefined ? 200 : time;
		x = x - that.wrapperOffsetLeft - that.x;
		y = y - that.wrapperOffsetTop - that.y;
		that.x = x - x * relScale + that.x;
		that.y = y - y * relScale + that.y;

		that.scale = scale;
		that.refresh();

		that.x = that.x > 0 ? 0 : that.x < that.maxScrollX ? that.maxScrollX : that.x;
		that.y = that.y > that.minScrollY ? that.minScrollY : that.y < that.maxScrollY ? that.maxScrollY : that.y;

		that.scroller.style[transitionDuration] = time + 'ms';
		that.scroller.style[transform] = 'translate(' + that.x + 'px,' + that.y + 'px) scale(' + scale + ')' + translateZ;
		that.zoomed = false;
	},
	
	isReady: function () {
		return !this.moved && !this.zoomed && !this.animating;
	}
};

function prefixStyle (style) {
	if ( vendor === '' ) return style;

	style = style.charAt(0).toUpperCase() + style.substr(1);
	return vendor + style;
}

dummyStyle = null;	// for the sake of it

if (typeof exports !== 'undefined') exports.iScroll = iScroll;
else window.iScroll = iScroll;

})(window, document);
;    //The field currently beeing edited

    var currentPosition = 0;
    var cnt = 0;
    var cntFwd = 0;
    var isPhoneGap = (document.URL.indexOf('http://') === -1 && document.URL.indexOf('https://') === -1);
    var IsAndroid = (/android/gi).test(navigator.appVersion);
    var IsIDevice = (/iphone|ipad/gi).test(navigator.appVersion);
    var IsPlaybook = (/playbook/gi).test(navigator.appVersion);
    var IsTouchPad = (/hp-tablet/gi).test(navigator.appVersion);
    var IsInternetExplorer = (/Microsoft/gi).test(navigator.appName);
    var IsWindowsPhone = (/Windows Phone/gi).test(navigator.appVersion);
    document.addEventListener('touchmove', function(e) {
        e.preventDefault();
    }, false);

    //TRANSLATED MESSAGES
    var MESSAGE = {
        NO_INTERNET: 'Du har ingen internetuppkoppling',
        SERVER_NOT_RESPONDING: ''
    };
    
    
    var showalert=function(msg,page){


        if (navigator.notification != undefined && navigator.notification != null) {
            navigator.notification.alert(msg, alertDismissed, 'BIP', 'Ok');

            //alert(message);
        } else {
            alert(msg);
        }

       
           if(page=='TrainingList'){
                changepage(page);
            }
            else if(page!="" && page!=undefined){
                console.log("Page called is "+ page);
                $('#TrainingList #bodyContent1 li:first').trigger('click');
            }
            $('.alertbox').hide();

    }


    $(document).ready(function(){
        console.log("Total alert box "+$('.alertok').length);
        $('.alertok').on('click',function(){
                $('.alertbox').hide();



        })

        $('.dismis_offline_dialogue').on('click',function(){
                $('.offline_dialogue').hide();
                offlinehelper.hidealert=true;
        })



    })
    //$.getScriptSync("js/iscroll.js");

    if (isPhoneGap) {
        //getting the cordova.js file only if it is cordova
        var a = $.getScript('cordova.js').then(function(res) {
            console.log('loaded');
          //  console.log(res);
        });
        //console.log(a);
    }

    $(window).bind('load', function() {
        //Initialize all pages
        $('div[data-role="page"]').page();

        //if some browser does not support css fixed position
        if (!$.support.fixedPosition) {
            $("#footer").css({
                position: 'absolute'
            });
            //$("div.ui-page:not(div#pageLogin)").css({ top: '50px' });
        }
        //To prevent weird scroll behaviour in iPhone when select box is opened
        $('.scrollwrapper').bind('scroll', function() {
            if (scrolls[$.mobile.activePage.attr("id")]) {
                $(this).scrollTop(0);
                return false;
            }
        });

        //Setup blur-event to close edit-box and move content, only on Iphone
        if (IsAndroid) {
            //On blur, if box is still visible, give back focus to area
            $('#EditBox').blur(function(e) {
                if ($(this).is(':visible')) {
                    $(this).focus();
                    return false;
                }
            });

             $(".checkicon")
                 .bind("touchstart", function () {
                    //console.log("Fake class start working");
                     $(this).addClass("fake-active-class");
                 })
                 .bind("touchend", function() {
                    //console.log("Fake class end working");
                     $(this).removeClass("fake-active-class");
                 });


        } else {
            //Set blur event to trigger close
            //$('#EditBox').blur(editableTextBlurred);

        }




        //Enable iScroll
        enableIScroll();
    });

    function enableIScroll(activePage) {
        //if (!(IsAndroid || IsIDevice))
        //    return;

        activePage = $(activePage || $.mobile.activePage);

        //Don't scroll the login page!
        if (activePage && activePage.attr('id') == 'Login') {
            $(document).unbind('touchmove', scrollHandler);
            return;
        }

        if (scrolls[activePage.attr('id')] == null) {
            scrolls[activePage.attr('id')] = false;

            scrolls[activePage.attr('id')] = new iScroll(activePage.find("div.scrollwrapper")[0], {
                useTransform: $.support.cssTransform3d,
                onBeforeScrollStart: function(e) {
                    var target = e.target;
                    while (target.nodeType != 1) target = target.parentNode;

                    //Needed to make edit-box clickable with single click
                    if (target.tagName != 'SELECT' && target.tagName != 'INPUT' && target.tagName != 'TEXTAREA' && !(target.tagName == 'DIV' && $(target).hasClass('editablediv')))
                        e.preventDefault();
                }
            });


            //Simple extension to the iscroll object to allow relative scrollToElement
            scrolls[activePage.attr('id')].scrollToElementCustom = iScrollScrollToElementCustom;

            //Disable browsers default touch-event
            //First unbind so that we don't have multiple handlers
            //$(document).unbind('touchmove', scrollHandler);
            //$(document).bind('touchmove', scrollHandler, false);
        }

        if (scrolls[activePage.attr('id')] && currentPosition != 0 && currentPosition != scrolls[activePage.attr('id')].y) {
            pageScrollTo(activePage.attr("id"), 0, currentPosition, 0, false);
            //scrolls[$($.mobile.activePage).attr("id")].scrollTo(0, currentPosition, 0, false);
        }
    }

    function scrollHandler(e) {
        e.preventDefault();
    }

    function hideContent() {
        $('.scrollfooter').hide();
        $('.scrollheader,.scrollwrapper', $.mobile.activePage).hide();
        //$('.scrollheader,.scrollwrapper', $.mobile.activePage).hide(0,function(){
        //	$(this).trigger( 'updatelayout');
        //});
    }

    function showContent() {
        $('.scrollfooter').show();
        $('.scrollheader', $.mobile.activePage).show();
        $('.scrollwrapper', $.mobile.activePage).show(0, function() {
            setTimeout(enableIScroll, 500);
            $(this).css('background-color', 'white');
            $(this).css('background-color', 'transparent');

            //$(this).trigger('updatelayout');
        });
    }

    function disableIScroll() {
        //Destroy iScroll while in edit-mode to prevent weird behaviour while editing
        if (scrolls[$($.mobile.activePage).attr("id")]) {
            scrolls[$($.mobile.activePage).attr("id")].destroy();
            scrolls[$($.mobile.activePage).attr("id")] = null;
            $(document).unbind('touchmove', scrollHandler);
        }
    }

    function pageScrollTo(pageid, x, y, delay, relative) {
        var id = pageid || $.mobile.activePage.attr("id");
        if (scrolls[id] && scrolls[id].scrollTo)
            scrolls[id].scrollTo(x, y, delay, relative);
    }

    function pageScrollToElement(element, delay, relative) {
        var id = $(element).parents('div[data-role="page"]').attr('id');
        if (scrolls[id] && scrolls[id].scrollToElementCustom) {
            pageScrollTo(id, 0, -30, 0, false);
            scrolls[id].scrollToElementCustom(element, delay, relative);
        }
    }

    function refreshScroll(pageid) {
        var id = pageid || $.mobile.activePage.attr("id");
        if (scrolls[id] != null && scrolls[id].refresh)
            scrolls[id].refresh();
    }

    function iScrollScrollToElementCustom(el, time, relative) {
        var that = this,
            pos;
        el = el.nodeType ? el : that.scroller.querySelector(el);
        if (!el) return;

        pos = that._offset(el);
        pos.left += that.wrapperOffsetLeft;
        pos.top += that.wrapperOffsetTop + 30;

        pos.left = pos.left > 0 ? 0 : pos.left < that.maxScrollX ? that.maxScrollX : pos.left;
        pos.top = pos.top > that.minScrollY ? that.minScrollY : pos.top < that.maxScrollY ? that.maxScrollY : pos.top;
        time = time === undefined ? m.max(m.abs(pos.left) * 2, m.abs(pos.top) * 2) : time;

        that.scrollTo(pos.left, pos.top, time, relative);
    }


    /**************Start Notification***************************************************/
    var AppId = '';
    var DeviceID = '';
    var DeviceType = '';
    var DeviceName = '';
    $(document).ready(function() {



        if (IsIDevice) {
            DeviceType = 'iphone';
            $.jStorage.set('DeviceType', DeviceType);

        } else if (IsAndroid) {
            DeviceType = 'android';
            $.jStorage.set('DeviceType', DeviceType);

        } else {
            DeviceType = '';

        }


    });


    var push;

    function registerAPN() {
        push = window.plugins.pushNotification;
        // Callback for when a device has registered with Urban Airship.

        push.registerEvent('registration', function(error, id) {
            if (error) {
                console.log('there was an error registering for push notifications');
            } else {
                AppId = id;
                $.jStorage.set('AppId', AppId);
                console.log("Registered with ID: " + id);
            }
        });

        // Callback for when the app is running, and receives a push.
        push.registerEvent('push', function(pushdata) {
            //console.log("Got push: " + pushdata.message);
            showalert(pushdata.message);
            cosole.log(pushdata);

        });
        document.addEventListener("resume", function() {
            push.resetBadge();
            push.getIncoming(handleIncomingPush);
        });

    }
    var handleIncomingPush = function(incoming) {
        if (incoming.message) {
            //console.log("Incoming push: " + incoming.message)
            showalert(incoming.message + " Resume");
            //managePushfromserver(false,incoming);
        } else {
            console.log("No incoming message")
        }
    }




    //Get button text from querystring parameter
        function getQuerystring(key, url) {
            var query = url;
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (pair[0] == key) {
                    return pair[1];
                }
            }
        }




        /**************End Notification***************************************************/;    //Page Navigation
    var PageFollowStack = new Array();
    var scrolls = [];
    var installationid="";
    // var parse_app_id=PARSE_APP_ID;
    // var parse_client_id=PARSE_CLIENT_KEY;
    // var parseApiAddress=PARSE_API_ADDRESS+"angular.bind(self, function)";
    var updateTimer;
    var updatetime=1000*60;
        idleTimer = null;
    idleState = false;
    idleWait = 1000*60*15; //sabin 20151027
    var activateTaskTimer = null; //sabin 112412
    var displayedInvalidLoginDialog = 0; //added by sabin
    var displayedNoModulesDialog = 0; //added by sabin
    var displayedLogoutAlert = 0;
    if(location.host==""){
        var isWebVersion = false; //if true then load images, audio from remote url as app is running on web
    }else{
        var isWebVersion = true;
    }
   
    //Function to adjust height of the content, without is iscroll won't work properly.
    function adjustContentHeight(){
        if($(".page-app-v2").length>0){
            $height = $(window).innerHeight();
            console.info("HEIGHTWA = "+$height);
            $(".page-app-v2").find(".ui-content").height(parseFloat($height)-20);
        }
    }


    String.prototype.capitalizeFirstLetter = function() {
        return this.charAt(0).toUpperCase() + this.slice(1);
    }

    String.prototype.smallFirstLetter = function() {
        return this.charAt(0).toLowerCase() + this.slice(1);
    }

     //var currentPageId='';
    // common message box
    function msgBox(message) {
        if (navigator.notification != undefined && navigator.notification != null) {
            navigator.notification.alert(message, alertDismissed, 'BIP', 'Ok');
            //alert(message);
        } else {
            alert(message);
        }
    }

    function confirmBox(message, cCallback) {

        /*if (confirm(message)) {
                return cCallback(1);
        } else {
            return cCallback(2);
        }*/
        if (navigator.notification != undefined && navigator.notification != null) {
            navigator.notification.confirm(
                message, // message
                cCallback, // callback to invoke with index of button pressed
                'BIP', // title
                'Ja,Nej' // buttonLabels
            );
        } else {
            if (confirm(message)) {
                return cCallback(1);
            } else {
                return cCallback(2);
            }
        }
    }

    function alertDismissed() {
        // do something
    }

    function CheckSession() {
        if ($.jStorage.get('tokenkey') == null) {
            gotoLoginPage();
        } else {
            gotoTargetPage();
        }
    }

    // validation for login page
    function checkLoginValues() {
        if ($("#txtEmail").val().trim() == '') {
            msgBox('Vänligen fyll i e-post');
        } else if ($("#txtPwd").val().trim() == '') {
            msgBox('Vänligen fyll i lösenord');
        } else {
            return true;
        }

    }

    var successCallback=function(e){
      //  alert("Success call back "+e);
      
    }


    var installationid=function(e){
       // alert("id is "+e);
        installationid=e;
    }

    var failureCallback=function(){

        //alert("Connection with Parse failed");
    }
    // call login function
    function fnLogin() {

        isValidUser(); //added by sabin
        displayedNoModulesDialog = 0;
        document.removeEventListener("backbutton", backKeyDown, false);
        document.addEventListener("backbutton", backKeyDown, false);
        offlinehelper.checkOnlineStatus(); //added by sabin
        
        if (checkLoginValues()) {

            //For Push Details Save With Login, reduce extra request
            //changepage('TrainingList');
            //setTimeout(function(){enableIScroll();},1000);
            //return;

            var json = '';
            var deviceinstallationid="";
            if (IsAndroid || IsIDevice) {
                if (AppId === '' || AppId === null)
                    AppId = $.jStorage.get('AppId') === null ? '' : $.jStorage.get('AppId');
                if (DeviceID === '' || DeviceID === null)
                    DeviceID = $.jStorage.get('DeviceID') === null ? '' : $.jStorage.get('DeviceID');
                if (DeviceType === '' || DeviceType === null)
                    DeviceType = $.jStorage.get('DeviceType') === null ? '' : $.jStorage.get('DeviceType');
                if (DeviceName === '' || DeviceName === null)
                    DeviceName = $.jStorage.get('DeviceName') === null ? '' : $.jStorage.get('DeviceName'); //new Date().getTimezoneOffset() * -1
            }
            var dtype="";
            DeviceID = "ABBBSBS";
            dtoken=  1;
            if(IsAndroid){
                    dtype="Android";
                   
                     dtoken="";
                    
            }else if (IsIDevice){
                    dtype="IOS";
                    //cordova.exec.setJsToNativeBridgeMode(cordova.exec.jsToNativeModes.XHR_NO_PAYLOAD);
                    
                        //DeviceID = $.jStorage.get('DeviceID') === null ? '' : $.jStorage.get('DeviceID');
                  
            }
             deviceinstallationid=$.jStorage.get('DeviceID');

             //"appid":"'+AppId+'",
            json = '{"username":"' + $("#txtEmail").val().trim() + '","password":"' + $("#txtPwd").val().trim() + '","deviceId":"' + DeviceID + '","tokenkey":"' + dtoken + '","identificationumber":"'+ deviceinstallationid +'","devicetype":"'+dtype+'"}';
           console.log(json);
            var webmethodname = 'validateuser';


            offlinehelper.checkFirstTime(function(data){
                
                if(data=='error'){
                    msgBox("Ingen internetuppkoppling");
                    $.mobile.hidePageLoadingMsg();   
                    return;
                }
                if(data==false){
                    //checkAvailableModules();
                    console.info("IS NOT FIRST LOGIN");
                   //added by sabin
                   
                   if(navigator.onLine && offlinehelper.syncstarted==false){ //  && offlinehelper.loginstarted==false:: sync only if user is not logging in for first time, for first time we already have synced
                        console.warn("NOW SYNCING THE RECORDS");
                        offlinehelper.prepareForSync(true);
                   }

                   if(navigator.onLine==false && offlinehelper.hidealert==false){
                        $('.offline_dialogue').show();
                   }
                   
                   checkAvailableModules();

                    callWebService(webmethodname, json, function(response) {
                     console.warn("Check how how many times called");
                    if (response.status === "ok") {
                        if (response.data !== "invalid") {
                            $(".download-content-msg").hide();
                            $(".download-overlay").hide();

                            //$(".sync-btn-holder").show(); //added by sabin
                            console.warn("Logging in with offline data ");
                            //$(".sync-btn-holder").show(); //added by sabin
                           // sqlhelper.initiateDatabase(response);
                            //changepage('TrainingList');
                            //also remember the username
                            
                           
                            response.data.tokenkey=$.jStorage.get('bip_jwt');
                            $.jStorage.set('userEmail', $("#txtEmail").val().trim());
                            $.jStorage.set('userdetails', response.data);
                            
                            Training.reminders=$.parseJSON(response.data.reminders);
                            Training.feedback=$.parseJSON(response.data.feedbackMessage);
                            
                            

                            if(response.data.availableModules!="undefined"){
                                offlinehelper.EnabledModules = JSON.parse(response.data.availableModules);
                            }

                            if (response.data.sms == "true") {
                                $("#smserror").hide();
                                changepage("smsLogin");
                            }else if(response.data.new_start_page==3){ //==1 added by sabin 290
                                if(typeof response.data.availableModules!="undefined"){ //Sabin 23Nov2015
                                    if(response.data.availableModules!="undefined"){
                                        //if all modules are disabled just give the message
                                        if(offlinehelper.ShowHideModules("registration")==0 && (offlinehelper.ShowHideModules("homework_module")==0 || (offlinehelper.ShowHideModules("homework_module")==1 && offlinehelper.ShowHideModules("homework_id").length==0)) && offlinehelper.ShowHideModules("crisis_plan")==0 && offlinehelper.ShowHideModules("my_skills")==0){
                                            $('.btn_logout').attr("data-autologout",1); // sabin 20151027
                                            $('.btn_logout').trigger('click');

                                            if(displayedNoModulesDialog==0){
                                                msgBox("Din app är inte aktiverad. Var god kontakta din psykolog");
                                                displayedNoModulesDialog=1;
                                            }
                                            
                                           // return false;
                                        }
                                    }
                                }

                                //render self harm homepage
                                callWebService("checkModulesEnabled",json, function(response){
                                    if(response.status=="ok"){
                                           
                                            var resV2 = {
                                                hasRegistration:    response.data.hasRegistration,
                                                homeworks:          response.data.homeworks,
                                                crisisplans:        response.data.crisisplans
                                            };

                                            offlinehelper.isSelfHarm = true; 
                                            BipAppVersion2.renderStartPage(resV2);
                                            $('#RegistrationTask div:first a:first').hide();
                                            $('.btn_logout').attr("data-autologout",0);
                                            Registration.home();
                                            checkNewSettings();
                                    }
                                })

                                
                            }else {
                                checkNewSettings();
                                offlinehelper.isSelfHarm = false; 
                                if(navigator.onLine==true){
                                    offlinehelper.downloadAudioFiles();
                                }

                                Training.setTrainings();

                                
                                //Added by sabin @ 16th Apr 2015. 
                               // BipAppVersion2.renderStartPage(resV2);
                                //Registration.renderRegistrationNav(response.data.hasRegistration);
                                //Commented above 2 lines at 6th oct 2015 by sabin 290
                                
                                //added by sabin the offline banner displaying code removed from here and put it into offlinehelper.js in method checkOnlineStatus
                                //
                                //
                                //

                                            updateTimer = setInterval(function () { 
                                            console.log("Getting called");
                                            if(navigator.onLine==true){
                                                 var userdetails = $.jStorage.get('userdetails');
                                                 var json_new = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '"}';
                                                    callWebServiceLiveSilently('reminder', json_new, function(response) {
                                                            if(JSON.stringify(Training.reminders) !=JSON.stringify(response.data)){
                                                                  Training.reminders=response.data;


                                                                   var toadd={
                                                                                where:{
                                                                                    'user_id': userdetails.user_id
                                                                                },
                                                                                fields:{
                                                                                    'reminders':JSON.stringify(response.data)
                                                                                 }
                                                                            };
                                                                    callWebService('saveReminder', toadd, function(response) {
                                                                            
                                                                    },"",false);
                                                            }
                                                            /*if($('.checkregister').hasClass('Smartmatning')) //sabin 112412
                                                                Training.activateDeactivateTask();*/


                                                    },"",false);
                                                   if(offlinehelper.syncstarted==false && (offlinehelper.currentpage=="TrainingList" || offlinehelper.currentpage=="RegistrationTask") )
                                                        offlinehelper.prepareForSync();
                                            }else{
                                               /* if($('.checkregister').hasClass('Smartmatning')) //sabin 112412
                                                    Training.activateDeactivateTask();*/
                                            }
                                            //console.log(Training.TaskLists);
                                        },updatetime);

                                    //sabin 112412
                                    
                                    /*activateTaskTimer = setInterval(function(){
                                            
                                            if($('.checkregister').hasClass('Smartmatning') && navigator.onLine==true){
                                                   //Training.activateDeactivateTask();
                                                   if($.trim($(".pagename").html())=="Register"){
                                                        callWebServiceLiveSilently("getservertime", "{}", function(response) {
                                                            var d =  {
                                                                hour: response.data.hour,
                                                                minute: response.data.minute
                                                            };
                                                            Training.activateDeactivateTask(d); // Activate deactivate task only if task is of tag2
                                                        },"",false);
                                                    };
                                            }
                                    },3000);*/

                                    activateTaskTimer = setInterval(function(){
                                            if($('.checkregister').hasClass('Smartmatning')){
                                                   Training.activateDeactivateTask();
                                            }
                                    },1000);
                               

                            }

                             (function ($) { //Sabin 2412 // put this function outside if condition.

                                $(document).ready(function () {
                                
                                    $('*').bind('mousemove keydown scroll touchend', function () {
                                        
                                        clearTimeout(idleTimer);
                                                
                                        if (idleState == true) { 
                                            
                                            // Reactivated event
                                            //$("body").append("<p>Welcome Back.</p>");            
                                        }
                                        
                                        
                                        idleState = false;
                                      
                                        idleTimer = setTimeout(function () { 
                                            $('.btn_logout').attr("data-autologout",1); // sabin 20151027
                                            $('.btn_logout').trigger('click');
                                            // Idle Event

                                           // $("body").append("<p>You've been idle for " + idleWait/1000 + " seconds.</p>");
                                            console.error("You've been idle for " + idleWait/1000 + " seconds.");
                                            idleState = true; 
                                            }, 
                                        idleWait);
                                    });
                                    
                                    $("body").trigger("mousemove");
                                
                                });
                            }) (jQuery)

                            var abcd = setTimeout(function() {
                                //make a slight delay so that the password field empty
                                //is not visible just after the login
                                //until the slide transition has been completed
                                //3 seconds should be enough
                                $('#txtPwd').val('');
                                clearTimeout(abcd);
                            }, 3000);

                        } else {
                            msgBox('Either Anvandarnamn or Losenord is incorrect');
                            offlinehelper.loginstarted=false;
                        }
                    } else if (response.status === "error") {
                        msgBox("Error::: "+response.message);
                        offlinehelper.loginstarted=false;
                    } else {
                        /*msgBox('Ett fel har inträffat, försök igen.');*/
                        if(response==true){
                             msgBox("Användarnamn och lösenord matchar inte."); //sabin 2412
                        }else{
                            msgBox("Det gick inte att logga in. Vänligen kontakta din behandlare."); //Nov29
                        }
                        offlinehelper.loginstarted=false;
                    }
                });
                }else{
                    console.info("IS FIRST LOGIN");
                    callWebServiceLive(webmethodname, json, function(response) {
                        if (response.status === "ok") {
                            if (response.data !== "invalid") {
                                console.log("Everything");
                                offlinehelper.syncTable(response.data);
                            }
                        }else{ // provided invalid login information in the fist time login //added by sabin
                            if(response.message=="patient_inactive"){
                                 msgBox("Det gick inte att logga in. Vänligen kontakta din behandlare."); //sabin 2412
                            }else{
                                if(displayedInvalidLoginDialog==0){
                                    msgBox("Det gick inte att logga in. Kontrollera användarnamn och lösenord."); //sabin 2412
                                    displayedInvalidLoginDialog = 1;
                                }
                            }
                            
                            $.jStorage.flush();
                            $(".download-content-msg").hide();
                            $(".download-overlay").hide();
                            $(".ui-loader").hide();
                            sqlhelper.dropTables(offlinehelper.createdTables);
                        }
                    });
                   
                }
            });
          
        }

    }

    // call LogOut function
    function fnLogOut() {
        confirmBox('Är du säker på att du vill logga ut?', function(button) {

            if (button == 1) {
                LogoutServer();
              
                console.log("All interval cleared");
                $('#txtPwd').val('');
                clearInterval(updateTimer);
                clearTimeout(idleTimer);
            }
        });
    }

    // Destroy session from server
    function LogoutServer() {
        if (IsAndroid || IsIDevice) {
            if (DeviceID === '' || DeviceID === null)
                DeviceID = $.jStorage.get('DeviceID') === null ? '' : $.jStorage.get('DeviceID');
            var json = '{"tokenkey":"' + $.jStorage.get('tokenkey') + '","DeviceID":"' + DeviceID + '"}';

        } else
            var json = '{"tokenkey":"' + $.jStorage.get('tokenkey') + '"}';

        var webmethodname = 'Login/Logout';
        $('#txtPwd').val('');
        callWebService(webmethodname, json, function(response) {
            //if (response.status == "ok") {
            localStorage.clear();

            //$.jStorage.flush();
            gotoLoginPage();
            //}
        });
    }

    function checkAvailableModules(){
        if(DeviceID === '' || DeviceID === null){
            DeviceID = $.jStorage.get('DeviceID') === null ? '' : $.jStorage.get('DeviceID');
        }

        var userdetails = $.jStorage.get('userdetails');
        
        if(userdetails!==null){
            var json_new = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '"}';
            callWebServiceLive("getavailablemodules", json_new, function(response) {
                var d =  response.data;
                offlinehelper.EnabledModules = JSON.parse(d.available_modules);
                offlinehelper.UpdateAvailableModules(d.available_modules);
            });
        }
    }


    function checkNewSettings(){
        if(DeviceID === '' || DeviceID === null){
            DeviceID = $.jStorage.get('DeviceID') === null ? '' : $.jStorage.get('DeviceID');
        }

        var userdetails = $.jStorage.get('userdetails');
        Training.hideGraph = userdetails.hide_graph;
        var json_new = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '"}';
        callWebServiceLive("newsettings", json_new, function(response) {
           var d =  response.data;
           var enable_msg_alert = parseInt(d.enable_msg_alert);
           Training.hideGraph = d.hide_graph;
           userdetails.hide_graph = d.hide_graph;
           var msgs =  parseInt(d.new_messages);
           if(msgs>0 && enable_msg_alert==1){

                var st = setTimeout(function(){
                    $(".has-alert-message").slideDown("slow", function(){
                            clearTimeout(st);
                            st = null;
                    });
                },500); 
           }
        });
        
    }



    // call login page
    function gotoLoginPage() {
        //changepage('pageLogin');
        $.jStorage.set('gid', null);
        $.jStorage.set('tokenkey', null);
        window.location = window.location.href.replace(window.location.hash, "");
        PageFollowStack = new Array();
    }
    // common function for change page
    
    function changepage(pagename, transition) {
        console.log(pagename);
        transition = transition || 'slide';
        //$.mobile.defaultPageTransition = 'slide';
        //$.mobile.showPageLoadingMsg('a','Loading...', false);
        //, {transition:"slide"}
        //$(document).ready(function() {
        $('.pagename').text(pagename);
        offlinehelper.currentpage=pagename;
        if (pagename == "RegistrationTask_List") {
            transition = "none";
        }
        $.mobile.changePage("#" + pagename, {
            transition: "none"
        });

    }

    /*function backpage(pagename, e, pageTransition) {

        if(pagename=="Login"){
                clearInterval(updateTimer);
                clearTimeout(idleTimer);

        }

        pageTransition = pageTransition || $.mobile.defaultPageTransition;
        var cpageid = $($.mobile.activePage).attr("id");
        if (cpageid == "popUp1" || cpageid == "popUp2" || cpageid == "popUp3") {
            if (Training.editedTrainingID > 0) {
                pagename = 'Tidigare';
                Training.editedTrainingID = 0;
            }
        }
        $.mobile.showPageLoadingMsg("");
        if (pagename == "TrainingZone_1_1") {
            pageTransition = "none";
        }

        $.mobile.changePage("#" + pagename, {
            changeHash: true,
            reverse: true,
            transition: pageTransition
        });

        $.mobile.hidePageLoadingMsg();
        if (e != null && e != undefined) {
            e.preventDefault();
            e.stopPropagation();
        }
        if (pagename == "TrainingList") {
            Training.setTrainings();
        }
        return false;
    }*/

    function backpage(pagename, e, pageTransition) { //sabin 20151027
        //stop audios in teh case of thought module 
       filehelper.killAllSound(); //sabin 20121101

        var autologout = $('.btn_logout').attr("data-autologout");

        if(pagename=="Login"){
            //offlinehelper.loggingOut = true;
           offlinehelper.isLoggedOut = true;

            if(autologout==0 && displayedLogoutAlert==0){
                 confirmBox('Vill du logga ut?', function(button) { //sabin 2412
                    if (button === 1) {
                        offlinehelper.prepareForSync(false); //Added to solve not syncing crisis plans on next login .added by sabin 290
                        localStorage.clear();
                        //$.jStorage.flush();
                        clearInterval(updateTimer);
                        clearTimeout(idleTimer);
                        clearInterval(activateTaskTimer);
                        offlinehelper.hidealert = false; //added by sabin
                        offlinehelper.loginstarted=false; //added by sabin
                        displayedLogoutAlert = 1;
                        $(".sync-btn-holder").hide(); //added by sabin
                        $(".has-alert-message").hide();
                        offlinehelper.loginstarted = false;
                        pageChangeContents(pagename, e, pageTransition);
                    }
                });
             }else{
                    offlinehelper.prepareForSync(false); //Added to solve not syncing crisis plans on next login .added by sabin 290
                    localStorage.clear();
                    //$.jStorage.flush();
                    clearInterval(updateTimer);
                    clearTimeout(idleTimer);
                    clearInterval(activateTaskTimer);
                    offlinehelper.hidealert = false; //added by sabin
                    offlinehelper.loginstarted=false; //added by sabin
                    $(".sync-btn-holder").hide(); //added by sabin
                    $(".has-alert-message").hide();
                     offlinehelper.loginstarted = false;
                    pageChangeContents(pagename, e, pageTransition);
             }
             //location.reload();
        }else{
            
            if (e != null && e != undefined) {
                 $tillbaka = $(e.target).text();
                 if($tillbaka=="Avbryt" && $(e.target).closest(".fixedtop").length==0){ //show msgbox after user clicks back button except in pain reporting (it has already there)
                    confirmBox("Vill du avbryta?", function(button){
                        if(button===1){
                            pageChangeContents(pagename, e, pageTransition);
                        }
                    });
                 }else{
                     pageChangeContents(pagename, e, pageTransition);
                 }
            }else{
                 pageChangeContents(pagename, e, pageTransition);
            }
        }
    }

    function pageChangeContents(pagename, e, pageTransition){ //Sabin 20151027
        offlinehelper.currentpage=pagename;
        displayedLogoutAlert = 0;    
        pageTransition = pageTransition || $.mobile.defaultPageTransition;
        var cpageid = $($.mobile.activePage).attr("id");
        if (cpageid == "popUp1" || cpageid == "popUp2" || cpageid == "popUp3") {
            if (Training.editedTrainingID > 0) {
                pagename = 'Tidigare';
                Training.editedTrainingID = 0;
            }
        }
        $.mobile.showPageLoadingMsg("");
        if (pagename == "TrainingZone_1_1") {
             $('.pagename').text("TrainingZone_1_1");
            pageTransition = "none";
        }
        $('.pagename').text(pagename);
        $.mobile.changePage("#" + pagename, {

            transition: "none",
            reloadPage :false
        });
        
      
        if (e != null && e != undefined) {
            e.preventDefault();
            e.stopPropagation();
        }

        e.preventDefault();
    }

    // Input Check funtions
    function checkinput(str) {
        return str.replace(/\n/g, '\\n').replace(/"/g, '\\"');
    }

    //
    //modify Date String
    function modifyDateString(SelDateString) {
        return SelDateString.replace(/-/g, '/');
    }
    // to check page
    //Extract Image Encoded data
    function GetEncodedImageData(dataURL) {
        if (dataURL != "") {
            return dataURL.substring(dataURL.indexOf(',') + 1);
        } else {
            return "";
        }
    }

    function displayHtml(data) {
        if (data)
            return data.replace(/\n/g, '<br/>');
        else
            return '';
    }
    // getNumber of lines in textbox
    function ApplyLineBreaks(strTextAreaId) {
        var oTextarea = document.getElementById(strTextAreaId);
        if (oTextarea.wrap) {
            oTextarea.setAttribute("wrap", "off");
        } else {
            oTextarea.setAttribute("wrap", "off");
            var newArea = oTextarea.cloneNode(true);
            newArea.value = oTextarea.value;
            oTextarea.parentNode.replaceChild(newArea, oTextarea);
            oTextarea = newArea;
        }

        var strRawValue = oTextarea.value;
        oTextarea.value = "";
        var nEmptyWidth = oTextarea.scrollWidth;
        var nLastWrappingIndex = -1;
        for (var i = 0; i < strRawValue.length; i++) {
            var curChar = strRawValue.charAt(i);
            if (curChar == ' ' || curChar == '-' || curChar == '+')
                nLastWrappingIndex = i;
            oTextarea.value += curChar;
            if (oTextarea.scrollWidth > nEmptyWidth) {
                var buffer = "";
                if (nLastWrappingIndex >= 0) {
                    for (var j = nLastWrappingIndex + 1; j < i; j++)
                        buffer += strRawValue.charAt(j);
                    nLastWrappingIndex = -1;
                }
                buffer += curChar;
                oTextarea.value = oTextarea.value.substr(0, oTextarea.value.length - buffer.length);
                oTextarea.value += "\n" + buffer;
            }
        }
        oTextarea.setAttribute("wrap", "");
    }

    /********************************** Jquery Addtional Functions ***************************/
    jQuery.fn.compare = function(t) {
        if (this.length != t.length) {
            return false;
        }
        var a = this.sort(),
            b = t.sort();
        for (var i = 0; t[i]; i++) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    };



    function checkloginDetails() {
        var rememberedUsername = $.jStorage.get('userEmail');
        if (!!rememberedUsername && rememberedUsername.length > 0) {
            $("#txtEmail").val(rememberedUsername);
        }


        if (localStorage.getItem("pwd") != null && localStorage.getItem("pwd") != '' && localStorage.getItem("pwd") != "undefined" && localStorage.getItem("Email") != null && localStorage.getItem("Email") != '' && localStorage.getItem("Email") != "undefined") {
            $("#txtPwd").val(localStorage.getItem("pwd"));
            $("#txtEmail").val(localStorage.getItem("Email"));
            fnLogin();
            //deviceheight=$($.mobile.activePage).css("min-height").replace("px","");
        }
    }

    function onDeviceReady() {
        console.log("Device ready");

        if(StatusBar){
            StatusBar.backgroundColorByHexString("#333");
        }

         // Parse.serverURL=parseApiAddress;
        if(typeof cordova.plugins!="undefined"){ //sabin 112412
            console.warn("cordova.plugins is defined");
            if(typeof cordova.plugins.backgroundMode!="undefined"){
                console.warn("cordova.plugins.backgroundMode is defined");
                cordova.plugins.backgroundMode.setDefaults({ text:'Tap to open.'});
                cordova.plugins.backgroundMode.enable();
            }else{
                console.warn("cordova.plugins.backgroundMode is NOT defined");
            }
        }

        if(window.ParsePushPlugin && device.platform!=='browser'){
              ParsePushPlugin.getInstallationId(function(id) {
                 // note that the javascript client has its own installation id,
                 // which is different from the device installation id.
                  console.info("device installationId: " + id);
                   $.jStorage.set('DeviceID', id);
              }, function(e) {
                  alert('error');
              });

              /*ParsePushPlugin.getSubscriptions(function(subscriptions) {
                  alert(subscriptions);
              }, function(e) {
                  alert('error');
              });

              ParsePushPlugin.subscribe('SampleChannel', function(msg) {
                  alert('OK');
              }, function(e) {
                  alert('error');
              });

              ParsePushPlugin.unsubscribe('SampleChannel', function(msg) {
                  alert('OK');
              }, function(e) {
                  alert('error');
              });*/
           }

       /*if(typeof parsePlugin!="undefined"){
            if(IsIDevice){ //In android to avoid crash Parse is already initialized from Java. Look platforms\android\src\com\bupsll\bip\bipapp.java
                try{

                    parsePlugin.initialize(parse_app_id, parse_client_id, function() {
                         console.warn("Parse initialized successfully");
                    }, function(e) {
                        alert('error');
                    });
                }catch(e){
                    console.warn("Can't be initialized");
                }
            }
            parsePlugin.getInstallationId(function(id) {
                console.warn("Installation id is "+id);
                $.jStorage.set('DeviceID', id);

            }, function(e) {
                alert('error');
            });
        }*/
        
       
        
       // $.mobile.defaultPageTransition = 'slide';
       // console.log("Device is ready");
        /**********For Push Alywas call First************
        if (IsAndroid || IsIDevice)
        {
            if(IsAndroid){
        window.plugins.pushnotification.list(
                function(r){printResult(r);},
                function(e){printError(e);}
            );
            }else{
                window.plugins.pushNotification.startNotify();
                registerAPN();
            }
        */
       // StatusBar.hide();
       // console.log("Now initializing parse with "+parse_app_id+" "+ parse_client_id);
        DeviceID = device.uuid;
        DeviceName = device.name;
     
        $.jStorage.set('DeviceName', DeviceName);
        // console.log("Parse initializing");
        // alert("Device is now ready");
      
 
        // var query = new Parse.Query(Parse.User);
        // query.find({
        //   success: function(users) {
        //     for (var i = 0; i < users.length; ++i) {
        //       console.log(users[i].get('username'));
        //     }
        //   }
        // });
        
        /**********For Push Alywas call First*************/
        document.removeEventListener("backbutton", backKeyDown, false);
        document.addEventListener("backbutton", backKeyDown, false);
    }


    function onBodyLoad() {
         //offlinehelper.loggingOut = false;
       //Parse.initialize("yRMU9gqMRJiIM8bsnwnu3BKyiOdrBhSvKGwbnDMg", "O2y5fjM2qmJxAp9dSJbthqrfq6latbWyzkoTgwZU");
        document.addEventListener("deviceready",onDeviceReady,function(){ console.log('Device ready not fired'); });
        
        if(isWebVersion==true){
            $("html").attr("id","webapp");
        }

        if (window.location.hash != "") {
            enableIScroll();
        }
         if($(window).height() < 481){
          $("body").addClass("smallSizedBody");
        }


        
        /*if(typeof parsePlugin!="undefined" && IsAndroid){
            parsePlugin.initialize(parse_app_id, parse_client_id, function() {
                 console.warn("Parse for Android initialized successfully");
                   
            }, function(e) {
                alert('error');
            });

             parsePlugin.getInstallationId(function(id) {
                console.warn("Installation id is "+id);
                $.jStorage.set('DeviceID', id);

            }, function(e) {
                alert('error');
            });
        }*/
       /*if (typeof window.MyCls !== "undefined") {
           //   alert(window.MyCls.getIdentificationNumber());  
              $.jStorage.set('DeviceID', window.MyCls.getIdentificationNumber());
        }
        if (IsIDevice){
            //alert("I am running from iphone");
                try{
                 
                     cordova.exec(
                    successCallback, errorCallback,
                    'ParsePushPlugin', 'initialize',[parse_app_id,parse_client_id]
                    );
                   
                cordova.exec(
                    installationid, errorCallback,
                    'ParsePushPlugin', 'getInstallationId',[]
                );
                }catch(error){

                        
                }

        }*/
      //  offlinehelper.checkIfRunningFirstTime(); //uncomment this line only after implementing one phone one user functionality. added by sabin 290
        $("#wipe-cache").click(offlinehelper.clearAppCache); //added by sabin 290

        filehelper.getFileVersion();
        adjustContentHeight(); //added by sabin on 28th June. See function declaration for details
    }

    var errorCallback=function(e){
        //alert('error'+e);
    }

    

    function backKeyDown(e) {
        window.scrollTo(0, 1);
        e.preventDefault();
        e.stopPropagation();
        return false;
    }

    function fnQueryStringParam(name) {
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + name + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(window.location.href);
        if (results == null)
            return null;
        else
            return results[1];
    }

    function fnQueryStringParamUrl(name, url) {
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + name + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        if (results == null)
            return null;
        else
            return results[1];
    }

    function iOSversion() {
        if (/iP(hone|od|ad)/.test(navigator.platform)) {
            // supports iOS 2.0 and later: <http://bit.ly/TJjs1V>
            var v = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/);
            return [parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)];
        }
    }

    function didUserLeaveRating(stepNum, type) {

        //type = 2: check stepNum: 3,
        //type = 1: check stepNum 2
        if (type === 1 && stepNum === 2) {
            return $("#rangeslider_1_1 div.ui-slider-bg").attr("style") == 'display:none';
            //return parseInt($('#slider-fill').val(), 10) === 0;
        }

        if (type === 2 && stepNum === 3) {
            return $("#rangeslider_2_2 div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").attr("style") == 'display:none';
            //return parseInt($('#slider-fill_2_2').val(), 10) === 0;

        }

        if (type === 2 && stepNum === 5) {
            return $("#rangeslider_2_4 div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").attr("style") == 'display:none';
            //return parseInt($('#slider-fill_2_4').val(), 10) === 0;
        }

        return false;

    }
    var showDropdown = function(element) {
        var event;
        event = document.createEvent('MouseEvents');
        event.initMouseEvent('mousedown', true, true, window);
        element.dispatchEvent(event);
    };

    $(window).bind('load', function() {
        //master changes

        $("#btnLogin").click(fnLogin);
        $("#btnVerify").click(verifyDevice); //added by sabin 290
       

        checkloginDetails();

    });
    var sliderpercentage = [7.5, 18.5, 27.5, 36.5, 45.5, 55.5, 64.5, 74, 82, 91, 105.5];
    var sliderFillpercentage = [-10.0, -2.0, 8.0, 19.0, 29.0, 39.0, 49.0, 58.0, 67.0, 75.0, 86.0];

    function updateUserTrainingTime() {
        var totalSeconds = Training.process.getTrainingTime().total,
            sec = Training.process.getTrainingTime().actualSeconds,
            min = Training.process.getTrainingTime().actualMinutes;

        $('#training_span').val(('0' + min).slice(-2) + ':' + ('0' + sec).slice(-2));

        $('#training_span').scroller(mobiscrollTimeOptions);
        $('#defaultTimeSpent').addClass('bip_hidden');
        $('#editTimeSpent').removeClass('bip_hidden');
    }


    //added by sabin 6th September >> 
    function secondToTimeformat(seconds){
         var sec_num = parseInt(seconds, 10); // don't forget the second param
         var duration = moment.duration(sec_num,"seconds");
         var hours = duration.hours();
         var minutes = duration.minutes();
         var seconds = duration.seconds();

        if (hours   < 10) {hours   = "0"+hours;}
        if (minutes < 10) {minutes = "0"+minutes;}
        if (seconds < 10) {seconds = "0"+seconds;}

        var time    = hours+':'+minutes+':'+seconds;

        return time;
    }

    //added by sabin
    function isValidUser(){
         var loginUser =  $("#txtEmail").val().trim();
         var userdetails= $.jStorage.get('userdetails');
         if(userdetails!==null){
             if(userdetails.username.toLowerCase()!=loginUser.toLowerCase()){ //Nov 29
                msgBox("Du kan inte logga in med mer än en användare på samma telefon. För att byta användare avinstallera applikationen och installera om igen.");
                throw "stop execution";
             }
         }
            
    }
    //added by sabin 6th September <<
    
    //added by sabin 290
    function verifyDevice(){

        var userdetails = $.jStorage.get('userdetails');
        debugger;
        
        $vCode = $("#verification_code").val();
        $vPwd =  $.trim($("#txtPwd").val());
        var regex = /[0-9]{6}/;
        var str = $.trim($vCode);
        var errors= "";

        if(regex.test(str)===false && $vPwd==""){
            msgBox("Invalid verification code and password");
            throw "Invalid verification code and password";
        }else if(regex.test(str)===false && $vPwd!=""){
            msgBox("Invalid verification code");
            throw "Invalid verification code";
        }else if($vPwd==""){
            msgBox("Invalid password");
            throw "Invalid password";
        }else{
              device_id = window.device.uuid;
              json = '{"verification_code":"' + $("#verification_code").val().trim() + '","password":"' + $("#txtPwd").val().trim() + '","deviceId":"' + device_id + '","tokenkey":"' + dtoken + '","identificationumber":"'+ deviceinstallationid +'","devicetype":"'+dtype+'"}';
         
        }

       
    }
;/********* Task Related Functions  ---- Training List page--******/
var Training = {
    TaskLists: [],
    TrainingLists: [],
    editedTrainingID: 0,
    editedTaskid: 0,
    reminders:[],
    feedback:[],
    hideGraph:1,
    isSaveonProgess: false,

    checksmsCode: function() {
        var userdetails = $.jStorage.get('userdetails');
        if (userdetails.code === $('#smsCode').val()) {
            Training.setTrainings();
        } else {
            $('#smserror').show();
        }
    },
    setTrainings: function() {
        //console.log('here 2');
        
        Training.isSaveonProgess = false;
        var userdetails = $.jStorage.get('userdetails');
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '"}';

        ////console.log(json);
        callWebService('activeTasks', json, function(response) {
            // alert(response.status);
            //console.log('active 3');

            if (response.status === 'ok') {
                if (response.data !== 'no data found') {
                    
                    if (response.data.length == 1) {
                        //changepage('showTraining',response.data.);
                        var taskid = "";
                        var tagtype = "";
                        var tagid = "";
                        $(response.data).each(function() {
                            taskid = this.taskid;
                            //console.log(this.tag);
                            if (this.tag == 1)
                                tagtype = "Traningsuppgift";
                            else
                                tagtype = "Smartmatning";
                            tagid = this.tag;
                        });
                        //console.log("Change page now");
                        enableIScroll();
                        Training.TaskLists = response.data;
                        // changepage('Register');
                        // 
                        //console.log("tag id is " + tagtype);

                        if (tagid == 2)

                            Training.showTraining(taskid, tagtype);

                        else
                            changepage('TrainingList');

                        $('#Register #headerTop a:first').hide()
                    } else {
                        //console.log('active tasks next');
                        changepage('TrainingList');
                        $('#Register #headerTop a:first').show()
                    }


                    enableIScroll();
                    var setTaskListsTimer = setTimeout(function(){
                        Training.TaskLists = response.data;
                        $('#lstTraining').html(Training.getTraningListHtml(1));
                        $('#lstTraining').listview('refresh');
                        $('#lstTraining2').html(Training.getTraningListHtml(2));
                        $('#lstTraining2').listview('refresh');
                        clearTimeout(setTaskListsTimer);
                        setTaskListsTimer = 0;
                    },100);
                    
                   
                    refreshScroll('TrainingList');

                } else {
                    //console.log('no data found!');
                }
            } else {
                msgBox(MESSAGE.NO_INTERNET);
            }
        });
    },
    getTraningListHtml: function(tagid) {
        var trainigHtml = [];
        var traningSlot = 5;
        var count = 0;

        console.info("getTraningListHtml called with tag id: "+tagid);

        $(Training.TaskLists).each(function() {
           //console.log(Training.getpracticeslotnumber(this.practice));
            traningSlot = Training.getpracticeslotnumber(this.practice);
            console.info("THIS = "+JSON.stringify(this));
            if (this.tag == tagid || this.tag == 3) {
                count++;
                if (tagid == 1)
                    tagtype = "Traningsuppgift";
                else
                    tagtype = "Smartmatning";
                trainigHtml.push('<li data-role="" data-taskid="' + this.taskid + '" onclick="Training.showTraining(' + this.taskid + ',\'' + tagtype + '\');">');
                trainigHtml.push('<a href="javascript:void(0);">' + this.heading + '</a>');
                trainigHtml.push('<span class="sectioned box-size-border">');
                var i;
               
                for (i = 1; i <= traningSlot; i++) {

                    if (i <= this.practice) {
                        trainigHtml.push('<span class="section green">&nbsp;</span>');
                    } else {
                        trainigHtml.push('<span class="section ">&nbsp;</span>');
                    }
                }

                trainigHtml.push('</span>');
                trainigHtml.push('</li>');
            }
        });

        if (tagid == 1 && count != 0) {
            $('#otherLst').show();
        }

        if (tagid == 2 && count == 0) {

            $('.tag2').hide();
            $('.tag1 .hidethis').css('display', 'block');

        } else if (tagid == 2 && count != 0) {
            $('#otherLst').hide();
            $('.tag2').show();
            $('.tag1 .hidethis').css('display', 'none');
        }

        if (tagid == 1 && count == 0) {
            $('.tag1').hide();


        } else if (tagid == 1 && count != 0) {
            $('.tag1').show();

        }
        $('tag3').hide();

        return trainigHtml.join('');
    },
    getpracticeslotnumber: function(practice) {
        var traningSlot = 5;
        if (practice >= 5) {
            if (practice < 20) {
                traningSlot = (parseInt(practice / 10, 10) + 1) * 10;
            } else if (practice >= 20 && practice < 40) {
                traningSlot = 40;
            } else if (practice >= 40 && practice < 100) {
                traningSlot = 100;
            } else if (practice >= 100) {
                traningSlot = 145;
            }
        }
        return traningSlot;
    },
    showTraining: function(taskid, tagtype) {
        //Disable play button in pain reporting at startup, later its enabled accordingly later.
        //Training.activateDeactivateTask({"hour":"00", "minute":"00"});


        console.log("u are here " + taskid + " " + tagtype);
        Training.isSaveonProgess = false;
        $('.rangeslider a').hide();

        // $('#slider-fill_2_2').change();
        //$('#slider-fill_2_4').change();

        $('#txtComments').val('');
        Training.editedTaskid = taskid;
        Training.editedTrainingID = 0;
        ////console.log(Training.TaskLists);
        ////console.log("taskid is " + taskid);
        // //console.log("Array is " + Training.TaskLists);
        var tasks = $.grep(Training.TaskLists, function(e) {
            return parseInt(e.taskid, 10) === parseInt(taskid);
        });

        var trainingData = $.parseJSON($.jStorage.get('userdetails').training);
        
        switch (parseInt(trainingData.type, 10)) {

            //case 1:
            //case 2:
            //    //console.log('executed for common');

            case 1:
                $('#training_type_1_anxiety').text(trainingData.anxiety);
                $('#training_type_1_next').text(trainingData.txt_button);
                $('#Register .checkicon').removeClass('start');

                break;

            case 2:
                //start button has different image
                $('#Register .checkicon').addClass('start');
                var trainingStep, popupID;
                for (trainingStep = 1; trainingStep < 6; trainingStep++) {

                    $popupIDSelector = $('#TrainingZone_2_' + trainingStep);

                    if (trainingData[trainingStep].hasOwnProperty('headline')) {

                        $popupIDSelector.find('.popupTitle').text('' + trainingStep + '. ' + trainingData[trainingStep].headline);

                    }


                    if (trainingData[trainingStep].hasOwnProperty('image')) {
                        $aniImage = trainingData[trainingStep].image;
                        if(window.cordova){
                            $imgFile = $aniImage.split("/").pop();
                           
                            if(filehelper.checkFileExist(cordova.file.dataDirectory + $imgFile)){
                                $aniImage = cordova.file.dataDirectory + $imgFile+"?rand="+Math.random();
                            }
                        }else{
                             $aniImage = trainingData[trainingStep].image;
                        }
                        $popupIDSelector.find('.popUpimg img').attr('src', $aniImage);

                    }

                    if ((trainingStep == 2 || trainingStep == 4)) {

                        $popupIDSelector.find('#subTitle').text(trainingData[trainingStep].text);

                        if (trainingData[trainingStep].hasOwnProperty('ten')) {

                            $popupIDSelector.find('.range_label_zero').text('0 = ' + trainingData[trainingStep].zero);

                        }
                        if (trainingData[trainingStep].hasOwnProperty('zero')) {
                            $popupIDSelector.find('.range_label_ten').text('10 = ' + trainingData[trainingStep].ten);
                        }

                    }

                    if (trainingData[trainingStep].hasOwnProperty('text')) {
                        //console.log(trainingData[trainingStep].text);
                        $popupIDSelector.find('.trainingDContent').html(displayHtml(trainingData[trainingStep].text));

                    }

                    if (trainingData[trainingStep].hasOwnProperty('button')) {

                        $popupIDSelector.find('.next').text(trainingData[trainingStep].button);

                    }


                }


                break;

        }

        $('.checkicon').removeClass('deactivateTask');


        if (navigator.userAgent.toLowerCase().indexOf("android") > -1) {
            $(".checkicon")
                .bind("touchstart", function() {
                    $(this).addClass("fake-active");
                })
                .bind("touchend", function() {
                    $(this).removeClass("fake-active");
                })
                .bind("touchcancel", function() {
                    // sometimes Android fires a touchcancel event rather than a touchend. Handle this too.
                    $(this).removeClass("fake-active");
                });
        }

        $('.checkicon div span').text("");
        ////console.log('Working');
        // //console.log(tasks.length);
        if (tasks.length > 0) {

            var task = tasks[0];
           
            task.reminder=Training.reminders;
            task.first_reminder=Training.reminders[0];

            var userdetails = $.jStorage.get('userdetails');

          //  if (task.hide_graph == "true") {
            if (Training.hideGraph == 1) {
                ////console.log("true result");
                $('.taskgraph').css('display', 'none');
            } else {
                ////console.log("false result");
                $('.taskgraph').css('display', 'block');
            }

            ////console.log(task.reminder);
            // //console.log("tag type is word "+tagtype);
            if (task.tag == 2 || task.tag == 3) {
                //console.log("task tag type is" + task.tag);
                $('#Register .checkregister').addClass(tagtype);
                $('#TrainingZone_1_2 .trainingZoneContent .popupContent .popUpsectioned:nth-child(3)').hide();
                $('#TrainingZone_1_2 .trainingZoneContent .popupContent .popUpsectioned:nth-child(5)').hide();
            } else {
                $('#Register .checkregister').removeClass("Smartmatning");
                $('#TrainingZone_1_2 .trainingZoneContent .popupContent .popUpsectioned:nth-child(3)').show();
                $('#TrainingZone_1_2 .trainingZoneContent .popupContent .popUpsectioned:nth-child(5)').show();
            }

            $('.checkicon').attr("data-tag",task.tag);

            //if (task.hide_graph == "true") {
           if (userdetails.hide_graph == 1) {
                ////console.log("true result");
                $('.taskgraph').css('display', 'none');
            } else {
                ////console.log("false result");
                $('.taskgraph').css('display', 'block');
            }

            if (tagtype == 'Smartmatning') {
                //console.log("Hide number " + task.hide_number);
                var userdetails = $.jStorage.get('userdetails');

                /*console.warn(task.Estimates);
                console.warn("TASK = "+JSON.stringify(task));*/
                var totalestimates =0;
                if(task.training!=undefined && task.training!="" && task.training.length>0){
                    totalestimates = task.training.length;
                }
                var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","taskid":"' + task.taskid + '","lastupdatedate":""}';
                // //console.log(task.Estimates);
                ////console.log(task.Estimates.length);
                $('#estimated_smartning span:last').text(totalestimates);
                $('#noofdays_smartning span:last').text(task.TodayDays);

                if (task.hide_number == "true") {
                    ////console.log("true result");
                    $('.smartning_stat').css('display', 'none');
                } else {
                    ////console.log("false result");
                    $('.smartning_stat').css('display', 'block');
                }

                $('.Traningsuppgift_show').hide();
                // d:
                $('.major-content-box').addClass('smattningdesign');

               /* callWebServiceLive("getservertime", "{}", function(response) {
                   
                   var d =  {
                        hour: response.data.hour,
                        minute: response.data.minute
                   };

                   Training.activateDeactivateTask(d); // Activate deactivate task only if task is of tag2
                });*/
                this.activateDeactivateTask();
                

            } else {
                //$('.taskgraph').css('display', 'block');
                $('.Traningsuppgift_show').show();
                $('.smartning_stat').hide();
                $('.major-content-box').removeClass('smattningdesign');

            }
           
            //console.log('Working');
            var traningSlot = 5;
            $('#TaskHeading,#taskTitle,#perweekgraphHeading,#trainingRating').html(task.heading);
            //$('#divpopupTitle').html(task.anxiety);
            $('#divpopuprange').html('<span class="range_label_ten">10 =  ' + trainingData.ten + '</span> <span class="range_label_zero">0 = ' + trainingData.zero + '</span>');
            // $('#divpopuprange').html('10 = ' + trainingData.ten + ' 0 = ' + trainingData.zero);
            $('#subTitle').text(trainingData.text);
            var progressHtml = [];

            traningSlot = Training.getpracticeslotnumber(task.practice);

            /*var i;
            for (i = 1; i <= traningSlot; i++) {
                if (i <= task.practice) {
                    progressHtml.push('<span class="section green">&nbsp;</span>');
                } else {
                    progressHtml.push('<span class="section">&nbsp;</span>');
                }
            }*/

            $('#progressbar').html(progressHtml.join(''));

            $('#Register .checkicon').removeClass('full');
            $('#Register .checkicon').addClass('unchecked');


            Training.editedTrainingID = 0;
            $('#savetraining').unbind('click');
            $('#savetraining').click(function() {
                Training.saveTraining(taskid);
            });

            $('#savetraining2').unbind('click');
            $('#savetraining2').click(function() {
                Training.saveTraining(taskid);
            });

            changepage('Register');
            enableIScroll();
            refreshScroll('Register');
            setTimeout(function() {
                refreshScroll('Register');
            }, 10);
        }
    },
    activateDeactivateTask:function(){
                var played_count=0;
                 // Initializing date to check the status of task
                var d = new Date();
                var hour = d.getHours();
                var minute = d.getMinutes();
               /* var hour = serverTime.hour;
                var minute = serverTime.minute;*/

                var prevrecordedtime = "";
                var activatetask = false;
                var activatedtime = "";
                var lastplayed=Training.getTodaysLastTrainedTime();
                var reviewdReminders=[];
                /*$(Training.reminders).each(function(){

                    console.log(this);

                })*/
                for(i=0;i<Training.reminders.length;i++){

                        var time=Training.reminders[i];
                        splitTime=time.split(":");
                        if(parseInt(splitTime[0])>parseInt(lastplayed.h))
                            reviewdReminders.push(time);
                        else if(parseInt(splitTime[0])==parseInt(lastplayed.h) && parseInt(splitTime[1])>parseInt(lastplayed.m))
                            reviewdReminders.push(time);
                        else
                            played_count++;
                }
                
                // Set first reminder time as the first time to activate task
                var nextTimeToActivate = reviewdReminders[0];

                //Get the first reminder of task from reminder json -- Required because there may be null or undefined in reminder list 
                if (reviewdReminders != null) {

                    var cc = 0;
                    $(reviewdReminders).each(function(i, e) {
                        
                        if (cc == 0 && e != undefined) {

                            nextTimeToActivate = e;
                            cc++;
                        }
                    });
                

                }
  
                var activatecount = 0;
                

                $(reviewdReminders).each(function(i, e) { // Loop over task reminder
                    var time = e;
                    
                    if (time == null || time == "")// No need to check if time is null or blank
                        return true;

                    var timesplittednow = time.split(":"); // Split hour and minute of time

                    if (activatecount == 1) { //set activate count to 0 if it is 1
                        activatecount = 0;
                    }

                    // Comparing current hour and minute with task reminder
                    if (hour > timesplittednow[0]) {  //if current hour is greater than current reminder activate task  
                        activatetask = true;
                        activatedtime = time;
                        //activatecount=1;
                    } else if (hour == timesplittednow[0] && minute >= timesplittednow[1]) { // If hour is same and minute is greater then also activate task
                        activatetask = true;
                        activatedtime = time;

                    }else{ //else set the the time as next time to activate
                        if(nextTimeToActivate=="")
                            nextTimeToActivate=time;
                    }
                    
                    var timesplittedprev = prevrecordedtime.split(":");

                    prevrecordedtime = time;
                })
               

                if (activatetask == true) { // If task got activated from above mechanism show activated status and page
                    if ($('.played_time').length == 0)
                        $('.checkregister').after("<span class='played_time' style='display:none'>" + activatedtime + "</span>");
                    else
                        $('.played_time').text(activatedtime);
                }
                if (activatetask == false) { // Else show deactivated statsus and page
                    if (activatecount == 1 && activatedtime != "")
                        nextTimeToActivate = activatedtime;
                    // nextTimeToActivate=$('.nextTimeToActivate').text();
                    $('.checkicon').addClass('deactivateTask');
                    if(reviewdReminders.length==0)
                        nextTimeToActivate=Training.reminders[0];
                    else
                        nextTimeToActivate=reviewdReminders[0];
                    $('.deactivateTask div span').html("<p>Du har gjort <br />skattning " + played_count + " </p><p>Nästa skattning<br /> kl " + nextTimeToActivate + "</p>");// Give information to user when this task is going to activate next
                    // $('.checkregister').css('background-image','../images/grey_button_BIPapp.png');
                } else {
                    $('.checkicon div span').text('');
                    $('.checkicon').removeClass('deactivateTask');
                }


    },
     getTodaysLastTrainedTime:function(){
        nowhigh={m:0,h:0};
        today=moment().format('YYYY-MM-DD');
        tommorow=moment().add(1,"days").format('YYYY-MM-DD');
        
        $(Training.TaskLists).each(function(){
            if(this.tag==2){
                $self=this;
                if($self.training!=undefined && $self.training.length>0){
                  
                   /* $($self.training).each(function(){
                        trainingdatetime=moment(this.trainingdatetime).format('YYYY-MM-DD');
                        if(trainingdatetime==today){
                            m=moment(this.trainingdatetime).format("mm");
                            h=moment(this.trainingdatetime).format("HH");
                            if(h>nowhigh.h)
                            {
                                nowhigh.m=m;
                                nowhigh.h=h;
                            }else if(h==nowhigh.h && m>nowhigh.m){
                                nowhigh.m=m;
                                nowhigh.h=h;
                            }
                        }

                    })*/
                    
                      var trn=$self.training[0];
//                      console.warn("TRAINING: "+JSON.stringify(trn));
                        trainingdatetime=moment(trn.trainingdatetime).format('YYYY-MM-DD');
                        if(trainingdatetime==today){
                            m=moment(trn.trainingdatetime).format("mm");
                            h=moment(trn.trainingdatetime).format("HH");
                            if(h>nowhigh.h)
                            {
                                nowhigh.m=m;
                                nowhigh.h=h;
                            }else if(h==nowhigh.h && m>nowhigh.m){
                                nowhigh.m=m;
                                nowhigh.h=h;
                            }
                        }
                 }
               
            }

        })
        //console.log(nowhigh);
        return(nowhigh);
    },
    saveTraining: function(taskid) {
        if (Training.isSaveonProgess === false) {
            Training.isSaveonProgess = true;
            var userdetails = $.jStorage.get('userdetails');

            /*var json = '{"userid":"' + userdetails.user_id + '","":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","taskid":"' + taskid + '",';
            json += '"trainingId":"' + Training.editedTrainingID + '","trainingdatetime":"' + $("#practicedate").val() + '","estimatedvalue":"' + $('#slider-fill').val() + '",';
            json += '"comment":"' + checkinput($("#txtComments").val()) + '"}';*/
            played_time = "";
            if ($('.played_time').length > 0) {

                played_time = $('.played_time').text();
            }
            var submit_object = {
                userid: userdetails.user_id,
                tokenkey: userdetails.tokenkey,
                deviceId: DeviceID,
                taskid: taskid,
                trainingId: Training.editedTrainingID,
                type: Training.process.type(),
                played_time: played_time

            };

            switch (submit_object.type) {
                case 1:
                    submit_object.trainingdatetime = $("#practicedate").val();
                    submit_object.estimatedvalue = $('#slider-fill').val();
                    submit_object.comment = checkinput($("#txtComments").val());
                    submit_object.training_duration="";
                    submit_object.estimatedvalue_end="";

                    break;
                case 2:
                    submit_object.estimatedvalue = $('#slider-fill_2_2').val();
                    submit_object.estimatedvalue_end = $('#slider-fill_2_4').val();
                    submit_object.training_duration = Training.process.sec;
                    submit_object.trainingdatetime = Training.process.completedTime;
                    submit_object.comment="";
                    break;
            }


            var json = JSON.stringify(submit_object);
            var trainingcount=0;
            // //console.log(json);

                Training.isSaveonProgess = false;
                //if (response.status === "ok") {
                  
                    var tag=0;
                     $(Training.TaskLists).each(function(index) {
                       
                        if (parseInt(this.taskid) == taskid) {
                            //console.log("Hitting");
                            tag=this.tag;
                        }else{
                            
                        }
                    });
                   
                     if(tag==2){
                        $(Training.TaskLists).each(function(index) {
                              //  //console.log("loop task id " + parseInt(this.taskid, 10) + " Real taskid " + taskid);

                                if (this.taskid == taskid) {
                                    ////console.log("Task id is " + this.taskid + " Current estimate is " + this.Estimates);
                                    this.Estimates++;
                                }

                                var count = 0;
                                $self = this;
                              //  //console.log(this);
                                var reminderfound = 0;
                                var remcount = 0;
                      

                        //         $($self.reminder).each(function(i, e) {
                        //             ////console.log("REminder "+e);
                        //             if (played_time != "" && reminderfound == 0 && e != played_time) {
                        //                 //$self.reminder[count] = null;
                        //                 remcount++;
                        //                 delete $self.reminder[count];
                        //             }
                        //             if (e == played_time) {
                        //                 //console.log(e);
                        //                 remcount++;
                        //                 delete $self.reminder[count];
                        //                 //$self.reminder[count] = null;
                        //                 reminderfound = 1;

                        //             }
                        //             count++;
                        //              ////console.log($self.reminder);
                        //         });
                        //         console.log($self.reminder);
                        // ////console.log(remcount);
                        //         $self.played_count += remcount;

                        });


                     }
                     var lasttrainingid=0;
                     var newtrainingid="";
                   ////console.log(Training.TaskLists);
                    if (Training.editedTrainingID === 0) {
                        var totalcount=Training.TaskLists.length;
                        $(Training.TaskLists).each(function(index) {
                            var count = 0;
                            $self = this;
                            //console.log(" HIT1 " + this);

                            // $self.Estimates++;

                            if (parseInt($self.taskid, 10) === taskid) {
                                trainingcount=parseInt(this.training.length)+1;
                                var lastinserted="";
                               
                                trainingid=0;
                                if(this.training.length!=undefined && this.training.length!=0)
                                    lasttrainingid=this.training[(this.training.length-1)].app_training_id;
                                else
                                    lasttrainingid=0;
                                newtrainingid=trainingid;
                                var nowtime=moment().format("YYYY-MM-DD");
                                var jsond={ 'app_training_id':(lasttrainingid+1),"trainingId":trainingid,"trainingdatetime":submit_object.trainingdatetime,"estimatedvalue":submit_object.estimatedvalue,"estimatedvalue_end":submit_object.estimatedvalue_end,"training_duration":null,"type":"1","comment":submit_object.comment,"edited":"0"};
                                if($self.training==null)
                                        $self.training=[];
                                $self.practice += 1;
                                 if(this.training.length!=undefined && this.training.length!=0)
                                        $self.training.unshift(jsond);
                                else{
                                    $self.training=[];
                                    $self.training.push(jsond);
                                }
                                traningSlot = Training.getpracticeslotnumber($self.training.length);
                                var progressHtml = new Array();
                                for (var i = 1; i <= traningSlot; i++) {
                                    if (i <= $self.training.length) {
                                        progressHtml.push('<span class="section green">&nbsp;</span>');
                                    } else {
                                        progressHtml.push('<span class="section">&nbsp;</span>');
                                    }
                                }
                                $("#progressbar").html(progressHtml.join(''));

                                $("#lstTraining li[data-taskid=" + taskid + "] .sectioned.box-size-border").html(progressHtml.join(''));
                                $("#lstTraining2 li[data-taskid=" + taskid + "] .sectioned.box-size-border").html(progressHtml.join(''));
                                //console.log(" HIT2 " + this);
                                // return false;
                            }
                            if (--totalcount==0) {
                                    //active_tasks.data.task=Training.TaskLists;
                                    console.log("Active task data are : ");
                                  //  console.log(active_tasks);
                                    // updateDB('active_tasks',active_tasks,function(){  console.log("Success updating activetask"); });

                            };
                        });
                    }else{
                           
                            //active_tasks.data.task=Training.TaskLists;
                            console.log("Active task else data are : ");
                            //console.log(active_tasks);
                            // updateDB('active_tasks',active_tasks,function(){  console.log("Success updating activetask"); });

                    }



                    var toadd={
                               
                                'training_id':newtrainingid,
                                'task_id':taskid,
                                'trainingDateTime':submit_object.trainingdatetime,
                                'estimatedValue':submit_object.estimatedvalue,
                                'trainingDuration':submit_object.training_duration,
                                'type':Training.process.type(),
                                'comment':submit_object.comment,
                                'edited':0,
                                'estimatedValueEnd':submit_object.estimatedvalue_end
                            };

                    callWebService('saveTraining', toadd, function(response) {
                        console.log("Training saved in local database");
                    });


                    //active_tasks.data.task=Training.TaskLists;
                    console.log("Active task data are : ");
                  //  console.log(active_tasks);
                    // updateDB('active_tasks',active_tasks,function(){  console.log("Success updating activetask"); });

                    var estimate=submit_object.estimatedvalue;
                    var msg="";
                    console.log(trainingcount);
                    for(i=0;i<Training.feedback.rating.length;i++){
                        if((i+1)==Training.feedback.rating.length)
                                msg=Training.feedback.message[i];
                        else if(trainingcount<=Training.feedback.rating[i]){
                            console.log("yeah");
                                msg=Training.feedback.message[i];
                                break;
                        }

                    }
                    console.log(i);
                    if (($('#TrainingList #bodyContent1 li').length - 2) == 1) {
                       // $('#TrainingList #bodyContent1 li:first').trigger('click')
                        showalert(msg,'clicktrigger');
                        //showalert(response.data.message);

                    } else{
                     //   changepage('TrainingList');
                        showalert(msg,'TrainingList');
                    }


                // } else {
                //     msgBox(MESSAGE.NO_INTERNET);
                // }
           
        }
    },
    buildTrainingList: function(trainings) {
        Training.TrainingLists = trainings;
        var htmlArray = [];
        $(trainings).each(function() {
            //htmlArray.push('<li data-onclick="Training.editTraining(' + this.trainingId + ');"><a data-href="javascript:void(0);" href="#tidigare_review" class="calendar-icon">' + this.trainingdatetime.replace(' ', ', ') + '</a></li>');
            var trainingid=this.trainingId;
            htmlArray.push('<li onclick="Training.reviewTraining(\'' + this.app_training_id + '\');"><a href="javascript:void(0);" class="calendar-icon">' + this.trainingdatetime.replace(' ', ', ') + '</a></li>');
        });
        htmlArray.push('<li style="visibility:hidden;"><a href="javascript:void(0);" class="calendar-icon">2013-07-12, 14:54</a></li>');
        htmlArray.push('<li style="visibility:hidden;"><a href="javascript:void(0);" class="calendar-icon">2013-07-12, 14:54</a></li>');
        htmlArray.push('<li style="visibility:hidden;"><a href="javascript:void(0);" class="calendar-icon">2013-07-12, 14:54</a></li>');
        $('#Tidigare .mar-top-12').html(htmlArray.join(''));
        $('#Tidigare .mar-top-12').listview('refresh');

        refreshScroll('Tidigare');
    },
    showTrainings: function() {
        Training.isSaveonProgess = false;

        // var jobAlreadyStarted = Training.showTrainings_doing || false;
        // if (jobAlreadyStarted) {
        //     ////console.log('fired twice');
        //     //lock for multiple
        //     return false;
        // }
        Training.showTrainings_doing = true;



        var userdetails = $.jStorage.get('userdetails');
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","taskid":"' + Training.editedTaskid + '","lastupdatedate":""}';
        //console.log(json);
        callWebService('getOldTrainings', json, function(response) {
            if (response.status === 'ok') {
                changepage('Tidigare');
                enableIScroll();

                Training.buildTrainingList(response.data);

            } else if (response.status === 'error') {
                msgBox(response.message);
            } else {
                msgBox(MESSAGE.NO_INTERNET);
            }
        }, function() {

            Training.showTrainings_doing = false;
        });
    },
    editTraining: function(trainingId) {
        Training.editedTrainingID = trainingId;
        Training.isSaveonProgess = false;
        $('#Register .checkicon').click();
    },

    process: {

        type: function() {

            if ($.jStorage.get('userdetails').training) {

                return parseInt($.parseJSON($.jStorage.get('userdetails').training).type, 10);

            } else {
                //junk for testing only!!!
                var random = Math.floor(Math.random() * 2) + 1;
                var data = $.jStorage.get('userdetails');
                data.rating = random;

                data.tokenkey=$.jStorage.get('bip_jwt');
                
                $.jStorage.set('userdetails', data);
                return random;
            }

        },

        bindEvents: function() {
            $('.trainingZoneContent').on('click', '.abort', Training.process.abort);
            $('.trainingZoneContent').on('click', '.next', Training.process.nextStep);
            //$('#defaultTimeSpent').removeClass('bip_hidden');
            //$('#editTimeSpent').addClass('bip_hidden');
            $(window).on('BIP.abortstep', Training.process.onAbortProcess);

        },
        unbindEvents: function() {
            $('.trainingZoneContent').off('click', '.abort', Training.process.abort);
            $('.trainingZoneContent').off('click', '.next', Training.process.nextStep);
            $(window).off('BIP.abortstep', Training.process.onAbortProcess);
        },
        scrolls: [],
        init: function() {
            Training.adminSettings = $.jStorage.get('userdetails');
            Training.process.stopwatch = new Stopwatch();


            Training.process.sec = 0;
            Training.process.unbindEvents();
            Training.process.bindEvents();
            Training.process.currentStep = 1;
            Training.process.gotoStep(1);
            $('#showstopwatch').text('00:00');



        },

        html: {

            type1: function(stepNum) {
                var popHtml = '<div class="popupContent box-size-border border-radius">';
                switch (stepNum) {
                    case 1:
                        popHtml += '<div class="fixedtop">\
                    <span class="steps">1 av 3</span>\
                    <a href="javascript:void(0);" class="abort border-radius red-gradient">X</a>\
                    </div>\
                    <div class="popupTitle" id="divpopupTitle">Hur kändes det?</div>\
                    <div class="range" id="divpopuprange">0 =inget (ångest, rädsla, obehag)<br />10=maximalt</div>\
                    <div class="rangeslider">\
                    <div class="numtext">\
                    <div class="textbar">10</div>\
                    <div class="textbar">9</div>\
                    <div class="textbar">8</div>\
                    <div class="textbar">7</div>\
                    <div class="textbar">6</div>\
                    <div class="textbar">5</div>\
                    <div class="textbar">4</div>\
                    <div class="textbar">3</div>\
                    <div class="textbar">2</div>\
                    <div class="textbar">1</div>\
                    <div class="textbar">0</div>\
                    </div>\
                    <input type="range" name="slider-fill" id="slider-fill" value="0" min="0" max="10" data-highlight="true" sliderorientation="verticalInverted" step="1" />\
                    <span id="slider-fill-span"></span>\
                    </div>\
                    <div class="popupbuttons">\
                    <a href="javascript:void(0);" class="next border-radius green-gradient">Nästa</a>\
                    </div>';
                        break;

                    case 2:
                        popHtml += '<div class="fixedtop">\
                    <span class="steps">2 av 3</span>\
                    <a href="javascript:void(0);"  data-onclick="Training.process.abort();" class="abort border-radius red-gradient">X</a>\
                    </div>\
                    <div class="popupTitle" id="divpopupTitle">title 2 </div>\
                    <p>RatingType1: content 2</p>\
                    <div class="popupbuttons">\
                    <a href="javascript:void(0);" data-onclick="Training.process.nextStep();" class="next border-radius green-gradient">Nästa</a>\
                    </div>\
                    </div>';
                        break;

                    case 3:
                        popHtml += '<div class="fixedtop">\
                    <span class="steps">3 av 3</span>\
                    <a href="javascript:void(0);" data-onclick="Training.process.abort();" class="abort border-radius red-gradient">X</a>\
                    </div>\
                    <div class="popupTitle" id="divpopupTitle">title3 </div>\
                    <p>RatingType1: content 3</p>\
                    <div class="popupbuttons">\
                    <a href="javascript:void(0);" data-onclick="Training.process.nextStep();" class="next border-radius green-gradient">Nästa</a>\
                    </div>\
                    </div>';
                        break;
                }
                popHtml += '</div>';
                return popHtml;

            },
            type2: function(stepNum) {
                var popHtml = '<div class="popupContent box-size-border border-radius">';
                switch (stepNum) {
                    case 1:
                        popHtml = '<div class="popupContent box-size-border border-radius"  style="height: 360px">\
                    <div class="fixedtop">\
                    <span class="steps">1 av 5</span>\
                    <a href="#Register" class="abort border-radius red-gradient">X</a>\
                    </div>\
                    <div class="popupTitle newTitle" id="divpopupTitle">1. Förnbered dig</div>\
                    <p>RatingType2: content 1</p>\
                    <div class="popupbuttons">\
                    <a href="javascript:void(0);" data-onclick="Training.process.nextStep();" class="next border-radius green-gradient">Fortsätt</a>\
                    </div>\
                    </div>';
                        break;

                    case 2:
                        popHtml += '<div class="fixedtop">\
                    <span class="steps">2 av 5</span>\
                    <a href="#Register" class="abort border-radius red-gradient">X</a>\
                    </div>\
                    <div class="popupTitle newTitle" id="divpopupTitle">2. Skatta start</div>\
                    <div class="range" id="divpopuprange">0 =inget (ångest, rädsla, obehag)<br />10=maximalt</div>\
                    <div class="rangeslider">\
                    <div class="numtext">\
                    <div class="textbar">10</div>\
                    <div class="textbar">9</div>\
                    <div class="textbar">8</div>\
                    <div class="textbar">7</div>\
                    <div class="textbar">6</div>\
                    <div class="textbar">5</div>\
                    <div class="textbar">4</div>\
                    <div class="textbar">3</div>\
                    <div class="textbar">2</div>\
                    <div class="textbar">1</div>\
                    <div class="textbar">0</div>\
                    </div>\
                    <input type="range" name="slider-fill" id="slider-fill" value="0" min="0" max="10" data-highlight="true" sliderorientation="verticalInverted" step="1" />\
                    <span id="slider-fill-span"></span>\
                    </div>\
                    <div class="popupbuttons">\
                    <a href="javascript:void(0);" class="next border-radius green-gradient">Börja träna</a>\
                    </div>';
                        break;

                    case 3:
                        popHtml = '<div class="popupContent box-size-border border-radius"  style="height: 360px">\
                    <div class="fixedtop">\
                    <span class="steps">3 av 5</span>\
                    <a href="#Register" class="abort border-radius red-gradient">X</a>\
                    </div>\
                    <div class="popupTitle newTitle" id="divpopupTitle">3. Träna nu</div>\
                    <div class="popUptext">\
                    <p class="popUpimg"><img style="width:200px;" src="http://192.168.1.117/bip/gif/training_animation_1.gif" alt="" /></p>\
                    <p>Troligtvis känns det rätt besvärligt just nu. Men tänk på att ångesten sjunker efter ett tag, som i ”löken”-modellen.Försök att träna på din uppgift till ångesten har sjunkit till hälften.\
                    </p>\
                    </div>\
                    <div class="popupbuttons">\
                    <a href="javascript:void(0);" class="next border-radius green-gradient">Avsluta träning</a>\
                    </div>\
                    </div>';
                        break;

                    case 4:
                        popHtml += '<div class="fixedtop">\
                    <span class="steps">4 av 5</span>\
                    <a href="#Register" class="abort border-radius red-gradient">X</a>\
                    </div>\
                    <div class="popupTitle newTitle" id="divpopupTitle">4. Skatta slut</div>\
                    <div class="range" id="divpopuprange">0 =inget (ångest, rädsla, obehag)<br />10=maximalt</div>\
                    <div class="rangeslider">\
                    <div class="numtext">\
                    <div class="textbar">10</div>\
                    <div class="textbar">9</div>\
                    <div class="textbar">8</div>\
                    <div class="textbar">7</div>\
                    <div class="textbar">6</div>\
                    <div class="textbar">5</div>\
                    <div class="textbar">4</div>\
                    <div class="textbar">3</div>\
                    <div class="textbar">2</div>\
                    <div class="textbar">1</div>\
                    <div class="textbar">0</div>\
                    </div>\
                    <input type="range" name="slider-fill" id="slider-fill" value="0" min="0" max="10" data-highlight="true" sliderorientation="verticalInverted" step="1" />\
                    <span id="slider-fill-span"></span>\
                    </div>\
                    <div class="popupbuttons">\
                    <a href="javascript:void(0);" class="next border-radius green-gradient">Godkänn tid</a>\
                    </div>';
                        break;

                    case 5:
                        popHtml = '<div class="popupContent box-size-border border-radius"  style="height: 360px">\
                    <div class="fixedtop">\
                    <span class="steps">5 av 5</span>\
                    <a href="#Register" class="abort border-radius red-gradient">X</a>\
                    </div>\
                    <div class="popupTitle newTitle" id="divpopupTitle">5. Godkänn tid</div>\
                    <div class="popUptext">\
                    <p>Troligtvis känns det rätt besvärligt just nu. Men tänk på att ångesten sjunker efter ett tag, som i ”löken”-modellen. Försök att träna på din uppgift till ångesten har sjunkit till hälften.\
                    </p>\
                    <p class="popUptid">\
                    <span>17 min</span>\
                    <br />\
                    <a href="#popUp7" class="border-radius"> Ändra tid</a>\
                    </p>\
                    </div>\
                    <div class="popupbuttons">\
                    <a href="javascript:void(0);" class="next border-radius green-gradient">Klart</a>\
                    </div>\
                    </div>';
                        break;
                }
                popHtml += '</div>';
                return popHtml;
            }

        },


        gotoStep: function(stepNum, reverse) {
            if ($('.checkicon').hasClass('deactivateTask'))
                return false;
            var ratingType = Training.process.type(),
                reverse = reverse || false;
            isValidStep = false;

            if (didUserLeaveRating(stepNum, ratingType)) {
                msgBox('Du måste göra en skattning innan du kan gå vidare');
                return false;
            }


            var newPage = 'TrainingZone_' + ratingType + '_' + stepNum;

            if (1 === ratingType) {
                if (stepNum >= 1 && stepNum <= 3) {
                    isValidStep = true;
                    //$('#trainingZoneContent').html(Training.process.html.type1(stepNum));
                    reverse ? backpage(newPage) : changepage(newPage, "none");

                }
            } else {
                if (stepNum >= 1 && stepNum <= 5) {
                    isValidStep = true;
                    //$('#trainingZoneContent').html(Training.process.html.type2(stepNum));
                    reverse ? backpage(newPage) : changepage(newPage, "none");
                }
            }

            if (isValidStep) {

                Training.process.currentStep = stepNum;


                if (stepNum == 3) {
                    //enableIScroll();
                    setTimeout(function() {
                        //console.log(Training)
                        if (typeof Training.process.scrolls['2_3'] == 'object') {

                            Training.process.scrolls['2_3'].refresh();


                        } else {

                            Training.process.scrolls['2_3'] = new iScroll('itextScroll');
                        }
                        //console.log('iscroll enabled');

                    }, 100);
                    //var myScroll = new iScroll($('#TrainingZone_2_3 .scrollwrapper')[0]);
                }

                //$('#trainingZoneContent [data-role=button]').button();
                //$('#trainingZoneContent  input[type="range"]').slider();//.slider("refresh");
            }
        },

        nextStep: function() {
            var cpageid = $($.mobile.activePage).attr("id"),
                currentStep = cpageid.split('_')[2];
            Training.process.currentStep = parseInt(currentStep, 10) + 1;
            Training.process.gotoStep(Training.process.currentStep);

        },

        previousStep: function(event) {
            //console.log('previous step fired');
            //Training.process.currentStep -= 1;

            var cpageid = $($.mobile.activePage).attr("id");
            var currentStep = cpageid.split('_')[2];

            Training.process.currentStep = parseInt(currentStep, 10) - 1;
            Training.process.gotoStep(Training.process.currentStep, true);

        },

        abortTidigare: function(event) {
            Training.editedTrainingID = 0;
            backpage('Tidigare', event, 'slide');
        },

        abort: function(event) {

            confirmBox('Är du säker på att du vill avbryta?', function(button) {

                if (button == 1) {
                    var returnpage;
                    if (Training.editedTrainingID > 0) {
                        returnpage = 'Tidigare';
                        Training.editedTrainingID = 0;
                    } else {
                        returnpage = 'Register';
                    }
                    $(window).trigger('BIP.abortstep', Training.process.currentStep);
                    backpage(returnpage, event);
                } else {
                    event.preventDefault();
                }
            });

        },

        /**
         * Function fired when the abort (x) is clicked on training steps
         * @param  {[type]} event   [description]
         * @param  {[type]} stepNum [description]
         * @return {[type]}         [description]
         */
        onAbortProcess: function(event, stepNum, trainingType) {
            trainingType = trainingType || Training.process.type();

            //if we are on the step animating gif and stopwatch
            if (stepNum === 3 && trainingType === 2) {
                //if the stopwatch is already running then stop it
                //also stop the render function of the stopwatch as it is giving some bugs on android phones

                if (Training.process.stopwatch.isRunning()) {
                    Training.process.stopwatch.stop();
                    //if show timing option is on for this task
                    var showTiming = Training.process.stopWatchToBeDisplayed();

                    if (showTiming) {

                        Training.process.stopwatch.stopDisplay(document.getElementById('showstopwatch'));
                        //hide it so that when showing on next time it won't display old reading before starting


                    }
                    $('#showstopwatch').addClass('bip_hidden');

                }

            }

        },
        setTrainingSeconds: function(sec) {
            Training.process.sec = sec;
            return sec;
        },
        getTrainingTime: function() {

            var totalSeconds, sec, min;

            //if (Training.editedTrainingID === 0) { //new training

            //totalSeconds = Math.floor(Training.process.stopwatch.read() / 1000);

            //} else { //old trainings


            //}

            totalSeconds = parseInt(Training.process.sec, 10);

            // if (totalSeconds < 60) { //less than a minute
            //     sec = totalSeconds;
            //     min = 0;
            // } else {
            //     sec = 0;
            //     min = Math.ceil(totalSeconds / 60);
            // }

            //new logic

            if (totalSeconds < 60) { //less than a minute
                sec = 0;
                min = 1;
            } else {

                sec = 0;
                min = Math.ceil(totalSeconds / 60);

                if ((totalSeconds % 60) >= 30) {
                    min += 1;
                }

            }

            var aMin = Math.floor(totalSeconds / 60);
            var aSec = totalSeconds % 60;
            //
            //
            //return total seconds along with the calculated seconds and minutes
            //
            var retVar = {
                total: totalSeconds,
                seconds: sec,
                minutes: min,
                actualMinutes: aMin,
                actualSeconds: aSec
            };

            console.warn(JSON.stringify(retVar));

            return retVar;


        },
        /**
         * [stopWatchToBeDisplayed read the setting from admin whether the stopwatch need to be displayed or not]
         * @return {[type]} [boolean]
         */
        stopWatchToBeDisplayed: function() {
            var showTiming = false;
            
            if (Training.adminSettings && Training.adminSettings.training) {
                var TrainingTest = JSON.parse(Training.adminSettings.training);
                if(TrainingTest[3] && TrainingTest[3].timing){
                    showTiming = parseInt(TrainingTest[3].timing, 10);
                }
            }
            return showTiming;
        },
        /**
         * [startClock fired when the the clock need to be started]
         * @return {[type]} [description]
         */
        startClock: function() {
            if (Training.editedTrainingID === 0) { //new training

                Training.process.sec = 0;
                if (Training.process.stopwatch.isRunning()) {
                    Training.process.stopwatch.restart();
                } else {
                    Training.process.stopwatch.start();
                }
                var showTiming = Training.process.stopWatchToBeDisplayed();

                if (showTiming) {
                    $('#showstopwatch').text('00:00');
                    //start the clock and then display
                    Training.process.stopwatch.display(document.getElementById('showstopwatch'), 1000, function(ms) {
                        if (ms <= 0) {
                            return "00:00";
                        }

                        //milliseconds = (ms % 1000).toString(),
                        var seconds = Math.floor((ms / 1000) % 60).toString(),
                            //minutes = Math.floor((ms / (60 * 1000)) % 60).toString();
                            minutes = Math.floor((ms / (60 * 1000))).toString();

                        // if (milliseconds.length === 1) {
                        //     milliseconds = '00' + milliseconds;
                        // } else if (milliseconds.length === 2) {
                        //     milliseconds = '0' + milliseconds;
                        // }
                        if (seconds.length === 1) {
                            seconds = '0' + seconds;
                        }
                        if (minutes.length === 1) {
                            minutes = '0' + minutes;
                        }
                        return minutes + ":" + seconds; //+ "." + milliseconds;
                        //return parseInt(ms / 1000);
                    });
                    //setTimeout(function() {
                    $('#showstopwatch').removeClass('bip_hidden');
                    //}, 100);


                } else {

                    $('#showstopwatch').addClass('bip_hidden');

                }



                return Training.process.stopclock;
                //return Training.process.clock;

            } else {
                //edit(review) old  training do not start the timer
                $('#showstopwatch').addClass('bip_hidden');
                var trainings = $.grep(Training.TrainingLists, function(e) {
                    return parseInt(e.trainingId) === parseInt(Training.editedTrainingID);
                });

                if (trainings.length > 0) {
                    Training.process.sec = parseInt(trainings[0].training_duration, 10);
                    Training.process.completedTime = trainings[0].trainingdatetime;
                }


            }
        },
        /**
         * [stopClock tasks that need to be done when the stopclock has to be stopped]
         * @return {[type]} [description]
         */
        stopClock: function() {

            if (Training.editedTrainingID === 0) {
                //stop timer for new training
                //msgBox('new training setting time');
                Training.process.stopwatch.stop();

                var showTiming = Training.process.stopWatchToBeDisplayed();

                if (showTiming) {

                    Training.process.stopwatch.stopDisplay(document.getElementById('showstopwatch'));
                    setTimeout(function() {

                        $('#showstopwatch').text('00:00');
                        //hide it so that when showing on next time it won't display old reading before starting
                        $('#showstopwatch').addClass('bip_hidden');
                    })


                }

                //window.clearInterval(Training.process.clock);

                //only for  new training calculate the completed time
                //for old training this data has been set in startClocl method since old training data is accessed there
              /*  var d = new Date,
                    dformat = [d.getFullYear(), d.getMonth() + 1, d.getDate()].join('-') +
                    ' ' + [d.getHours(),
                        d.getMinutes(), d.getSeconds()
                    ].join(':'); */


                //Training.process.completedTime = dformat;
                //Get server time instead
                var DeviceID=$.jStorage.get('DeviceID');
                var userdetails = $.jStorage.get('userdetails');
                var json_new = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '"}';
                callWebServiceLiveSilently("getservertime", json_new, function(response) {
                    var d = response.data;
                    Training.process.completedTime = d.datetime;
                },"",false);

                //var ticktock = Training.process.stopwatch.read();

                Training.process.setTrainingSeconds(Math.floor(Training.process.stopwatch.read() / 1000));


                //save total seconds in Traninig.process.sec
                //Training.process.sec = Math.floor(ticktock / 1000);
                //
                //var totalSeconds = Training.getTrainingSeconds();
                //var ms = (ticktock % 1000),
                //    sec = Math.floor((ticktock / 1000) % 60),
                //    min = Math.floor((ticktock / (60 * 1000)) % 60);
            } else {
                //old training data already is in variable Training.process.sec
                //var sec = Math.floor(Training.process.sec % 60),
                //    min = Math.floor(Training.process.sec / 60);
            }

            var totalSeconds = Training.process.getTrainingTime().totalSeconds,
                sec = Training.process.getTrainingTime().actualSeconds,
                min = Training.process.getTrainingTime().actualMinutes;



            //if time is greater than 59 seconds always display in round off minutes and if not never show minutes
            // if (min > 0) {

            //     min = Math.ceil(Training.process.sec / 60); //round of to next greater minute
            //     sec = 0;
            //     Training.process.sec = min * 60; //update the entire timings to snipto the round off minute

            // }


            //var hour = Math.ceil(min/60);
            var displayTime = '';

            var grammer = function(value, singular, plural) {
                return parseInt(value, 10) > 1 ? plural : singular;
            }

            //if( hour > 0) {
            //    displayTime += '' + hour + ' '+  grammer(hour,'hour','hours') + ' ';
            //}else
            if (min > 0) {
                displayTime += '' + min + ' ' + grammer(min, 'Minuter', 'Minuter') + ' ';
            } else {
                displayTime += '' + min + ' ' + grammer(min, 'Minuter', 'Minuter') + ' ';
                displayTime += '' + sec + ' ' + grammer(sec, 'Sekunder', 'Sekunder') + ' ';

            }

            $('#TrainingZone_2_5 .popUptid span').text(displayTime);

            //show conditional text according to the time
            var popupData_2_5 = $.jStorage.get('userdetails').training[5];
            var conditional_text = ';'
            if (popupData_2_5 && popupData_2_5.hasOwnProperty('compare') && popupData_2_5.hasOwnProperty('conditional_text')) {

                if (min < parseInt(popupData_2_5.compare.x, 10)) {

                    conditional_text = popupData_2_5.conditional_text[1];

                } else if (min < parseInt(popupData_2_5.compare.y, 10)) {
                    conditional_text = popupData_2_5.conditional_text[2];
                } else {

                    conditional_text = popupData_2_5.conditional_text[3];
                }

                $('#trainingCndnlContent').html(conditional_text);


            }

            $('#trainingTimeSpent').text(displayTime);
            $("#dintid").removeClass("bip_hidden");

            updateUserTrainingTime();



            return Training.process.stopwatch;
            ////console.log(' ' + Training.process.sec + 'sec')
            //return Training.process.sec;
        },

        editTimeSpent: function() {

            var totalSeconds = Training.process.getTrainingTime().total,
                sec = Training.process.getTrainingTime().seconds,
                min = Training.process.getTrainingTime().minutes;

            //var sec = Math.floor(Training.process.sec % 60);

            //var min = Math.floor(Training.process.sec / 60);

            //if time is greater than 59 seconds always display in round off minutes and if not never show minutes
            //if (min > 0) {

            //    min = Math.ceil(Training.process.sec / 60); //round of to next greater minute
            //}





            $('#training_span_minutes').val(min);
            $('#training_span_seconds').val(sec);

            /*
            if (min > 0) {
                //only show minutes edit box
                $('#editTimeSpent .second_edit').hide();
                $('#editTimeSpent .minute_edit').show();

            } else {
                //only show second edit box
                $('#editTimeSpent .second_edit').show();
                $('#editTimeSpent .minute_edit').hide();
            }
            */

            //$('#editTimeSpent .minute_edit').show();
            //$('#editTimeSpent .minute_edit').removeClass('bip_hidden');

            /*  if (min > 0) {
                //show minute only
                $('#editTimeSpent .second_edit').hide();
                $('#editTimeSpent .minute_edit').show();
                //#editTimeSpent .second_edit,
            } else {
                //show both minute and second
                $('#editTimeSpent .second_edit').show();
                $('#editTimeSpent .minute_edit').show();
            }*/

            $('#defaultTimeSpent').hide();
            $('#editTimeSpent').show(function() {
                showDropdown($('#training_span_minutes')[0]);
            });

            $('#trainingTimeSpentWrapper').on('change', 'select', function() {
                //console.log('input value is changing');
                var newSec = parseInt($('#training_span_seconds').val(), 10) || 0;

                var newMin = parseInt($('#training_span_minutes').val(), 10) || 0;
                if (newMin === 0) {
                    //$('#training_span_seconds').fadeIn();
                    $('#editTimeSpent .second_edit').show();

                } else {
                    $('#training_span_seconds').val(0);
                    $('#editTimeSpent .second_edit').hide();
                    //$('#training_span_seconds').fadeOut();

                    //     //$('#training_span_seconds').removeAttr('disabled');
                    //     $('#training_span_seconds').val(0);
                    //     $('#editTimeSpent .second_edit .ui-btn-text span').text(0);
                    //     newSec = 0;
                }
                var totalSeconds = newMin * 60 + newSec;
                Training.process.sec = totalSeconds;
                //console.log(totalSeconds);

            });

            $('#trainingTimeSpentWrapper select').change();

        }



        /**
            Training type 1 or 2
            if 1
                it is a single step rating (short process)
            if 2
                it is a longer training with two step rating

            */




    },
     reviewTraining: function(trainingId) {
        var valueReviewChanged = function(event) {
            //console.log(event);
            //console.log(event.data);


            //event.data.id.find('.bip_edit').removeClass('bip_hidden');
            //event.data.id.find('select').addClass('bip_hidden');
            var newValue = '';


            if (event.data.type.time) {
                //if of time edit type update accordingly
                var isMinute = $(this).hasClass('min'),
                    isSecond = !isMinute,
                    minutes = 0,
                    seconds = 0;
                if (isMinute) {
                    minutes = '' + $(this).val();
                    if (minutes > 0) {
                        //if minute is greater than 0 hide seconds
                        event.data.id.find('select.sec').val(0).addClass('bip_hidden'); //hide();
                        seconds = '0';

                    } else {
                        event.data.id.find('select.sec').removeClass('bip_hidden');
                        seconds = '' + event.data.id.find('select.sec').val();
                    }

                } else {
                    seconds = '' + $(this).val();
                    minutes = '' + event.data.id.find('select.min').val();
                }

                minutes = minutes.length === 1 ? '0' + minutes : minutes;
                seconds = seconds.length === 1 ? '0' + seconds : seconds;

                newValue = minutes + ':' + seconds;

            } else if (event.data.type.rating) {
                newValue = $(this).val();

            }

            event.data.id.find('.bip_value').text(newValue);




            ////console.log($id);
            //alert($(this).val());
        };

        var valueReviewFocused = function() {
            //console.log('focused');
            //console.log('value is ' + $(this).val());
            $(this).data('initialValue', $(this).val());
            //console.log('old data is' + $(this).data('initialValue'));
        };

        var valueReviewBlurred = function() {
            //console.log('blurred');

            var oldData = $(this).data('initialValue');
            if (oldData == $(this).val()) {
                $(this).change();
                //console.log('jabarjasti change triggered');
            }
            //console.log(oldData);
            //console.log($(this).val());

        };

        var onBipReviewEdit = function() {
            var id = $(this).parents('.bip_review_item').attr('id');

            //what type of review edit?
            var isOfRatingType = new RegExp("review_rating_").test(id);
            var isOfTimeEditType = new RegExp("review_time_taken").test(id);


            //in case of time edit either show second edit or minute edit not both

            var $id = $('#' + id);

            var editType = {
                rating: false,
                time: false
            };
            if (isOfRatingType) {
                var $editBox = $id.find('select');
                editType.rating = true;
            }

            if (isOfTimeEditType) {
                //read the old time taken value for the training
                //and accordingly set the correct selectbox for edit
                if ($id.find('select.min').val() > 0) {
                    var $editBox = $id.find('select.min'); //select.showme
                } else {
                    var $editBox = $id.find('select'); //select.showme
                }
                editType.time = true;
            }



            $(this).addClass('bip_hidden');
            $editBox.removeClass('bip_hidden');
            $editBox.trigger('click');

            showDropdown($editBox[0]); //auto trigger selectbox edit

            //$editBox.off('change', valueReviewChanged);
            //$editBox.on('change', valueReviewChanged);

            // var sVal = '';
            // $editBox.focus(function() {
            //     alert('focused');
            //     sVal = $(this).val();
            // }).blur(function() {
            //     alert('blurred');
            //     if (sVal == $(this).val()) {
            //         $(this).change();
            //     }
            // });

            // $editBox.off('focus', valueReviewFocused);
            $editBox.off('focus').on('focus', valueReviewFocused);
            // $editBox.off('blur', valueReviewBlurred);
            $editBox.off('blur').on('blur', valueReviewBlurred);





            $editBox.off('change').on('change', {
                id: $id,
                type: editType
            }, valueReviewChanged);
        };

        var onBipReviewEditRating = function(editData) {
            var id = $(this).parents('.bip_review_item').attr('id');


            var $id = $('#' + id);
            var $editBox = $id.find('select');
            var value = $editBox.val();

            $editBox.off('change').on('change', {
                id: $id,
                type: {
                    rating: false,
                    time: false
                }
            }, valueReviewChanged);

            $('#slider-fill_reveiw_rating').attr('data-updateid', id);

            changepage('tidigare_review_rating', 'none');


            $("#slider-fill_reveiw_rating").hide();

            $(".rangeslider_reveiw_rating div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").height(sliderpercentage[value] + "%");


            $('#slider-fill_reveiw_rating').unbind("change");
            //var slide_bottom,slide2_2_bottom;
            $('#slider-fill_reveiw_rating').change(function() {
                var newValue = $(this).val();
                var id = $(this).attr('data-updateid');
                var $id = $('#' + id);
                var $editBox = $id.find('select');
                $editBox.val(newValue);
                $id.find('.bip_value').text(newValue);




                $(".rangeslider_reveiw_rating div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").attr("style", "display:block");
                $(".rangeslider_reveiw_rating div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").height(sliderpercentage[newValue] + "%");
                $("#slider-fill-span_reveiw_rating").attr("style", "display:block").html(newValue).css('bottom', sliderpercentage[newValue] - 20 + "%");

            });

            $('#slider-fill_reveiw_rating').val(value).css('bottom', sliderFillpercentage[value] + '%');



            $('#slider-fill_reveiw_rating').change();

            //console.log(value);

            //Related to issue posted on Teamwork https://websearchpro.teamworkpm.net/tasks/1045394

            trainingInfo = $.jStorage.get('userdetails');
            currentStep = 2;
            if (id == "review_rating_2_4")
                currentStep = 4;


            var rangeSelector = $('#tidigare_review_rating').find('#divpopuprange');
            var buttonSelector = $('#tidigare_review_rating').find('.popupbuttons');



            var parseTrainingInfo = JSON.parse(trainingInfo.training);
            if (parseTrainingInfo.type == 2) {
               /* $('#tidigare_review_rating').find('.popupTitle').text(trainingInfo.training[currentStep].headline);
                rangeSelector.find('.range_label_ten').text('10 = ' + trainingInfo.training[currentStep].ten);
                rangeSelector.find('.range_label_zero').text('0 = ' + trainingInfo.training[currentStep].zero);
                buttonSelector.find('.next').text(trainingInfo.training[currentStep].button);*/
                $('#tidigare_review_rating').find('.popupTitle').text(parseTrainingInfo[currentStep].headline);
                rangeSelector.find('.range_label_ten').text('10 = ' + parseTrainingInfo[currentStep].ten);
                rangeSelector.find('.range_label_zero').text('0 = ' + parseTrainingInfo[currentStep].zero);
                buttonSelector.find('.next').text(parseTrainingInfo[currentStep].button);
            } else {
                
              /*  $('#tidigare_review_rating').find('.popupTitle').text(trainingInfo.training.anxiety);
                rangeSelector.find('.range_label_ten').text('10 = ' + trainingInfo.training.ten);
                rangeSelector.find('.range_label_zero').text('0 = ' + trainingInfo.training.zero);
                buttonSelector.find('.next').text(trainingInfo.training.txt_button);*/
                 $('#tidigare_review_rating').find('.popupTitle').text(parseTrainingInfo.anxiety);
                rangeSelector.find('.range_label_ten').text('10 = ' + parseTrainingInfo.ten);
                rangeSelector.find('.range_label_zero').text('0 = ' + parseTrainingInfo.zero);
                buttonSelector.find('.next').text(parseTrainingInfo.txt_button);
            }

        };

        $('#editminute').addClass('bip_hidden');
        $('.bip_edit ').removeClass('bip_hidden');
        // $('#tidigare_review').off('click').on('click', '.bip_edit', onBipReviewEdit);

        Training.editedTrainingID = trainingId;
        Training.isSaveonProgess = false;
        var type = Training.process.type();

        var trainings = $.grep(Training.TrainingLists, function(e) {
            return e.app_training_id == Training.editedTrainingID;
        });

        if (trainings.length === 0) {
            showalert('Sorry,this trainig do not exist anymore!');
            return false;
        }


        var training = trainings[0];
        var editData = {};

        $('.bip_review_item select').addClass('bip_hidden');
        $('.bip_review_item .bip_edit').removeClass('bip_hidden');

        $('#tidigare_review_rating').find('.trainingZoneContent').off('click').on('click', '.abort', Training.process.abortTidigare);


        if (type === 1) { //single rating
            //populate data
            editData.rating_1_1 = training.estimatedvalue;
            //update dom
            $('#review_rating_1_1 select').val(training.estimatedvalue);
            $('#review_rating_1_1 .bip_value').text(training.estimatedvalue);
            $('#review_date_1_2 input#tidigare_date_1_2').attr("value", training.trainingdatetime);
            //console.log(training.trainingdatetime)
                //$("#tidigare_date_1_2").change();

            //$('#review_datetime').val('trainingdatetime');
            //$('#review_datetime .bip_value').val(training.trainingdatetime);

            //show / hide
            $('#review_rating_2_2,#review_rating_2_4,#review_time_taken').addClass('bip_hidden');
            $('#review_rating_1_1').removeClass('bip_hidden'); //#review_comment,//#review_datetime
            $('#review_date_1_2').removeClass('bip_hidden');

        } else if (type == 2) { //double rating
            //populate data
            editData.training_duration = parseInt(training.trainingDuration, 10); //parseInt(training.trainingduration, 10);
            editData.rating_2_2 = training.estimatedValue;//training.estimatedvalue;
            editData.rating_2_4 = training.estimatedValueEnd;//training.estimatedvalue_end;

            console.clear();
            console.warn("Training = "+JSON.stringify(training));
           
            //update dom
            //$('#review_rating_2_2 select').val(training.estimatedvalue);
            $('#review_rating_2_2 select').val(training.estimatedValue);
            //$('#review_rating_2_2 .bip_value').text(training.estimatedvalue);
            $('#review_rating_2_2 .bip_value').text(training.estimatedValue);

          //  $('#review_rating_2_4 select').val(training.estimatedvalue_end);
            $('#review_rating_2_4 select').val(training.estimatedValueEnd);
          //  $('#review_rating_2_4 .bip_value').text(training.estimatedvalue_end);
            $('#review_rating_2_4 .bip_value').text(training.estimatedValueEnd);


            $('#editminute').removeClass('bip_hidden');
            //set time
           
            Training.process.setTrainingSeconds(editData.training_duration);
            var totalSeconds = Training.process.getTrainingTime().total,
                sec = Training.process.getTrainingTime().actualSeconds || "00",
                min = Training.process.getTrainingTime().actualMinutes || "00";
            // min = parseInt(totalSeconds / 60, 10),
            //sec = totalSeconds % 60;

            // $('#review_time_taken select.sec').val(sec);
            //$('#review_time_taken select.min').val(min);

            $('#review_time_taken select').addClass('bip_hidden').removeClass('showme'); //add this class to each select box

            $('#review_time_taken .bip_value').text(('0' + min + '').slice(-2) + ':' + ('0' + sec + '').slice(-2));
            $('#tidigareTimeEdit').val(('0' + min).slice(-2) + ':' + ('0' + sec).slice(-2));
          
           
            /*
            if (min > 0) {
                $('#review_time_taken select.min').addClass('showme');
                //$('#review_time_taken .bip_value').text('' + min + 'Minuter');

            } else {
                $('#review_time_taken select.sec').addClass('showme');
                //$('#review_time_taken .bip_value').text('' + sec + 'Sekunder');
            }
            */




            //show / hide
            $('#review_rating_2_2,#review_rating_2_4,#review_time_taken').removeClass('bip_hidden');
            $('#review_rating_1_1').addClass('bip_hidden');
            $('#review_date_1_2').addClass('bip_hidden');
        }

        //common for both
        var oldDateTIme = training.trainingdatetime;

        $('#training_review_datetime').text(oldDateTIme.replace(' ', ', '));
        $('#training_review_datetime').attr('data-value', oldDateTIme);

        $('#review_comment textarea').val(training.comment);

        //bind the edit button for action
        //$('#tidigare_review').off('click').on('click', '.bip_edit', editData, onBipReviewEdit);
        $('#tidigare_review').on('click', '.bip_edit_rating', editData, onBipReviewEditRating);


        changepage('tidigare_review');




    },
    saveReviewedTraining: function() {
        var trainingId=Training.editedTrainingID;
        var taskid = Training.editedTaskid;
         var submit_object={};
        if (Training.isSaveonProgess === false) {
            Training.isSaveonProgess = true;
            var userdetails = $.jStorage.get('userdetails');
            submit_object = {
                userid: userdetails.user_id,
                tokenkey: userdetails.tokenkey,
                deviceId: DeviceID,
                taskid: taskid,
                trainingId: Training.editedTrainingID,
                type: Training.process.type(),
                trainingdatetime: $('#training_review_datetime').attr('data-value')

            };

            if (submit_object.type === 2) {

                var times = $('#review_time_taken input').val().split(':');

                totSeconds = parseInt(times[0], 10) * 60 + parseInt(times[1], 10);

                /*var minute = parseInt($('#review_time_taken input').val(), 10) || 0,
                sec = parseInt($('#review_time_taken select.sec').val(), 10) || 0,
                totSeconds = minute * 60 + sec;*/


            }

            switch (submit_object.type) {
                case 1:
                    submit_object.estimatedvalue = $('#review_rating_1_1 select').val();
                    submit_object.comment = checkinput($("#review_comment textarea").val());
                    submit_object.trainingdatetime = $("#tidigare_date_1_2").val();
                    submit_object.estimatedvalue_end="";
                    submit_object.training_duration="";
                    break;
                case 2:
                    submit_object.estimatedvalue = $('#review_rating_2_2 select').val();
                    submit_object.estimatedvalue_end = $('#review_rating_2_4 select').val();

                    submit_object.training_duration = totSeconds;

                    break;
            }

            var json = JSON.stringify(submit_object);

            //console.log(json);


            $(Training.TaskLists).each(function(index) {
                if (parseInt(this.taskid, 10) === taskid) {
                    $self=this;
                    $($self.training).each(function(){
                         if (this.app_training_id == trainingId) {
                                this.edited=1;
                                this.estimatedvalue=submit_object.estimatedvalue;
                                this.estimatedvalue_end=submit_object.estimatedvalue_end;
                                this.training_duration=submit_object.training_duration;
                                this.trainingdatetime=submit_object.trainingdatetime                    ;
                        }

                    })

                }
            });

            //active_tasks.data.task=Training.TaskLists;
           // updateDB('active_tasks',active_tasks,function(){  console.log("Success updating activetask"); }); 

            var toadd={
                        where:{
                            'app_training_id': trainingId,
                        },
                        fields:{
                            'trainingDateTime':submit_object.trainingdatetime,
                            'estimatedValue':submit_object.estimatedvalue,
                            'trainingDuration':submit_object.training_duration,
                            'edited':1,
                            'estimatedValueEnd':submit_object.estimatedvalue_end
                         }
                    };
            callWebService('saveReviewedTraining', toadd, function(response) {
                console.log("Training saved in local database");
            });
            //callWebServiceLive('saveTraining', json, function(response) {
                Training.isSaveonProgess = false;
               // if (response.status === "ok") {
                    //update do not give the feedback message
                    //msgBox(response.data.message);
                    //
                    //Training.showTraining(Training.editedTaskid);
                    changepage('TrainingList');
                    // enableIScroll();
                    //Training.buildTrainingList(response.old_trainings);
                    if (Training.editedTrainingID === 0) {
                        $(Training.TaskLists).each(function(index) {
                            if (parseInt(this.taskid, 10) === taskid) {
                                this.practice += 1;
                                traningSlot = Training.getpracticeslotnumber(this.practice);
                                var progressHtml = new Array();
                                for (var i = 1; i <= traningSlot; i++) {
                                    if (i <= this.practice) {
                                        progressHtml.push('<span class="section green">&nbsp;</span>');
                                    } else {
                                        progressHtml.push('<span class="section">&nbsp;</span>');
                                    }
                                }
                                $("#progressbar").html(progressHtml.join(''));
                                $("#lstTraining li[data-taskid=" + taskid + "] .sectioned.box-size-border").html(progressHtml.join(''));
                                return false;
                            }
                        });
                           //active_tasks.data.task=Training.TaskLists;
                          //updateDB('active_tasks',active_tasks,function(){  console.log("Success updating activetask"); });
                    }   

                // } else {
                //     msgBox(MESSAGE.NO_INTERNET);
                // }
            // });
        }
    }
};



// $('#review_rating_1_1 select').on('focus', valueReviewFocused);
// $('#review_rating_2_2 select').on('focus', valueReviewFocused);
// $('#review_rating_2_4 select').on('focus', valueReviewFocused);

// $('#review_rating_1_1 select').on('blur', valueReviewBlurred);
// $('#review_rating_2_2 select').on('blur', valueReviewBlurred);
// $('#review_rating_2_4 select').on('blur', valueReviewBlurred);


//$('#tidigare_review').off('click', '.bip_edit', onBipReviewEdit);
;var currentRegStepID = "";
var Registration = {
    modulesSaved:0,
    oldSelectedOptions: [],
    testVar:"",
    renderRegistrationNav: function(hasRegistration) {
        if (hasRegistration == "true") {
            var $html = "<li data-role='' class='registration-nav-main'><a href='javascript:void(0)' onclick='Registration.home();'>Registration</a></li>";
            $('#lstTraining3').html($html);
            $('#lstTraining3').listview('refresh');
            refreshScroll('TrainingList');
        } else {
            var $html = "<li data-role=''>No Registrations</li>";
            $('#lstTraining3').html($html);
            $('#lstTraining3').listview('refresh'); 
            refreshScroll('TrainingList');
        }
    },

   

    home: function() {
          //download files
        if(navigator.onLine==true){
            offlinehelper.downloadAudioFiles();
        }

        BipAppVersion2.ShowHideModules();
       

        Registration.elementClick();
        changepage("RegistrationTask");
        
        $("#RegistrationTask").find(".played_time").remove(); //.played_time element was added by sujendra, but we don't need this in registration.
        $(".txt-custom-answers").bind("focus",function(){
          //  $(".reg-navigation-holder").addClass("hide");
            $('#popupAddAnswer').popup("reposition",{ y: (window.innerHeight-$('#popupAddAnswer').height())/2});
            $('#popupAddAnswerCat').popup("reposition",{ y: (window.innerHeight-$('#popupAddAnswerCat').height())/2});
        }).bind("blur",function(){
          /*  $('#popupAddAnswer').popup("reposition",{ y: (window.innerHeight-$('#popupAddAnswer').height())/2});
            $('#popupAddAnswerCat').popup("reposition",{ y: (window.innerHeight-$('#popupAddAnswerCat').height())/2});*/
           /* var b = setTimeout(function(){
                $(".reg-navigation-holder").removeClass("hide");
            },700);*/
        });

        /*
        $(".ui-collapsible-set").find('.ui-collapsible').bind('expand', function () {
            alert('Expanded');
        }).bind('collapse', function () {
            alert('Collapsed');
        });
        */

       

         


        $('#popupAddAnswerCat').popup({
                beforeposition: function() {
                    $(this).css({
                        width: window.innerWidth - 20
                    });
                },
                positionTo:"window",
                theme: "d",
                transition: "pop",
                shadow: false,
                tolerance: "2,2"
        });

        $('#popupAddAnswer').popup({
            beforeposition: function() {
                $(this).css({
                    width: window.innerWidth - 20
                });
            }, 
            positionTo: "window",
            theme: "d",
            transition: "pop",
            shadow: false,
            tolerance: "2,2"
        });


       
    },

    fetchRegistrations: function(show) {
        var show = typeof show==="undefined" ? "" : show;
       
       if(show=="old"){
            if($(".earlier-registration").hasClass("desaturate")){
                return false; // we don't want to render empty page if there are no old registrations.
            }
            $mainPage = "RegistrationTask_List_Old";
        }else{
            $mainPage = "RegistrationTask_List";
        }


        var userdetails = $.jStorage.get('userdetails');
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","show":"'+show+'"}';
        callWebService('fetchRegistrations', json, function(response) {
           
            if (response.status == "ok") {
                if (typeof response.data!="undefined" && response.data != "No Registrations") {
                    
                    $html = "";
                    
                   

                    $(response.data).each(function() {
                        $answered_date = "";
                        $class="";
                        $assignment_id = 0;
                        $app_assignment_id = 0;
                        if(show=="old"){
                            $answered_date = "<div class='date-answered'>"+this.registration_name+"</div>";
                            $class="old-registration-list";
                            $assignment_id = this.assignment_id;
                            $app_assignment_id = this.app_assignment_id;
                             $html += "<li class=''>" +
                                "<a href='javascript:void(0);' data-assignmentid='"+$assignment_id+"'data-appassignmentid='"+$app_assignment_id+"' data-showwhat='"+show+"' onclick='Registration.fetchRegistrationSteps($(this))' data-flowtype='" + this.flow_type + "' data-regid='" + this.registration_id + "' class='"+$class+"'>" + this.formatted_answer_date + $answered_date +"</a>" + 
                                "</li>";
                        }else{
                             $html += "<li class=''>" +
                                "<a href='javascript:void(0);' data-assignmentid='"+$assignment_id+"'data-appassignmentid='"+$app_assignment_id+"' data-showwhat='"+show+"' onclick='Registration.fetchRegistrationSteps($(this))' data-flowtype='" + this.flow_type + "' data-regid='" + this.registration_id + "' class='"+$class+"'>" + this.registration_name + $answered_date +"</a>" + 
                                "</li>";
                         }


                         if(response.old_registrations===0){ //if there is no old registration disable the link
                                $("#RegistrationTask_List").find(".earlier-registration").addClass("desaturate");
                         }  
                       /* if(show=="old"){
                            $answered_date = "<div class='date-answered'>"+this.formatted_answer_date+"</div>";
                            $class="old-registration-list";
                            $assignment_id = this.assignment_id;
                            $app_assignment_id = this.app_assignment_id;
                        }
                        if (this.flow_type == 2) {

                            $html += "<li class=''>" +
                                "<a href='javascript:void(0);' data-assignmentid='"+$assignment_id+"' data-showwhat='"+show+"' onclick='Registration.fetchRegistrationDetails($(this))' data-flowtype='" + this.flow_type + "' data-regid='" + this.registration_id + "' class='"+$class+"'>" + this.registration_name + $answered_date + "</a>" + 
                                "</li>";
                        } else {
                            $html += "<li class=''>" +
                                "<a href='javascript:void(0);' data-assignmentid='"+$assignment_id+"'data-appassignmentid='"+$app_assignment_id+"' data-showwhat='"+show+"' onclick='Registration.fetchRegistrationSteps($(this))' data-flowtype='" + this.flow_type + "' data-regid='" + this.registration_id + "' class='"+$class+"'>" + this.registration_name + $answered_date +"</a>" + 
                                "</li>";
                        }*/
                    });
                    $("#"+$mainPage).find(".list_registrations").html($html);
                    $("#"+$mainPage).find(".list_registrations").listview('refresh');

                    $(".regtaskicon").trigger("blur"); //Used to remove focus from Circular registration button.
                   
                    changepage($mainPage);
                    enableIScroll();
                    refreshScroll($mainPage);
                    scrolls[$mainPage].refresh();
                  
                }else{
                    return false;
                }
            } else {
                msgBox(MESSAGE.NO_INTERNET);
            }
        });
    },

    //Registration detail is for flowtype 2 and not used in system. Not removed for future reference
    fetchRegistrationDetails: function(obj) {
        var userdetails = $.jStorage.get('userdetails');
        var FlowType = obj.attr("data-flowtype");
        var RegID = obj.attr("data-regid");
        var show = obj.attr("data-showwhat");
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","flow_type":"' + FlowType + '","registration_id":"' + RegID + '","show":"'+show+'"}';
        callWebService(' ', json, function(response) {
            if (response.status == "ok") {
                if (response.data != "No Registration Details" && response.data.length>0) {
                    if (FlowType == 2) //Registration with multiple flows
                    {
                        $pageTitle = "";
                        $selector = $(".registration-flows");

                        $html = "";
                        $(response.data).each(function() {
                            $html += "<li class=''>" +
                                "<a href='javascript:void(0);' onclick='Registration.fetchRegistrationSteps($(this))' data-flowtype='" + FlowType + "' data-regid='" + this.registration_id + "' data-flowid='" + this.flow_id + "' data-flowpageid='" + this.flow_page_id + "' class=''>" + this.flow_name + "</a>" +
                                "</li>";
                            $pageTitle = this.flow_page_title;
                        });

                        $selector.find("h1").html($pageTitle);

                        $selector.find("ul").html($html);
                        $selector.find("ul").listview("refresh");

                        //$(".registration-flows");
                        changepage("RegistrationTask_Flows");
                    } else {

                    }
                }
            } else {
                msgBox(MESSAGE.NO_INTERNET);
            }
        });
    },

    fetchRegistrationSteps: function(obj) {
        var userdetails = $.jStorage.get('userdetails');
        var showWhat = obj.attr("data-showwhat");
        var FlowType = obj.attr("data-flowtype");
        var RegID = obj.attr("data-regid");
        var FlowID = obj.attr("data-flowid");
        var assignment_id = obj.attr("data-assignmentid");
        var app_assignment_id = obj.attr("data-appassignmentid");
        $("#reg_assignment_id").val(assignment_id);
        $("#app_reg_assignment_id").val(app_assignment_id);

        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","flow_type":"' + FlowType + '","registration_id":"' + RegID + '","flow_id":"' + FlowID + '","assignment_id":"'+assignment_id+'","app_assignment_id":"'+app_assignment_id+'"}';
        callWebService('fetchRegistrationSteps', json, function(response) {

            if (response.status == "ok") {
                if (response.data != "No Registration Steps") {
                    //registration-steps-holder
                    $("#registration_id").val(RegID);
                    if (FlowID > 0) $("#reg_flow_id").val(FlowID);
                    var datetime = false;
                    var stepMinute = 3;
                    $html = "";

                    $old_assignments = response.data.old_assignment!=undefined ? response.data.old_assignment : null;

                    
                  //  $old_assignments = response.data.old_assignment;
                   // $checkAnswer = new Array();
                   Registration.testVar = response.data.old_assignments;

                    if($old_assignments!=null && typeof $old_assignments.details!="undefined"){ //View earlier registrations
                      /*  $($old_assignments.details).each(function(){
                                Registration.oldSelectedOptions.push(this.step_id+":"+this.answer_id);
                        });*/
                        //new one
                        $sort_order = 1;
                        $str = "";
                       $ass = $old_assignments.assignment;
                     
                       $($old_assignments.details).each(function(i,e){
                             $total_steps = $old_assignments.details.length;
                             if($ass.incident_date!="0000-00-00" && typeof $old_assignments.datetime!="undefined"){
                                $total_steps = $total_steps+1;
                             }

                             if($ass.date_only!="0000-00-00" && typeof $old_assignments.dateonly!="undefined"){
                                $total_steps = $total_steps+1;
                             }

                             $strAnswer = e.str_answer;
                             $arrAnswer = $strAnswer.split("^");
                             $arrCat = "";
                             $selected_answer="";

                             if(e.str_cat_name!=null){
                                $strCat = e.str_cat_name;
                                $arrCat = $strCat.split("^");
                             }
                             for(var x=0;x<$arrAnswer.length;x++){
                                if($arrCat!=""){
                                    $selected_answer += $arrCat[x]+" > "+$arrAnswer[x]+"<br />";
                                }else{
                                    $selected_answer += $arrAnswer[x]+"<br />";
                                }
                             }
                             $str += "<li data-order='"+$sort_order+"'><div class='fl'>" +
                                    "<a href='#'><h2>" + e.str_step_name + "</h2>" +
                                    "<p>" + $selected_answer + "</p></a>" +
                                    "</div>"+
                                    "<div class='fr'>"+"<div class='step-head'>Steg "+$sort_order+" av "+$total_steps+"</div><div class='summary-link'></div>" +
                                    "</div><div class='clear'></div></li>";
                            $sort_order_add = $sort_order+1;

                            $sort_order++;
                       });

                        //Now render date time template or date only template here start
                        if($ass.incident_date!="0000-00-00" && typeof $old_assignments.datetime!="undefined"){ //for datetime template
                         
                                $assdt = $old_assignments.datetime;
                               
                                $ordr = $("li",$str).andSelf().length+1;
                                
                                
                                $sdate = moment($ass.incident_date).format("D MMMM YYYY").toLowerCase()
                                $incident_date = "Datum: " + Registration.localizeMonth($sdate);
                                $incident_time = "Tid: " + "Kl "+moment("1970-01-01 "+$ass.incident_time).format("H"); 
                                //using 1970-01-01 above because moment js needs date to format but we just need to format time.

                                $selected_answer_dt = $incident_date + "<br />" + $incident_time;

                               
                                $str += "<li><div class='fl'>" +
                                        "<a href='#'><h2>" + $assdt.step_name + "</h2>" +
                                        "<p>" + $selected_answer_dt + "</p></a>" +
                                        "</div>"+
                                        "<div class='fr'>"+"<div class='step-head'>Steg "+$ordr+" av "+$ordr+"</div><div class='summary-link'></div>" +
                                        "</div><div class='clear'></div></li>";
                            
                            
                           }

                           if($ass.date_only!="0000-00-00" && typeof $old_assignments.dateonly!="undefined"){ //for dateonly template
                                $assdt = $old_assignments.dateonly;
                               
                                $ordr = $("li",$str).andSelf().length+1;

                                //if($sort_order_add==$sort_order_dt){
                                $sdate = moment($ass.date_only).format("D MMMM YYYY").toLowerCase()
                                $dateonly = "Datum: " + Registration.localizeMonth($sdate);
                                //using 1970-01-01 above because moment js needs date to format but we just need to format time.

                                $selected_answer_dt = $dateonly;

                                $str += "<li><div class='fl'>" +
                                        "<a href='#'><h2>" + $assdt.step_name + "</h2>" +
                                        "<p>" + $selected_answer_dt + "</p></a>" +
                                        "</div>"+
                                        "<div class='fr'>"+"<div class='step-head'>Steg "+$ordr+" av "+$ordr+"</div><div class='summary-link'></div>" +
                                        "</div><div class='clear'></div></li>";
                               // }
                                
                           }
                        //Now render date time template or date only template here end
                                               
                      $("#RegistrationTask_Old_Details").find(".step-title").html($ass.answered_date);

                       $("#my_old_reg_summary_list").html($str);

                       $("#my_old_reg_summary_list").listview().listview("refresh");
                       changepage("RegistrationTask_Old_Details");

                       enableIScroll();
                       scrolls["RegistrationTask_Old_Details"].refresh();
                        
                       return false;
                    }
                   // console.warn($checkAnswer);
                    $(response.data.steps).each(function() {
                        if (this.template == "steps_text") {
                            $html += "<div id='step_" + this.step_id + "' data-template='" + this.template + "' class='step-registration-contents step-" + this.show_order + "'>";
                            $html += "<div class='step-title'>" + this.step_name + "</div><div class='step-btn-option-holder'>";
                            $html += $("<div class='media-contents'></div>").append(this.answer_text).find("iframe,img").removeAttr("height").attr("width", "100%").attr("height", "260").end().html();
                            $html += "</div>";
                            $html += "<div class='text-step-button step-text-btn-holder'><a href='javascript:void(0);' onclick='Registration.showHideSteps(" + (this.show_order + 1) + "); Registration.StopYoutubeVideo();' class='step-txt-btn border-radius'>" + this.button_text + "</a></div>";
                            $html += "</div>";
                        } else if (this.template == "steps_summary") {
                            $html += "<div id='step_" + this.step_id + "' data-template='" + this.template + "' class='step-registration-contents step-" + this.show_order + "'>";
                            $html += "<div class='step-title'>" + this.step_name + "</div>";
                            $html += "<div id='show_summary' class='options-holder template-summary'>";
                            $html += "</div>";
                            $html += "</div>";
                        } else if (this.template == "steps_datetime") {
                            datetime = true;
                            stepMinute = this.time_format;
                            $html += "<div id='step_" + this.step_id + "' data-sortorder='"+this.sort_order+"' data-template='" + this.template + "' class='step-registration-contents step-" + this.show_order + "'>";
                            $html += "<div class='step-title'>" + this.step_name + "</div>";
                             $html += "<div class='step-btn-option-holder for-date-time'>";
                            $html += "<div class='options-holder template-datetime'>";
                            
                            if (this.show_date == 1) {
                                $current_date = Registration.localizeMonth(moment().format("D MMMM YYYY").toLowerCase()); //moment().format("D MMM YYYY");
                                $hid_date = moment().format("YYYY-MM-DD");
                                
                                if($old_assignments!=null && typeof $old_assignments.assignment!="undefined"){
                                    $current_date = moment($old_assignments.assignment.incident_date).format("D MMMM YYYY");
                                    $current_date = Registration.localizeMonth($current_date.toLowerCase());
                                    $hid_date  = moment($old_assignments.assignment.incident_date).format("YYYY-MM-DD");
                                }

                                $todaytext = "";
                                if(Registration.localizeMonth(moment().format("D MMMM YYYY").toLowerCase())==$current_date){
                                    $todaytext = "Idag, ";
                                }

                                $html += "<div class='date-holder'><input name='incident_date_formatted' id='picker-selected-date' type='text' class='picker-date' readonly='readonly' value='" + $todaytext + $current_date + "' /><input type='hidden' name='incident_date' value='" + $hid_date + "' /></div>";
                                $html += "<div><a id='change-incident-date' href='javascript:void(0)' class='date-time-btn border-radius ui-btn'>Ändra dag</a></div>";
                            }

                            if (this.show_time == 1) {
                                $current_time = "Kl "+moment().format("HH");
                                $hid_time = moment().format("HH:mm:ss");
                               
                                if($old_assignments!=null && typeof $old_assignments.assignment !="undefined"){
                                    $current_time = moment("2013-01-01 "+$old_assignments.assignment.incident_time).format("HH:mm");
                                    $hid_time = moment("2013-01-01 "+$old_assignments.assignment.incident_time).format("HH:mm:ss");
                                }

                                $html += "<div class='date-holder time-holder'><input  name='incident_time_formatted' id='picker-selected-time' type='text' class='picker-date' readonly='readonly' value='" + $current_time + "' /><input type='hidden' name='incident_time' value='" + $hid_time + "' /></div>";
                                $html += "<div><a id='change-incident-time' href='javascript:void(0)' class='date-time-btn border-radius ui-btn'>Ändra tid</a></div>";
                            }
                            $html += "</div>";
                             $html += "</div>";
                            $html += "</div>";
                        }else if (this.template == "steps_date") {
                            datetime = true;
                            /*stepMinute = this.time_format;*/
                            $html += "<div id='step_" + this.step_id + "' data-sortorder='"+this.sort_order+"' data-template='" + this.template + "' class='step-registration-contents step-" + this.show_order + "'>";
                            $html += "<div class='step-title'>" + this.step_name + "</div>";
                             $html += "<div class='step-btn-option-holder for-date-only'>";
                            $html += "<div class='options-holder template-datetime'>";
                            $current_date = Registration.localizeMonth(moment().format("D MMMM YYYY").toLowerCase()); //moment().format("D MMM YYYY");
                                $hid_date = moment().format("YYYY-MM-DD");
                                
                                if($old_assignments!=null && typeof $old_assignments.assignment!="undefined"){
                                    $current_date = moment($old_assignments.assignment.date_only).format("D MMMM YYYY");
                                    $current_date = Registration.localizeMonth($current_date.toLowerCase());
                                    $hid_date  = moment($old_assignments.assignment.date_only).format("YYYY-MM-DD");
                                }

                                $todaytext = "";
                                if(Registration.localizeMonth(moment().format("D MMMM YYYY").toLowerCase())==$current_date){
                                    $todaytext = "Idag, ";
                                }

                                $html += "<div class='date-holder'><input name='date_only_formatted' id='picker-selected-date-only' type='text' class='picker-date' readonly='readonly' value='" + $todaytext + $current_date + "' /><input type='hidden' name='date_only' value='" + $hid_date + "' /></div>";
                                $html += "<div><a id='change-date' href='javascript:void(0)' class='date-time-btn border-radius ui-btn'>Ändra dag</a></div>";
                            
                            
                            $html += "</div>";
                             $html += "</div>";
                            $html += "</div>";
                        } else {

                            $html += "<div data-specialcase='"+this.special_case+"' id='step_" + this.step_id + "' data-sortorder='" + this.sort_order + "' data-template='" + this.template + "' class='step-registration-contents step-" + this.show_order + "'>";
                            if (this.template == "steps_sentence" || this.template == "steps_keywords") {
                                $name = this.template == "steps_sentence" ? "sentence" : "keyword";
                                $html += "<div class='step-title'>" + this.step_name + "</div>";
                                $html += "<div class='step-btn-option-holder'>";
                                $html += "<div class='options-holder template-" + $name + "'>";
                                $step_id = this.step_id;
                                $is_multiple_choice = this.is_multiple_choice;


                                $dataopt = $is_multiple_choice + "-" + this.max_selection_allowed;
                                $(this.answers).each(function() {
                                    if ($is_multiple_choice == 1) {
                                        $type = "checkbox";
                                    } else {
                                        $type = "radio";
                                    }
                                    $ans = {
                                        "step_id": $step_id,
                                        "is_custom_answer": 0,
                                        "is_answer_category": 0,
                                        "answer_id": this.answer_id,
                                        "app_answer_id": this.app_answer_id
                                    };

                                    $html += "<label><input onclick='Registration.eventOptOnClick($(this))' data-options='" + $dataopt + "' data-mini='true' data-stepid='" + $step_id + "' data-answerid='" + this.answer_id + "' data-answer='" + this.answer + "' value='" + JSON.stringify($ans) + "' type='" + $type + "'  class='" + $name + "_answer' name='step_answers["+$step_id+"][]'>" + this.answer + "</label>";
                                });
                                $html += "</div>";
                                if (this.allow_custom_answer == 1) {
                                    $html += "<div class='text-step-button'><a data-specialcase='"+this.special_case+"' data-options='" + $dataopt + "' data-template='" + this.template + "' data-choicetype='" + $is_multiple_choice + "' data-holder='template-" + $name + "' data-class='" + $name + "_answer' data-stepid='" + $step_id + "'  href='#popupAddAnswer' class='show-popup border-radius ui-btn ui-btn-inline ui-my-icon-plus'  data-role='button' data-rel='popup'>Lägg till svar</a><a  href='javascript:void(0)' data-identifier='custom-" + this.template + "' class='delete-options border-radius ui-btn ui-btn-up-a hide ui-btn-inline ui-my-icon-delete'  data-role='button' onclick='Registration.deleteOptions($(this))'>Radera eget svar</a></div>";
                                }
                                $html += "</div>";

                            } else if (this.template == "steps_expand_collapse") {
                                $html += "<div class='step-title'>" + this.step_name + "</div>";
                                $html += "<div class='step-btn-option-holder-ec'>";
                                $html += "<div class='options-holder template-expand-collapse'>";
                                $step_id = this.step_id;
                                $is_multiple_choice = this.is_multiple_choice;
                                $allow_add_answer = this.allow_custom_answer;

                                $html += "<div data-role='collapsibleset' data-theme='c' data-content-theme='c' data-corners='false'>";
                                $dataopt = $is_multiple_choice + "-" + this.max_selection_allowed;
                                $(this.category).each(function() {
                                    $answer_cat_id = this.answer_cat_id;
                                    $app_answer_cat_id = this.app_answer_cat_id;
                                    $answer_cat_name = this.answer_cat_name;
                                    $html += "<div id='collapsible_" + $answer_cat_id + "' data-role='collapsible'>";
                                    $html += "<h3>" + $answer_cat_name + "</h3>";
                                    $(this.answers).each(function() {
                                        if ($is_multiple_choice == 1) {
                                            $type = "checkbox";
                                        } else {
                                            $type = "radio";
                                        }
                                        $ans = {
                                            "step_id": $step_id,
                                            "is_custom_answer": 0,
                                            "is_answer_category": 0,
                                            "answer_id": this.answer_id,
                                            "app_answer_id": this.app_answer_id,
                                            "app_answer_cat_id": this.app_answer_cat_id,
                                            "answer_cat_id": $answer_cat_id
                                        };
                                        $html += "<div class='ec-answers answer-for-cat-" + $answer_cat_id + "'><label><input  onclick='Registration.eventOptOnClick($(this))' data-options='" + $dataopt + "' data-mini='true' data-stepid='" + $step_id + "' data-answercatid='" + $answer_cat_id + "' data-appanswercatid='" + $app_answer_cat_id + "' data-answerid='" + this.answer_id + "' data-answer='" + this.answer + "' value='" + JSON.stringify($ans) + "' type='" + $type + "'  class='expand_collapse_answer' name='step_answers["+$step_id+"]["+$answer_cat_id+"][]'>" + this.answer + "</label></div>";
                                    });
                                    $html += "<div class='add-more-holder'>";
                                    if($allow_add_answer==1){
                                        $html += "<button data-options='" + $dataopt + "' data-answercatid='" + $answer_cat_id + "' data-appanswercatid='" + $app_answer_cat_id + "' data-role='none' data-choicetype='" + $is_multiple_choice + "' data-theme='d' data-template='steps_expand_collapse' data-stepid='" + $step_id + "' data-holder='answer-for-cat-" + $answer_cat_id + "' class='show-popup ui-btn  ui-corner-all ui-my-icon-plus'>Lägg till</button>";
                                    }
                                    $html += "<a  href='javascript:void(0)' data-iscustomcat='no' data-answercat='"+$answer_cat_id+"' data-identifier='custom-steps_expand_collapse' class='delete-options border-radius ui-btn ui-btn-up-a hide ui-btn-inline ui-my-icon-delete'  data-role='button'  onclick='Registration.deleteOptions($(this))'>Radera eget svar</a>";
                                    $html += "</div>";
                                    $html += "</div>";
                                });
                                $html += "</div></div>";
                                if (this.allow_to_add_answer_category == 1) {
                                    $html += "<div class='text-step-button'><a data-allowaddanswer='"+$allow_add_answer+"' data-options='" + $dataopt + "' data-choicetype='" + $is_multiple_choice + "' data-template='" + this.template + "'  data-holder='template-expand-collapse' data-class='expand_collapse_answer' data-stepid='" + $step_id + "'  href='#popupAddAnswerCat' class='show-popup-cat border-radius ui-btn ui-btn-inline ui-my-icon-plus'  data-role='button' data-rel='popup'>Lägg till svar</a></div>";
                                }else if(this.allow_to_add_answer_category != 1 && $allow_add_answer==1){
                                   // $html += "<div class='text-step-button'><a  href='javascript:void(0)' data-identifier='custom-" + this.template + "' class='delete-options border-radius ui-btn ui-btn-up-a hide ui-btn-inline ui-my-icon-delete'  data-role='button'  onclick='Registration.deleteOptions($(this))'>Radera eget svar</a></div>";
                                }
                                $html +="</div>";
                            }
                            $html += "</div>";
                        }
                    });
                    
                    $("#RegistrationTask_Steps").find("div.registration-steps-holder").empty().html($html);

                   

                  //  Registration.preCheckOldRegistrationAnswers($checkAnswer);
                   // Registration.preCheckOldRegistrationAnswers(Registration.oldSelectedOptions); //uncomment this if user can edit old registration

                    if($old_assignments==null){
                        Registration.resetControls();
                    }

                    //make sure user cannot select more than the allowed options
                    $(".expand_collapse_answer,.sentence_answer,.keyword_answer").on("click", function() {
                       /* var obj = $(this);
                        $answerCatID = obj.attr("data-answercatid");
                        $rawoptions = obj.attr("data-options");
                        $id = "step_" + obj.attr("data-stepid");
                        $options = $rawoptions.split("-");
                        $is_multiple_choice = $options[0];
                        $max_selection_allowed = $options[1]; 
                        if ($answerCatID > 0) {
                            if ($is_multiple_choice == 1) {
                                $chkdlen = $("#" + $id).find("#collapsible_" + $answerCatID).find(".expand_collapse_answer:checked").size();
                                if ($chkdlen > $max_selection_allowed) {
                                    obj.prop("checked", false);
                                    return false;
                                }
                            }else{

                                console.clear();
                                console.warn("Single choice expand collapse step "+$id);
                                //in single choice, allow only to use one option irrespective of the category
                                $("#" + $id).find("[data-role='collapsible']").find(".expand_collapse_answer").prop("checked",false);
                                obj.prop("checked",true);
                                Registration.refreshControls();
                            }
                        } else {
                            $name = obj.hasClass("sentence_answer") ? "sentence" : "keyword";
                            if ($is_multiple_choice == 1) {
                                $chkdlen = $("#" + $id).find("." + $name + "_answer:checked").size();
                                if ($chkdlen > $max_selection_allowed) {
                                    obj.prop("checked", false);
                                    return false;
                                }
                            }
                        }*/
                    });

                     

                    //If step is date time type, bind date and time picker widget to respective button
                    if (datetime === true) {
                        //change-incident-date
                        var myDate = new Date();
                        var curYear = myDate.getFullYear();
                        $('#picker-selected-date').mobiscroll().date({
                            theme: 'ios7',
                            display: 'bottom',
                            dateOrder: 'dd M yy',
                            dateFormat: "d MMMM yy",
                            setText: "Lägg till",
                            cancelText: "Avbryt",
                            maxDate: new Date(),
                            dayNames: ['Söndag', 'Måndag', 'Tisdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lördag'],
                            monthNames:['januari', 'februari', 'mars', 'april', 'maj', 'juni', 'juli', 'augusti', 'september', 'oktober', 'november', 'december'],
                            monthNamesShort: ['jan','feb','mars','apr','maj','juni','juli','aug','sept','okt','nov','dec'],
                            minDate:new Date(curYear-2,1,1),
                            onSelect: function(obj){
                               var selectedDate = "";
                               var objd = Registration.monthToEnglish(obj);
                               $("input[name='incident_date']").val(dateFormat(objd,"yyyy-mm-dd"));
                            /*   console.clear();
                               console.warn("Cdate = "+Registration.localizeMonth(dateFormat(new Date(), "yyyy-mm-dd"))+", Seldate = "+dateFormat(objd, "yyyy-mm-dd"))
                              */ if(Registration.localizeMonth(dateFormat(new Date(), "yyyy-mm-dd"))==dateFormat(objd, "yyyy-mm-dd")){
                                    selectedDate = "Idag, "+dateFormat(objd,"d mmmm yyyy");
                                    $('#picker-selected-time').mobiscroll('option', 'maxDate', new Date());
                               }else{
                                    selectedDate = dateFormat(objd,"d mmmm yyyy");
                                     $('#picker-selected-time').mobiscroll('option', 'maxDate', null);
                               }
                               $date = Registration.localizeMonth(selectedDate);

                               $("#picker-selected-date").val($date);
                            }
                        });

                        $('#picker-selected-date-only').mobiscroll().date({ //for date only template
                            theme: 'ios7',
                            display: 'bottom',
                            dateOrder: 'dd M yy',
                            dateFormat: "d MMMM yy",
                            setText: "Lägg till",
                            cancelText: "Avbryt",
                            maxDate: new Date(),
                            dayNames: ['Söndag', 'Måndag', 'Tisdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lördag'],
                            monthNames:['januari', 'februari', 'mars', 'april', 'maj', 'juni', 'juli', 'augusti', 'september', 'oktober', 'november', 'december'],
                            monthNamesShort: ['jan','feb','mars','apr','maj','juni','juli','aug','sept','okt','nov','dec'],
                            minDate:new Date(curYear-2,1,1),
                            onSelect: function(obj){
                               var selectedDate = "";
                               var objd = Registration.monthToEnglish(obj);
                               $("input[name='date_only']").val(dateFormat(objd,"yyyy-mm-dd"));
                            /*   console.clear();
                               console.warn("Cdate = "+Registration.localizeMonth(dateFormat(new Date(), "yyyy-mm-dd"))+", Seldate = "+dateFormat(objd, "yyyy-mm-dd"))
                              */ if(Registration.localizeMonth(dateFormat(new Date(), "yyyy-mm-dd"))==dateFormat(objd, "yyyy-mm-dd")){
                                    selectedDate = "Idag, "+dateFormat(objd,"d mmmm yyyy");
                                   
                               }else{
                                    selectedDate = dateFormat(objd,"d mmmm yyyy");
                               }
                               $date = Registration.localizeMonth(selectedDate);

                               $("#picker-selected-date-only").val($date);
                            }
                        });
                       

                        //// 1= Hours, 2 = Hours + 30 Minute intervals, 3 = Hours + Minutes
                        //$stepsMin = stepMinute == 1 ? 60 : (stepMinute == 2 ? 30 : 1);
                        $stepsMin =  60; //as per recent requirement patient can select hour only

                        $('#picker-selected-time').mobiscroll("setValue","13").time({
                            theme: 'ios7',
                            display: 'bottom',
                            stepMinute: $stepsMin,
                            setText: "Lägg till",
                            cancelText: "Avbryt",
                            timeWheels: "ii:HH",
                            timeFormat: "hh:ii a",
                            maxDate: new Date(),
                            onShow: function(){
                                $("div[aria-label='Minutes']").find(".dw-i").html("Kl");
                                $(this).mobiscroll("setValue",$("input[name='incident_time']").val());
                            },
                            onSelect: function(obj){
                                $("input[name='incident_time']").val(Registration.convertDateTo24Hour(obj));
                                $("#picker-selected-time").val(Registration.convertDateTo24Hour(obj,1));
                            }
                        });

                        $("#change-incident-date").on("click", function() {
                            $('#picker-selected-date').trigger("focus");
                        });

                         $("#change-date").on("click", function() {
                            $('#picker-selected-date-only').trigger("focus");
                        });

                        $("#change-incident-time").on("click", function() {
                            $('#picker-selected-time').trigger("focus");
                        });
                    }


                    //open popup to add answer category
                    $(document).on("click",".show-popup-cat", function() {
                        $stepid = $(this).attr("data-stepid");
                        $destination = $(this).attr("data-holder");
                        $template = $(this).attr("data-template");
                        $controltype = $(this).attr("data-choicetype"); //radio or checkbox
                        $dataopt = $(this).attr("data-options"); //radio or checkbox
                        $allowcustomanswer = $(this).attr("data-allowaddanswer");

                        $answercat = "answer_cat";

                        $('#popupAddAnswerCat').popup("open").on("popupafteropen",function(event,ui){
                            $("#add_custom_answer_cat").focus();
                            filehelper.showHideKeyBoard("show");
                        });

                                               
                        /*$('#popupAddAnswerCat').popup("option",{
                            beforeposition: function() {
                                $(this).css({
                                    width: window.innerWidth - 20
                                });
                            },
                            x: (window.innerWidth- $('#popupAddAnswerCat').width())/2,
                            y: (window.innerHeight- $('#popupAddAnswerCat').height())/2,
                            theme: "d",
                            transition: "pop",
                            shadow: false,
                            tolerance: "2,2"
                        }).popup("open").on("popupafteropen",function(event,ui){
                             $("#add_custom_answer_cat").focus();
                             $("#add_custom_answer_cat").on("focus",function(){
                             $('#popupAddAnswerCat').popup("reposition",{
                                      x: (window.innerWidth-$('#popupAddAnswerCat').width())/2,
                                      y: (window.innerHeight-$('#popupAddAnswerCat').height())/2
                                });
                            });
                        });*/

                       

                        $(".add-custom-answers-cat").on("click", function() {
                            $choicetype = $controltype == 1 ? "checkbox" : "radio";
                            $custom_answer_cat = $.trim($("#add_custom_answer_cat").val());
                            if ($custom_answer_cat == "") return false;

                            $("#add_custom_answer_cat").val("");
                            $newc = parseInt($("#step_" + $stepid).find(".answer_cat").length) + 1;
                            $str = "";
                            $str += "<div id='collapsible_" + $newc + "' data-role='collapsible' style='position:relative;'>";

                            $ans_cat = {
                                "step_id": $stepid,
                                "temp_id": $newc,
                                "is_custom_answer": 1,
                                "is_answer_category": 1,
                                "custom_answer_cat": $custom_answer_cat
                            };
                            $str += "<h3>" + $custom_answer_cat;
                            $str += "<span data-role='none' onclick='Registration.deleteAnswerCategory($(this),event)' class='delete-category ui-icon-delete ui-corner-all'>&nbsp;</span>";
                            $str += "</h3>";
                            $str += "<input type='hidden' class='answer_cat' name='step_answers["+$stepid+"][]' value='" + JSON.stringify($ans_cat) + "'/>";

                            $str += "<div class='ec-answers temp-answer-for-cat-" + $newc + "'></div>";

                            //   $str +="<div class='fl'><button data-choicetype='"+$controltype+"' data-theme='d' data-template='steps_expand_collapse' data-stepid='"+$stepid+"' data-holder='temp-answer-for-cat-"+$newc+"' class='show-popup  ui-btn ui-btn-up-d ui-icon-plus ui-btn-icon-notext ui-corner-all ui-icon-addmore'>+</button></div>"; 
                            $str += "<div class='add-more-holder'>";
                            if($allowcustomanswer==1){
                                    $str += "<button data-options='" + $dataopt + "' data-newlyadded='1' data-answercatid='" + $newc + "' data-role='none' data-choicetype='" + $controltype + "' data-theme='d' data-template='steps_expand_collapse' data-stepid='" + $stepid + "' data-holder='temp-answer-for-cat-" + $newc + "' class='show-popup ui-btn ui-corner-all ui-my-icon-plus'>Lägg till</button>";                                
                            }
                            $str += "<a  href='javascript:void(0)' data-iscustomcat='yes' data-answercat='"+$custom_answer_cat+"' data-identifier='custom-steps_expand_collapse' class='delete-options border-radius ui-btn ui-btn-up-a hide ui-btn-inline ui-my-icon-delete'  data-role='button'  onclick='Registration.deleteOptions($(this))'>Radera eget svar</a>";
                            $str += "</div>";
                            //  $str +="<div class='fl'><a href='#popupAddAnswer' data-choicetype='"+$controltype+"' data-template='steps_expand_collapse' data-stepid='"+$stepid+"' data-holder='temp-answer-for-cat-"+$newc+"' class='show-popup ui-btn ui-icon-plus ui-btn-icon-notext'>Icon only</a></div>";              
                            $str += "</div>";
                            // $str ="<label><input data-mini='true' data-stepid='"+$stepid+"' data-answer='"+$custom_answer_cat+"' data-answerid='0' value='checked' type='"+$choicetype+"' class='"+$control+"' name='"+$control+"[]'>"+$custom_answer+"</label>";
                            var existingOptions = [];
                            $("#step_" + $stepid).find(".ui-collapsible-set").find("h3").each(function() {
                                $existinganswrs = $(this).text();
                                $existinganswrs = $existinganswrs.toLowerCase();
                                existingOptions.push($existinganswrs);
                            });

                            if ($.inArray($custom_answer_cat.toLowerCase(), existingOptions) !== -1) {
                                msgBox("Detta alternativet finns redan");
                                return false;
                            } else {
                                $("#step_" + $stepid).find(".ui-collapsible-set").append($str);
                                 
                            }

                           filehelper.showHideKeyBoard("hide");

                            $('#popupAddAnswerCat').popup("close");

                            Registration.refreshControls();
                         //   $("#step_" + $stepid).find(".temp-answer-for-cat-" + $newc).parent("div").prev("h3").parent("div").before("<span data-role='none' onclick='Registration.deleteAnswerCategory($(this),event)' class='delete-category ui-icon-delete ui-corner-all'>&nbsp;</span>");

                             Registration.floatKeywords("steps_expand_collapse");

                           

                            scrolls["RegistrationTask_Steps"].refresh();

                        });
                    });

                    $(document).on("click", ".show-popup", function(e) {
                        $triggerer = $(this);
                        e.stopImmediatePropagation();
                        e.preventDefault();
                        $stepid = $(this).attr("data-stepid");
                        $control = $(this).attr("data-class");
                        $destination = $(this).attr("data-holder");
                        $template = $(this).attr("data-template");
                        $answer_cat_id = $(this).attr("data-answercatid") || 0;
                        $app_answer_cat_id = $(this).attr("data-appanswercatid") || 0;
                        $controltype = $(this).attr("data-choicetype"); //radio or checkbox
                        $dataopt = $(this).attr("data-options");
                        $is_new_cats_answer = $(this).attr("data-newlyadded") || 0;
                        $specialcase = $(this).attr("data-specialcase");
                        console.log( $specialcase);
                      
                        $('#popupAddAnswer').popup("open").on("popupafteropen",function(event,ui){
                                $("#add_custom_answer").focus();
                                filehelper.showHideKeyBoard("show");
                        });

                         /*$('#popupAddAnswer').popup("option",{
                            beforeposition: function() {
                                $(this).css({
                                    width: window.innerWidth - 20
                                });
                            }, 
                            positionTo: "window",
                            theme: "d",
                            transition: "pop",
                            shadow: false,
                            tolerance: "2,2"
                        }).popup("open").on("popupafteropen",function(event,ui){
                            $("#add_custom_answer").focus();
                        });

                        $("#add_custom_answer").on("focus",function(){
                                $('#popupAddAnswer').popup("reposition",{
                                    y: (window.innerHeight-$('#popupAddAnswer').height())/2
                                });
                        });*/
                        

                        $(".add-custom-answers").on("click", function() {
                            $custom_answer = $.trim($("#add_custom_answer").val());
                            $template = $("#step_" + $stepid).attr("data-template");

                            if ($custom_answer == "") return false;

                            $("#add_custom_answer").val("");
                            $choicetype = $controltype == 1 ? "checkbox" : "radio";

                            if($choicetype=="radio"){//reset other options before selecting newly added option
                                  $("#step_" + $stepid).find("input[type='radio']").prop("checked",false);
                                  $("#step_" + $stepid).find("input[type='radio']").removeAttr("checked");
                            }

                            if ($answer_cat_id > 0 || $app_answer_cat_id>0) {
                                var d = $dataopt.split("-");
                                $checked_length = $("#step_" + $stepid).find("#collapsible_"+$answer_cat_id).find(".expand_collapse_answer:checked").size();



                                if(d[0]==0 || d[1]>$checked_length){
                                    $checked = " checked='checked'";
                                }else{
                                    $checked = "";
                                }


                                if($is_new_cats_answer==1)
                                {
                                    $ans = {
                                        "step_id": $stepid,
                                        "is_custom_answer": 1,
                                        "is_answer_category": 0,
                                        "temp_id": $answer_cat_id,
                                        "is_member_of_new_cat": $is_new_cats_answer,
                                        "custom_answer": $custom_answer, 
                                        "specialcase": $specialcase 
                                    };
                                    $anshidden = {
                                        "step_id": $stepid,
                                        "is_custom_answer": 1,
                                        "is_answer_category": 0,
                                        "temp_id": $answer_cat_id,
                                        "is_member_of_new_cat": $is_new_cats_answer,
                                        "custom_answer": $custom_answer,
                                        "is_checked": $.trim($checked)=="" ? false : true, 
                                        "specialcase": $specialcase 
                                    };
                                }else{
                                    $ans = {
                                        "step_id": $stepid,
                                        "is_custom_answer": 1,
                                        "is_answer_category": 0,
                                        "answer_cat_id": $answer_cat_id,
                                        "app_answer_cat_id": $app_answer_cat_id,
                                        "app_answer_cat_id": $app_answer_cat_id,
                                        "is_member_of_new_cat": $is_new_cats_answer,
                                        "custom_answer": $custom_answer, 
                                        "specialcase": $specialcase 
                                    };
                                    $anshidden = {
                                        "step_id": $stepid,
                                        "is_custom_answer": 1,
                                        "is_answer_category": 0,
                                        "answer_cat_id": $answer_cat_id,
                                        "app_answer_cat_id": $app_answer_cat_id,
                                        "is_member_of_new_cat": $is_new_cats_answer,
                                        "custom_answer": $custom_answer,
                                        "is_checked": $.trim($checked)=="" ? false : true , 
                                        "specialcase": $specialcase 
                                    };
                                }
                                //" + JSON.stringify($ans) + "
                                //$str = "<div class='ec-answers answer-for-cat-" + $answer_cat_id + "'><label><input type='hidden'  name='step_answers["+$stepid+"][]' value='"+JSON.stringify($anshidden)+"'><input data-options='" + $dataopt + "' data-delidentifier='custom-" + $template + "' data-mini='true' data-stepid='" + $stepid + "' data-answercatid='" + $answer_cat_id + "' data-appanswercatid='" + $app_answer_cat_id + "' data-answerid='0' data-answer='" + $custom_answer + "' onclick='Registration.updateCustomAnswers();' value='' data-customoption='true' type='" + $choicetype + "'  class='expand_collapse_answer' name='step_answers_temp["+$stepid+"][]'>" + $custom_answer + "</label></div>";
                               

                                $str = "<div class='ec-answers answer-for-cat-" + $answer_cat_id + "'><label><input type='hidden'  name='step_answers["+$stepid+"][]' value='"+JSON.stringify($anshidden)+"'><input  onclick='Registration.eventOptOnClick($(this))' data-options='" + $dataopt + "' data-delidentifier='custom-" + $template + "' data-mini='true' data-stepid='" + $stepid + "' data-answercatid='" + $answer_cat_id + "' data-appanswercatid='" + $app_answer_cat_id + "' data-answerid='0' data-answer='" + $custom_answer + "' onclick='Registration.updateCustomAnswers();' value='' data-customoption='true' type='" + $choicetype + "'  class='expand_collapse_answer' name='step_answers["+$stepid+"]["+$answer_cat_id+"][]' "+$checked+" >" + $custom_answer + "</label></div>";
                            } else {
                                $ans = {
                                    "step_id": $stepid,
                                    "is_custom_answer": 1,
                                    "is_answer_category": 0,
                                    "custom_answer": $custom_answer, 
                                    "specialcase": $specialcase 
                                };

                                
                                //" + JSON.stringify($ans) + "

                                var d = $dataopt.split("-");
                                $checked_length = $("#step_" + $stepid).find("." + $control+":checked").size();
                                if(d[0]==0 || d[1]>$checked_length){
                                    $checked = " checked='checked'";
                                }else{
                                    $checked = "";
                                }

                                $anshidden = {
                                    "step_id": $stepid,
                                    "is_custom_answer": 1,
                                    "is_answer_category": 0,
                                    "custom_answer": $custom_answer,
                                    "is_checked": $.trim($checked)=="" ? false : true, 
                                    "specialcase": $specialcase 
                                };

                                $str = "<label><input type='hidden'  name='step_answers["+$stepid+"][]' value='"+JSON.stringify($anshidden)+"' /><input  onclick='Registration.eventOptOnClick($(this))' data-options='" + $dataopt + "' data-delidentifier='custom-" + $template + "' data-mini='true' data-stepid='" + $stepid + "' data-answer='" + $custom_answer + "' data-answerid='0' onclick='Registration.updateCustomAnswers();' value='' type='" + $choicetype + "'  data-customoption='true' class='" + $control + "' name='step_answers["+$stepid+"][]' "+$checked+">" + $custom_answer + "</label>";
                            }
                            var existingOptions = [];
                            $("#step_" + $stepid).find("." + $control).each(function() {
                                $existinganswrs = $(this).attr("data-answer");
                                $existinganswrs = $existinganswrs.toLowerCase();
                                existingOptions.push($existinganswrs);
                            });

                            if ($.inArray($custom_answer.toLowerCase(), existingOptions) !== -1) {
                                msgBox("Detta alternativet finns redan");
                                return false;
                            } else {
                                if ($template == "steps_expand_collapse") {
                                    $triggerer.parent("div.add-more-holder ").before($str);
                                    $triggerer.parent("div.add-more-holder ").find("a[data-identifier='custom-steps_expand_collapse']").removeClass("hide");
                                    //custom-steps_expand_collapse
                                     //now if options in category is checked, don't allow use collapse it
                                    $triggerer.parents(".ui-collapsible-content").prev("h3").find("a.ui-collapsible-heading-toggle").on("click", function(){
                                        var t = $("#step_" + $stepid).find("#collapsible_" + $answer_cat_id).find(".expand_collapse_answer:checked").size();
                                        if(t>0){
                                            return false;
                                        }else{
                                            return true;
                                        }
                                    })
                                } else {
                                    $("#step_" + $stepid).find("." + $destination).append($str);
                                    $("#step_" + $stepid).find("a[data-identifier='custom-" + $template + "']").removeClass("hide");

                                }

                               
                                //now preselect newly added option only if this doesnot exceeds the maximum allowed selection
                            }

                            
                            filehelper.showHideKeyBoard("hide");

                            $('#popupAddAnswer').popup("close");
                            
                            Registration.refreshControls();

                            Registration.floatKeywords($template);

                            

                            $(".delete-options").removeClass("disabled");

                            scrolls["RegistrationTask_Steps"].refresh();
                        });
                    });

                    Registration.showHideSteps(1);
                    Registration.refreshControls();
                    changepage("RegistrationTask_Steps");

                    enableIScroll();
                    scrolls["RegistrationTask_Steps"].refresh();

                    Registration.floatKeywords("steps_keywords");
                    Registration.floatKeywords("steps_expand_collapse");

                    //refresh scroll when expand collapse is done
                    
                    $(document).on( "collapse", ".ui-collapsible", function( event, ui ){
                        scrolls["RegistrationTask_Steps"].refresh();
                    }).on( "expand", ".ui-collapsible", function( event, ui ){
                        scrolls["RegistrationTask_Steps"].refresh();
                    }); 

                }
            } else {
                msgBox(MESSAGE.NO_INTERNET);
            }
        });
    },
    
    refreshControls: function() {
        if ($("input[type='checkbox'],input[type='radio']").length > 0) {
            $("input[type='checkbox'],input[type='radio']").checkboxradio().checkboxradio("refresh");
        }

        if ($("div[data-role='collapsibleset']").length > 0) {
            $("div[data-role='collapsibleset']").collapsibleset().collapsibleset("refresh");
        }

        if ($("button[data-role='button']").length > 0) {
            $("button[data-role='button']").button().button("refresh");
        }
    },

    showHideSteps: function(sort_order) {


        $sel = $("#RegistrationTask_Steps").find("div.registration-steps-holder");
        //<div class="fl steps-counter">Step 1 of 16</div>
        $totalSteps = $sel.find(".step-registration-contents").length;

        if(sort_order>$totalSteps) sort_order = $totalSteps;

        $("#RegistrationTask_Steps").find(".steps-counter").html("Steg " + sort_order + " av " + $totalSteps);
        $sel.find(".step-registration-contents").addClass("hide");
        $sel.find(".step-" + sort_order).removeClass("hide");

        $template = $sel.find(".step-" + sort_order).attr("data-template");
        currentRegStepID = $sel.find(".step-" + sort_order).attr("id");

        if(sort_order==$totalSteps){
            $(".reg-navigation-holder").removeClass("hide").addClass("hide");
            $(".save-nav-holder").removeClass("hide");
        }else{
            $(".reg-navigation-holder").removeClass("hide");
            $(".save-nav-holder").addClass("hide");
        }

        var fromSummary = 0;
        if(arguments.length>1)
        {
            fromSummary = 1;
        }

        if($template=="steps_summary"){
            Registration.generateSummary();
        }else if($template=="steps_text"){
            $(".reg-navigation-holder").addClass("hide");
            $(".save-nav-holder").addClass("hide");
            if(sort_order==$totalSteps){
                $(".step-txt-btn").attr("onclick","Registration.SaveRegistration()");
            }
        }

       /* if ($template != "steps_summary" && $template != "steps_text") {
            $(".reg-navigation-holder").removeClass("hide");
            $(".save-nav-holder").addClass("hide");
        } else {
            $(".reg-navigation-holder").removeClass("hide").addClass("hide");
            if ($template == "steps_summary") {
                $(".save-nav-holder").removeClass("hide");
                Registration.generateSummary();
            }
        }*/

        $(".reg-navigation-holder").attr("data-currentstep", sort_order);
        $(".reg-navigation-holder").attr("data-totalsteps", $totalSteps);
        $(".reg-navigation-holder").attr("data-currenttemplate", $template);
        $(".reg-navigation-holder").attr("data-fromsummary", fromSummary);



        Registration.adjustHeights();
        Registration.floatKeywords($template);
        if($("#RegistrationTask_Steps").is(":visible")){
            scrolls["RegistrationTask_Steps"].refresh();
        }
    },

    floatKeywords: function(template) {
        if (template == "steps_keywords") {
            $(".template-keyword").find(".ui-checkbox,.ui-radio").addClass("ui-keywords");
            $(".template-keyword").after("<div class='clear'></div>");
        } else if (template == "steps_expand_collapse") {
            $(".ec-answers").find(".ui-checkbox,.ui-radio").addClass("ui-keywords");
            $(".ui-collapsible-set").find("div.ui-collapsible-content").after("<div class='clear'></div>");
        }
    },

    adjustHeights: function() {

       /* $windowHeight = window.innerHeight;
        $headerHeight = 74;
        $bottomButtonHeight = 68;
        $statusHeight = 20;
        $contentHeight = parseInt($windowHeight) - parseInt($headerHeight) - parseInt($bottomButtonHeight)-parseInt($statusHeight);
        $(".registration-steps-holder").css("min-height", $contentHeight + "px");*/

    },

    navigateStep: function(direction) {
        
        $currentStep = $(".reg-navigation-holder").attr("data-currentstep");
        $totalSteps = $(".reg-navigation-holder").attr("data-totalsteps");
        $current_template = $(".reg-navigation-holder").attr("data-currenttemplate");
        $fromSummary = $(".reg-navigation-holder").attr("data-fromsummary");

        if (direction == "prev" && $currentStep == 1) {
            Registration.fetchRegistrations();
            return false;
        } else if (direction == "next" && $currentStep == $totalSteps) {
            return false;
        } else {

            //check if user has selected option in the current step, if not warn them, if yes navigate to next step
            if ($current_template == "steps_sentence" && direction != "prev") {
                if ($("#" + currentRegStepID).find(".sentence_answer:checked").length == 0) {
                    msgBox("Välj minst ett alternativ");
                    return false;
                }
            } else if ($current_template == "steps_keywords" && direction != "prev") {
                if ($("#" + currentRegStepID).find(".keyword_answer:checked").length == 0) {
                    msgBox("Välj minst ett alternativ");
                    return false;
                }
            } else if ($current_template == "steps_expand_collapse" && direction != "prev") {
                if ($("#" + currentRegStepID).find(".expand_collapse_answer:checked").length == 0) {
                    msgBox("Välj minst ett alternativ");
                    return false;
                }
            }

            $newStep = direction == "prev" ? parseInt($currentStep) - 1 : parseInt($currentStep) + 1;
         
            if($fromSummary==true){
                $item = $(".registration-steps-holder").find("[data-template='steps_summary']").index();
                $newStep = parseInt($item)+1;
            }
            Registration.showHideSteps($newStep);
        }

        scrolls["RegistrationTask_Steps"].scrollTo(0,0,100);
    },

    deleteOptions: function(obj) {
        $identifier = obj.attr("data-identifier");
        if ($identifier == "custom-steps_expand_collapse") {
            $chklength = obj.parent("div.add-more-holder").parent("div").find("input[data-delidentifier='" + $identifier + "']:checked");
           
            if($chklength.length>1){
                $confirmMessage = "Vill du ta bort de markerade svaren?";
            }else if($chklength.length==1){
                $ans = $chklength.attr("data-answer");
                $confirmMessage = "Vill du ta bort '"+$ans+"'?";
            }else{
                return false;
            }
        }else{
            $chklength = $("input[data-delidentifier='" + $identifier + "']:checked").length;
            if($chklength>1){
                $confirmMessage = "Vill du ta bort de markerade svaren?";
            }else if($chklength==1){
                $ans = $("input[data-delidentifier='" + $identifier + "']:checked").attr("data-answer");
                $confirmMessage = "Vill du ta bort '"+$ans+"'?";
            }else{
                return false;
            }
        }

        confirmBox($confirmMessage, function(button) {

            if (button == 1) {
                if ($identifier == "custom-steps_expand_collapse") {
                    var t =  obj.parent("div.add-more-holder").parent("div").find("input[data-delidentifier='" + $identifier + "']:checked");
                    t.each(function() {
                        $(this).parent("div").remove();;
                        
                        $length =obj.parent("div.add-more-holder").parent("div").find("input[data-delidentifier='" + $identifier + "']:checked").length;
                        if ($length == 0) {
                            obj.addClass("hide");
                        }
                    });
                }else{
                    $("input[data-delidentifier='" + $identifier + "']:checked").each(function() {
                
                        
                        $(this).parent("div").remove();;
                        
                        $length = $("input[data-delidentifier='" + $identifier + "']").length;
                        if ($length == 0) {
                            obj.addClass("hide");
                        }
                    });
                }
            }
        });
        
    },

    deleteAnswerCategory: function(obj, e) {
        e.stopImmediatePropagation();
        e.preventDefault();
        obj.parents("div.ui-collapsible").remove();
        obj.remove();
    },

    generateSummary: function() {
        //show_summary
        //$step_length = $(".step-registration-contents").length;
        $str = "<ul id='summary_list' class='summary_list' data-role='listview' data-split-icon='edit' data-split-theme='f' data-inset='true'>";
        $(".step-registration-contents").each(function() {
            $tmpl = $(this).attr("data-template");
            if ($tmpl !== "steps_text" && $tmpl !== "steps_summary") {

                $id = $(this).attr("id");
                $selector = $("#" + $id);
               // $sort_order = $selector.attr("data-sortorder");
                $get_class = $selector.attr("class");
                $sort_order = $get_class.replace(/[^0-9.]/g, "");
                $answers = [];
                $title = $selector.find(".step-title").html();

                if ($tmpl == "steps_datetime") {
                    $iTime = $("#picker-selected-time").val();
                    $iDate = $("#picker-selected-date").val();

                    if($iDate!=undefined){
                        $incident_date = "Datum: " + $("#picker-selected-date").val();
                    }else{
                        $incident_date = "Datum: Idag, " + moment().format("D MMMM YYYY").toLowerCase();
                    }
                    if($iTime!=undefined){
                        $incident_time = "Tid: " + $("#picker-selected-time").val();
                    }else{
                        $incident_time = "";
                    }
                    $selected_answer = $incident_date + "<br />" + $incident_time;
                }else if ($tmpl == "steps_date") {
                    $date_only = "Datum: " + $("#picker-selected-date-only").val();
                    $selected_answer = $date_only;
                } else {
                    $selector.find(".options-holder").find("input[name^='step_answers']:checked").each(function() {
                        $answer_cat = "";
                        if ($tmpl == "steps_expand_collapse") {
                            $answer_cat = $(this).parent("div").parent("div").parent("div").prev("h3").find(".ui-btn-text span")[0].previousSibling.nodeValue + " - ";
                            $answers.push($answer_cat + "" + $(this).attr("data-answer") + "<br/>");
                        } else {
                            $answers.push($(this).attr("data-answer"));
                        }
                    });
                    if ($tmpl == "steps_expand_collapse") {
                        $selected_answer = $answers.join("");
                    } else {
                        $selected_answer = $answers.join(", ");
                    }
                }


                /*$str += "<li>" +
                    "<a href='#'><h2>" + $title + "</h2>" +
                    "<p>" + $selected_answer + "</p></a>" +
                    "<a href='javascript:void(0)' onclick='Registration.showHideSteps(" + $sort_order + ")' data-rel='popup' data-position-to='window' data-theme='f' data-transition='pop'>Edit</a>" +
                    "</li>";*/

              
        //<div class="fl steps-counter">Step 1 of 16</div>
                $total_steps = $("#RegistrationTask_Steps").find("div.registration-steps-holder").find(".step-registration-contents").length;
                $str += "<li><div class='fl'>" +
                    "<a href='#'><h2>" + $title + "</h2>" +
                    "<p>" + $selected_answer + "</p></a>" +
                    "</div>"+
                    "<div class='fr'>"+"<div class='step-head'>Steg "+$sort_order+" av "+$total_steps+"</div><div class='summary-link'><a href='javascript:void(0)' onclick='Registration.showHideSteps(" + $sort_order + ",true)' data-fromsummary='1'  data-theme='f' class='date-time-btn border-radius ui-btn'>Ändra</a></div>" +
                    "</div><div class='clear'></div></li>";
            }
        });

        $str += "</ul>";
        $("#show_summary").html($str);

        $("#summary_list").listview().listview("refresh");
    },
    validateUserSelection: function(){
        var container = $("#frmRegistrationSteps").find(".registration-steps-holder");
        var error = 0;

        container.find(".step-registration-contents").each(function(){
            $radio_length = $(this).find("input[type='radio']").length;
            $check_length = $(this).find("input[type='checkbox']").length;
            if($radio_length>0){
                $checked_radio = $(this).find("input[type='radio']:checked").length;
                if($checked_radio==0){
                    error++;
                }
            }
            if($check_length>0){
                $checked_chkbox = $(this).find("input[type='checkbox']:checked").length;
                if($checked_chkbox==0){
                    error++;
                }
            }
        });

        if(error>0){
            msgBox("Välj minst ett alternativ för varje steg.");
            throw "Välj minst ett alternativ för varje steg.";
        }
    },


    SaveRegistration: function() {
        Registration.validateUserSelection();

        Registration.modulesSaved=0;
        offlinehelper.syncIntervalOnRegistration=setInterval(function(){
            console.log("Total count is "+Registration.modulesSaved);
            if(Registration.modulesSaved==3){
                        clearInterval(offlinehelper.syncIntervalOnRegistration);
                        msgBox("Registreringen sparades");
                        Registration.resetControls();
                        changepage("RegistrationTask"); //RegistrationTask_List
                        $(".earlier-registration").removeClass("desaturate");
                        offlinehelper.prepareForSync(false);
            }
                
        },100)

        var userdetails = $.jStorage.get('userdetails');
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","form_data":"' + $("#frmRegistrationSteps").serialize() + '"}';

        var regid=$('#registration_id').val();

        var assignment_id=$('#reg_assignment_id').val();
        var app_reg_assignment_id=$('#app_reg_assignment_id').val();
        if(assignment_id==0 && app_reg_assignment_id==0){
            var data={
                  'assignment_id':0,
                  'assignment_code':0,
                  'registration_id':regid,
                  'flow_id':0,
                  'patient_id':userdetails.user_id,
                  'incident_date':moment($("input[name='incident_date']").val()).format("YYYY-MM-DD"),
                  'incident_time':$("input[name='incident_time']").val(),
                  'date_only':$("input[name='date_only']").val(),
                  'answered_date':moment().format("YYYY-MM-DD HH:mm:ss"),
                  'stage_id':(userdetails.stage_number=="null") ? 0 : userdetails.stage_number
              };
          sqlhelper.insertJSONData('tbl_patient_assignments',data,function(){
                    sqlhelper.db.transaction(function(tx) {
                        tx.executeSql("SELECT MAX(app_assignment_id) as app_assignment_id FROM tbl_patient_assignments;", [], function(txs,results){
                            if(results.rows.length>0){ 
                                    var new_app_assignment_id=results.rows.item(0).app_assignment_id;
                                    Registration.InsertRegistrations(new_app_assignment_id,0);
                            }else{  
                                 msgBox("Error in saving registration");
                            }
                                     
                        });
                    });
          });

        }else{
             var toupdate={
                    where:{
                        'app_assignment_id': app_reg_assignment_id,
                    },
                    fields:{
                          'incident_date':moment().format("YYYY-MM-DD"),
                          'incident_time':moment().format("HH:mm:ss"),
                          'date_only':moment().format("YYYY-MM-DD"),
                          'answered_date':moment().format("YYYY-MM-DD HH:mm:ss"),
                          'edited':1
                     }
                };

           
              sqlhelper.updateData('tbl_patient_assignments',toupdate,function(){
                                            
                                 sqlhelper.db.transaction(function(tx) {
                                    tx.executeSql("DELETE FROM tbl_patient_assignment_details where app_assignment_id='"+app_reg_assignment_id+"'  OR assignment_id='"+assignment_id+"'", [], function(txs,results){
                                        console.log("All assignments are deleted. Ready to insert new assignment.");
                                    });
                                  });
                        
                                    //lastid=app_reg_assignment_id;

                                  Registration.InsertRegistrations(app_reg_assignment_id,0);


                            
                });
          }
 
        },
        InsertRegistrations:function(new_app_assignment_id,assignment_id){
        var userdetails = $.jStorage.get('userdetails');
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","form_data":"' + $("#frmRegistrationSteps").serialize() + '"}';

        var regid=$('#registration_id').val();

        var assignment_id=$('#reg_assignment_id').val();
        var app_reg_assignment_id=$('#app_reg_assignment_id').val();
        var answers=[];
        var categories=[];
        console.log("Inserting assignment detail");
        if($('.registration-steps-holder input').length>0){
            var anslengthcount=1;
            var anslength=$('.registration-steps-holder input').length;
        $('.registration-steps-holder input').each(function(i,e){
               if($(this).attr('type')=='radio' || $(this).attr('type')=='checkbox'){
                    if($(this).is( ":checked" )){
                        //console.log($(this).val());
                        if($(this).val()!="" && $(this).attr('data-customoption')!='true'){
                            var tosave= $.parseJSON($(this).val());
                               var data={
                                          'assignment_details_id':0,
                                          'app_assignment_id':new_app_assignment_id,
                                          'assignment_id':assignment_id,
                                          'registration_id':regid,
                                          'flow_id':0,
                                          'step_id':tosave.step_id,
                                          'answer_id':tosave.answer_id,
                                          'app_answer_id':tosave.app_answer_id,
                                          'assignment_code':0
                                      };
                            sqlhelper.insertJSONData('tbl_patient_assignment_details',data);
                             if(anslengthcount==anslength){
                                console.log("Returned from tbl_patient_assignment_details : modules increased 1");
                                Registration.modulesSaved++;
                            }
                             anslengthcount++;
                        }else{
                           
                             if(anslengthcount==anslength){
                                console.log("Reeturned from tbl_patient_assignment_details  : modules increased 1");
                                Registration.modulesSaved++;
                            }
                             anslengthcount++;
                        }
                    }else{
                        
                             if(anslengthcount==anslength){
                                console.log("Reeturned from tbl_patient_assignment_details  : modules increased 1");
                                Registration.modulesSaved++;
                            }
                             anslengthcount++;
                    }
               }else{
             
                             if(anslengthcount==anslength){
                                console.log("Reeturned from tbl_patient_assignment_details  : modules increased 1");
                                Registration.modulesSaved++;
                            }
                             anslengthcount++;
               }
               
        })
        }else{
             console.log("Reeturned from tbl_patient_assignment_details  : modules increased 1");
             Registration.modulesSaved++;
        }
        $ans_cat_arr={};
        console.log("Inserting Custom answers");
        if($('.registration-steps-holder input[type="hidden"]').length>0){
             var anshiddentlengthcount=1;
            var anshiddentlength=$('.registration-steps-holder input[type="hidden"]').length;
            $('.registration-steps-holder input[type="hidden"]').each(function(i,e){
                $self_input=$(this);
                    var json=$(this).val();
                    if(json!=""){
                        try {
                            json=$.parseJSON(json);
                            if(json.is_custom_answer==1 && json.is_answer_category==0 && json.temp_id==undefined){     
                                sqlhelper.db.transaction(function(tx) {
                                    tx.executeSql("SELECT MAX(sort_order) as sort_id FROM tbl_answers;", [], function(txs,results){
                                                 lastid=results.rows.item(0).sort_id;
                                                 if(json.specialcase==1){
                                                            var data={
                                                                            'answer_id':0,
                                                                            'answer':json.custom_answer,
                                                                            'step_id':0,
                                                                            'answer_cat_id':json.answer_cat_id,
                                                                            'app_answer_cat_id':json.app_answer_cat_id,
                                                                            'added_date':moment().format("YYYY-MM-DD"),
                                                                            'last_updated':moment().format("YYYY-MM-DD"),
                                                                            'answer_status':1,
                                                                            'sort_order':lastid+1,
                                                                            'answer_type':'custom',
                                                                            'mapped_answer_id':0,
                                                                            'special_answer':1
                                                                        };
                                                 }else{
                                                        var data={
                                                                            'answer_id':0,
                                                                            'answer':json.custom_answer,
                                                                            'step_id':json.step_id,
                                                                            'answer_cat_id':json.answer_cat_id,
                                                                            'app_answer_cat_id':json.app_answer_cat_id,
                                                                            'added_date':moment().format("YYYY-MM-DD"),
                                                                            'last_updated':moment().format("YYYY-MM-DD"),
                                                                            'answer_status':1,
                                                                            'sort_order':lastid+1,
                                                                            'answer_type':'custom',
                                                                            'mapped_answer_id':0,
                                                                            'special_answer':0
                                                                        };
                                                }

                                                
                                                sqlhelper.insertJSONData('tbl_answers',data,function(){

                                                     sqlhelper.db.transaction(function(tx) { 
                                                        tx.executeSql("SELECT MAX(app_answer_id) as app_answer_id FROM tbl_answers where answer like '%"+json.custom_answer+"%';", [], function(txs,results){
                                                                app_answer_id=results.rows.item(0).app_answer_id;
                                                                         
                                                                          if(json.is_checked==true){


                                                                                 var data={
                                                                                      'assignment_details_id':0,
                                                                                      'app_assignment_id':new_app_assignment_id,
                                                                                      'assignment_id':assignment_id,
                                                                                      'registration_id':regid,
                                                                                      'flow_id':0,
                                                                                      'step_id':json.step_id,
                                                                                      'answer_id':0,
                                                                                      'app_answer_id':app_answer_id,
                                                                                      'assignment_code':0
                                                                                 };

                                                                                sqlhelper.insertJSONData('tbl_patient_assignment_details',data,function(){
                                                                                        if(anshiddentlengthcount==anshiddentlength){
                                                                                                console.log("Reeturned from tbl_answers  : modules increased 2");
                                                                                                Registration.modulesSaved++;
                                                                                        }
                                                                                        anshiddentlengthcount++;
                                                                                });
                                                                            }else{
                                                                                 if(anshiddentlengthcount==anshiddentlength){
                                                                                                console.log("Reeturned from tbl_answers  : modules increased 2");
                                                                                                Registration.modulesSaved++;
                                                                                        }
                                                                                        anshiddentlengthcount++;
                                                                            }
                                                                           
                                                                            if(json.specialcase==1){
                                                                                    var userdetails = $.jStorage.get('userdetails');
                                                                                    userdetails.specialAnswers=userdetails.specialAnswers+","+app_answer_id;

                                                                                    userdetails.tokenkey=$.jStorage.get('bip_jwt');
                                                                                    
                                                                                    $.jStorage.set('userdetails',userdetails);
                                                                                    var toupdate={
                                                                                                where:{
                                                                                                    'user_id': userdetails.user_id,
                                                                                                },
                                                                                                fields:{
                                                                                                      'specialAnswers':userdetails.specialAnswers
                                                                                                      
                                                                                                 }
                                                                                            };
                                                                                    sqlhelper.updateData('tbl_user',toupdate);
                                                                        


                                                                            }
                                                               

                                                                });

                                                        });

                                                    });

                                              
                                            
                                    });
                                });
                            } else{
                                if(anshiddentlengthcount==anshiddentlength){
                                 console.log("Reeturned from tbl_answers  : modules increased 2");
                                Registration.modulesSaved++;
                            }
                            anshiddentlengthcount++;
                            }
                        }
                        catch(err) {
                           if(anshiddentlengthcount==anshiddentlength){
                                 console.log("Reeturned from tbl_answers  : modules increased 2");
                                Registration.modulesSaved++;
                            }
                            anshiddentlengthcount++;
                        }
                        
                    }else{
                           if(anshiddentlengthcount==anshiddentlength){
                                 console.log("Reeturned from tbl_answers  : modules increased 2");
                                Registration.modulesSaved++;
                            }
                            anshiddentlengthcount++;
                    }
            });
        }else{
             console.log("Reeturned from tbl_answers  : modules increased 2");
            Registration.modulesSaved++;
        }
        // $cat_arr=[];
        console.log("Inserting Custom answers with categories");
        if($('.answer_cat').length>0){
                var totalanscat=$('.answer_cat').length;
                var nowtotal=1;
                $('.answer_cat').each(function(){
                        self=$(this);
                        var data=$.parseJSON($(this).val());

                        sqlhelper.db.transaction(function(tx) {
                                tx.executeSql("SELECT MAX(sort_order) as cat_sort_order FROM tbl_answer_category;", [], function(txs,resultss){
                                        app_lastid=resultss.rows.item(0).app_answer_cat_id;
                                        var dataa={
                                            'answer_cat_id':0,
                                            'answer_cat_name':data.custom_answer_cat,
                                            'step_id':data.step_id,
                                            'added_date':moment().format("YYYY-MM-DD"),
                                            'last_updated':moment().format("YYYY-MM-DD"),
                                            'answer_cat_status':1,
                                            'sort_order':app_lastid,
                                            'answer_type':'custom',
                                            'mapp_cat_id':0,
                                        }; 
                                        
                                        sqlhelper.insertJSONData('tbl_answer_category',dataa,function(){

                                            sqlhelper.db.transaction(function(tx) {
                                                tx.executeSql("SELECT MAX(app_answer_cat_id) as app_answer_cat_id FROM tbl_answer_category where answer_cat_name like '%"+data.custom_answer_cat+"%';", [], function(txs,resultss){   
                                                     lastid=resultss.rows.item(0).app_answer_cat_id;
                                                     console.log("Last inserted category is "+lastid);
                                                    sqlhelper.db.transaction(function(tx) {
                                                        tx.executeSql("SELECT MAX(sort_order) as sort_id FROM tbl_answers;", [], function(txs,results){
                                                           lastsort=results.rows.item(0).sort_id;
                                                           $tempLength = self.parent('div').find('.answer-for-cat-'+data.temp_id+' input').length
                                                           if($tempLength>0){
                                                                self.parent('div').find('.answer-for-cat-'+data.temp_id+' input').each(function(){
                                                                  $self_input=$(this);
                                                                    var json=$(this).val();
                                                                    if(json!=""){
                                                                        try {
                                                                              json=$.parseJSON(json);
                                                                                if(json.is_custom_answer==1){
                                                                                        var data={
                                                                                            'answer_id':0,
                                                                                            'answer':json.custom_answer,
                                                                                            'step_id':json.step_id,
                                                                                            'app_answer_cat_id':lastid,
                                                                                            'added_date':moment().format("YYYY-MM-DD"),
                                                                                            'last_updated':moment().format("YYYY-MM-DD"),
                                                                                            'answer_status':1,
                                                                                            'sort_order':lastsort+1,
                                                                                            'answer_type':'custom',
                                                                                            'mapped_answer_id':0,
                                                                                            'special_answer':0
                                                                                        };

                                                                                        sqlhelper.insertJSONData('tbl_answers',data,function(){
                                                                                                sqlhelper.db.transaction(function(tx) {
                                                                                                     tx.executeSql("SELECT MAX(app_answer_id) as app_answer_id FROM tbl_answers where answer like '%"+json.custom_answer+"%';", [], function(txs,results){
                                                                                                            app_answer_id=results.rows.item(0).app_answer_id;
                                                                                                             if(json.is_checked==true){
                                                                                                                    var data={
                                                                                                                          'assignment_details_id':0,
                                                                                                                          'app_assignment_id':new_app_assignment_id,
                                                                                                                          'assignment_id':assignment_id,
                                                                                                                          'registration_id':regid,
                                                                                                                          'flow_id':0,
                                                                                                                          'step_id':json.step_id,
                                                                                                                          'answer_id':0,
                                                                                                                          'app_answer_id':app_answer_id,
                                                                                                                          'assignment_code':0
                                                                                                                      };
                                                                                                                      sqlhelper.insertJSONData('tbl_patient_assignment_details',data,function(){
                                                                                                                         if(nowtotal==totalanscat){
                                                                                                                             console.log("Reeturned from tbl_patient_assignment_details  : modules increased 3");
                                                                                                                             Registration.modulesSaved++;
                                                                                                                            // msgBox("Registration saved successfully");
                                                                                                                            //  if(navigator.onLine &&  offlinehelper.syncstarted==false)
                                                                                                                            //     offlinehelper.prepareForSync();
                                                                                                                            // changepage("RegistrationTask_List");
                                                                                                                        }
                                                                                                                        nowtotal++;
                                                                                                                      });
                                                                                                              }
                                                                                                    });
                                                                                                });

                                                                                        });
                                                                                       
                                                                                }
                                                                        }
                                                                        catch(err) {
                                                                            if(nowtotal==totalanscat){
                                                                                             console.log("Reeturned from tbl_patient_assignment_details  : modules increased 3");
                                                                                             Registration.modulesSaved++;
                                                                                            // msgBox("Registration saved successfully");
                                                                                            //  if(navigator.onLine &&  offlinehelper.syncstarted==false)
                                                                                            //     offlinehelper.prepareForSync();
                                                                                            // changepage("RegistrationTask_List");
                                                                                        }
                                                                                        nowtotal++;
                                                                        }
                                                                      
                                                                    }else{
                                                                         if(nowtotal==totalanscat){
                                                                                             console.log("Reeturned from tbl_patient_assignment_details  : modules increased 3");
                                                                                             Registration.modulesSaved++;
                                                                                            // msgBox("Registration saved successfully");
                                                                                            //  if(navigator.onLine &&  offlinehelper.syncstarted==false)
                                                                                            //     offlinehelper.prepareForSync();
                                                                                            // changepage("RegistrationTask_List");
                                                                                        }
                                                                                        nowtotal++;
                                                                    }

                                                                    
                                                                });
                                                            }else{
                                                                Registration.modulesSaved++;
                                                            }
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                });
                        });

                        // $cat_arr.push(dataa);

                 });
            }else{
                 Registration.modulesSaved++;
                  console.log("Reeturned from tbl_patient_assignment_details  : modules increased 3");
                 // if(navigator.onLine &&  offlinehelper.syncstarted==false && offlinehelper.savedans==true)
                 //        offlinehelper.prepareForSync();
                 //    msgBox("Registration saved successfully");
                 //    changepage("RegistrationTask_List");
            }




// callWebService('saveRegistration', json, function(response) {
//     if (response.status == "ok") {
//         if (response.data == "success") {
//             $(".save-nav-holder").addClass("hide");
//             msgBox("Registration saved successfully");
//             changepage("RegistrationTask_List");
//             Registration.fetchRegistrations();
//         } else {
//             msgBox("Error in saving registration");
//         }
//     } else {
//         msgBox(MESSAGE.NO_INTERNET);
//     }
// });
},

    updateCustomAnswers: function(){
        
        $customselector = $("input[data-customoption='true']");
        $customselector.each(function(){
             if($(this).attr("type")=="radio"){

             }
             $hiddenF = $(this).prev("label").find("span.ui-btn-text").find("input[type='hidden']");
             $hiddenValue = $hiddenF.val();
             $valObject = $.parseJSON($hiddenValue);
             if($(this).prop("checked")===true){
                $valObject.is_checked = true;
             }else{
                $valObject.is_checked = false;
             }

             $newVal = JSON.stringify($valObject);
             $hiddenF.val($newVal);
        });
    },

    /**
     * Method to stop youtube video when page is navigated away
     */
    StopYoutubeVideo: function(){
        var element = document;
        var iframe = element.querySelector( 'iframe');
        var video = element.querySelector( 'video' );
        if ( iframe ) {
            var iframeSrc = iframe.src;
            iframe.src = iframeSrc;
        }
        if ( video ) {
            video.pause();
        }
    },

    preCheckOldRegistrationAnswers: function(ans){

      /*  $("input[type='checkbox'], input[type='radio']").each(function(){
            $answerid = $(this).attr("data-answerid");
            if($.inArray(parseInt($answerid),ans)!=-1){
                $(this).prop("checked",true);
            }
        });*/

        var i;
        for (i = 0; i < ans.length; ++i) {
            $rawans = ans[i];
            $splitem = $rawans.split(":");
            $step_id = $splitem[0];
            $answer_id = $splitem[1];
            $("#step_"+$step_id).find("input[data-answerid='"+$answer_id+"']").prop("checked",true);
        }
       // Registration.refreshControls();
    },

    formatTime: function(strTime){
        //12:53 PM
        $sepAmPm = strTime.split(" ");
        $ap = $sepAmPm[1];
        $time = $sepAmPm[0];
        $splitTime = $time.split(":");
        $hour = $splitTime[0];
        
    },

    convertDateTo24Hour: function(date){
        var elem = date.split(" ");
        var stSplit = elem[0].split(":");// alert(stSplit);
        var stHour = stSplit[0];
        var stMin = stSplit[1];
        var stAmPm = elem[1].toUpperCase();
        var newhr = 0;
        var ampm = '';
        var newtime = '';
      
        if (stAmPm=='PM')
        { 
            if (stHour!=12)
            {
                stHour=stHour*1+12;
            }
           
        }else if(stAmPm=='AM' && stHour=='12'){
           stHour = stHour -12;
        }else{
            stHour=stHour;
          }
        if(arguments.length==2){
           // return stHour+':'+stMin;
            return "Kl "+stHour;
        }else{
            return stHour+':'+stMin+":00";
        }
    },
    resetControls: function(){
        $("#frmRegistrationSteps").find("input[type='radio'], input[type='checkbox']").each(function(){
                $(this).prop("checked", false);
                $(this).removeAttr("checked");
        })

        //Registration.refreshControls();
    },
    resetExpandCollapseAnswer: function(){ //method to reset selected answer for expand collapse if user can select only one option..
            $container = $("#frmRegistrationSteps").find(".registration-steps-holder").find("div[data-template='steps_expand_collapse']");
            $container.find("input[type='radio']").each(function(){
                    $(this).prop("checked", false);
                    $(this).removeAttr("checked");
            })
    },
    eventOptOnClick: function(obj){
        //alert("click click");
        $isCustomAnswer = obj.attr("data-customoption");
        $id = "step_" + obj.attr("data-stepid");

        $answerCatID = obj.attr("data-answercatid");



        
        $rawoptions = obj.attr("data-options");
       
        $options = $rawoptions.split("-");
        $is_multiple_choice = $options[0];
        $max_selection_allowed = $options[1]; 
        if ($answerCatID > 0) {
            if ($is_multiple_choice == 1) {
                $chkdlen = $("#" + $id).find("#collapsible_" + $answerCatID).find(".expand_collapse_answer:checked").size();
                if ($chkdlen > $max_selection_allowed) {
                    obj.prop("checked", false);
                    return false;
                }
            }else{

                //in single choice, allow only to use one option irrespective of the category
                $("#" + $id).find("[data-role='collapsible']").find(".expand_collapse_answer").prop("checked",false);
                obj.prop("checked",true);
                Registration.refreshControls();
            }

            $("#"+$id).find(".ui-collapsible-set").find(".ui-collapsible").each(function(){
                var o = $(this);
                var l = o.find(".expand_collapse_answer:checked").size();
                if(l>0){
                    $(this).attr("data-isdisabled","yes");
                }else{
                    $(this).attr("data-isdisabled","no");
                }
            })

            //now if options in category is checked, don't allow use collapse it
            obj.parents(".ui-collapsible-content").prev("h3").find("a.ui-collapsible-heading-toggle").on("click", function(){
                /*var l = obj.parents(".ui-collapsible-content").find(".ui-collapsible-content").find(".expand_collapse_answer:checked")
                var t = $("#" + $id).find("#collapsible_" + $answerCatID).find(".expand_collapse_answer:checked").size();
                if(t>0){
                    return false;
                }else{
                    return true;
                }*/
              //  $chk =;
                var c =   $(this).parent("h3").parent(".ui-collapsible").attr("data-isdisabled");
                if(c=="yes"){
                    return false;
                }else{
                    return true;
                }
            })

        } else {
            $name = obj.hasClass("sentence_answer") ? "sentence" : "keyword";
            if ($is_multiple_choice == 1) {
                $chkdlen = $("#" + $id).find("." + $name + "_answer:checked").size();
                if ($chkdlen > $max_selection_allowed) {
                    obj.prop("checked", false);
                    return false;
                }
            }
        }

        //enable disable delete custom answer button
        $mainContainer = $("#frmRegistrationSteps").find("#"+$id);
        if($answerCatID >0){ //Expand collapse
            $customcheckedItem = $mainContainer.find("#collapsible_" + $answerCatID).find("[data-customoption='true']:checked").length;
        }else{
            $customcheckedItem = $mainContainer.find("[data-customoption='true']:checked").length;
        }
        
        console.warn("count custom = "+$customcheckedItem);
        
        if($customcheckedItem>0){
            $mainContainer.find(".delete-options").removeClass("disabled");
        }else{
            $mainContainer.find(".delete-options").addClass("disabled");
        }
    },
    localizeMonth: function(strDate){
      
        var stDate = strDate.toLowerCase();
        stDate  = stDate.replace("idag","Idag");

        stDate  = stDate.replace("january","januari");
        stDate  = stDate.replace("february","februari");
        stDate  = stDate.replace("march","mars");
        stDate  = stDate.replace("may","maj");
        stDate  = stDate.replace("june","juni");
        stDate  = stDate.replace("july","juli");
        stDate  = stDate.replace("august","augusti");
        stDate  = stDate.replace("october","oktober");

        return stDate;

    },
    monthToEnglish: function(strDate){
       /* januari, februari, mars, april, maj, juni, juli, augusti,
september, oktober, november, december*/
        var stDate = strDate.toLowerCase();
        stDate  = stDate.replace("idag","Idag");

        stDate  = stDate.replace("januari","january");
        stDate  = stDate.replace("februari","february");
        stDate  = stDate.replace("mars","march");
        stDate  = stDate.replace("maj","may");
        stDate  = stDate.replace("juni","june");
        stDate  = stDate.replace("juli","july");
        stDate  = stDate.replace("augusti","august");
        stDate  = stDate.replace("oktober","october");

        return stDate;

    },
    elementClick: function(){
        $(document).on("mousedown touchstart","[data-activeclass]", function(e){
            var obj = $(this);
            var newClass = obj.attr("data-activeclass");
            obj.addClass(newClass);
            
            var b= setTimeout(function(){
                obj.removeClass(newClass);
                console.warn("hello class removed - "+newClass);
                clearTimeout(b);
            },200);
        })
    }


};
;//BIP homeworks and crisisplan module
//Test
var Homeworks = {
	fetchHomeworks: function(){
       $mainPage = "MyHomework_List";
		var userdetails = $.jStorage.get('userdetails');
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '"}';
        callWebService('fetchHomeworks', json, function(response) {
           
            if (response.status == "ok") {
                if (response.data != "No Homeworks") {
                    
                    $html = "";
                    
                    $(response.data).each(function() {
                    	$publish_date = "<div class='published-date'>"+this.published_date+"</div>";
                    	if(this.already_viewed==0){
                    		$newitem = "<span><h1 class='red-dot'>&nbsp;</h1></span>";
                    	}else{
                    		$newitem = "";
                    	}
                       
                       /* $html += "<li class=''>" +
                            "<a href='javascript:void(0);' data-viewed='"+this.already_viewed+"' data-headline='"+this.headline+"' onClick='Homeworks.showHomeworkDetails($(this))' data-assignmentid='"+this.assignment_id+"'>" + this.headline +$newitem+ $publish_date +"</a>" + 
                            "<div class='contents' style='display:none;'>"+this.contents+"</div></li>";*/
                        $html += "<li class=''>"+
                            "<a href='javascript:void(0);'  data-viewed='"+this.already_viewed+"' data-headline='"+this.headline+"' onClick='Homeworks.showHomeworkDetails($(this))' data-assignmentid='"+this.assignment_id+"' class='my-list-icon v2-sub-links'>"+$newitem+this.headline+$publish_date+"</a>"+
                            "<div class='contents' style='display:none;'>"+this.contents+"</div></li>";
                    });
                    $("#"+$mainPage).find(".list_homeworks").html($html);
                    $("#"+$mainPage).find(".list_homeworks").listview('refresh');
                   
                    changepage($mainPage);
                    
                    enableIScroll();
                    refreshScroll($mainPage);

                }
            } else {
                msgBox(MESSAGE.NO_INTERNET);
            }
        });
	},

	showHomeworkDetails: function(obj){
		$mainPage = "MyHomework_Contents";
		var userdetails = $.jStorage.get('userdetails');
		var ass_id = obj.attr("data-assignmentid");
		obj.next(".contents").find("p").removeClass("ui-li-desc");
		var contents = obj.next(".contents").html();
		var headline = obj.attr("data-headline");
		var already_viewed = obj.attr("data-viewed");

		if(already_viewed==0)
        {
            $counter = $("#v2-my-homework").find(".red-counter");
            $newcount = parseInt($counter.html())-1;
            obj.attr("data-viewed","1");
            obj.find(".red-dot").remove();

            if($newcount<=0){
                $newcount = 0;
                $counter.html($newcount).hide();
            }else{
                $counter.html($newcount);
            }
            if($newcount>0){
                $counter.show();
            }else{
                $counter.hide();   
            }

            

        	var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","assignmentId":"' + ass_id + '"}';
	        callWebService('markHomeworkRead', json, function(response) {
	            if (response.status == "ok") {
	               
	                    
	                    $("#"+$mainPage).find(".hw-heading").html(headline);
	                    $("#"+$mainPage).find(".hw-contents").html(contents);
	                   
	                    changepage($mainPage);
	                    
	                    enableIScroll();
	                    refreshScroll($mainPage);

	            } else {
	                msgBox(MESSAGE.NO_INTERNET);
	            }
	        });
        }else{
        	$("#"+$mainPage).find(".hw-heading").html(headline);
            $("#"+$mainPage).find(".hw-contents").html(contents);
            changepage($mainPage);
           	enableIScroll();
            refreshScroll($mainPage);
        }
	}
};


var Crisisplans = {
    fetchCrisisplans: function(){
         $mainPage = "MyCrisisplan_List";
        var userdetails = $.jStorage.get('userdetails');
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '"}';
        callWebService('fetchCrisisplans', json, function(response) {
            if (response.status == "ok") {
                if (response.data != "No Crisis Plans") {
                    
                    $html = "";
                    
                    $(response.data).each(function() {
                       // $publish_date = "<div class='published-date'>"+this.published_date+"</div>";
                        if(this.already_read==0){
                            $newitem = "<span><h1 class='red-dot'>&nbsp;</h1></span>";
                        }else{
                            $newitem = "";
                        }
                        var data = {
                            headline: this.headline,
                            viewed: this.already_read,
                            planid: this.plan_id,
                            contents: this.contents
                        }
                        Crisisplans.showCrisisplanDetails(data,1)
                      
                     /*   $html += "<li class=''>"+
                            "<a href='javascript:void(0);'  data-viewed='"+this.already_read+"' data-headline='"+this.headline+"' onClick='Crisisplans.showCrisisplanDetails($(this))' data-planid='"+this.plan_id+"' class='my-list-icon v2-sub-links'>"+$newitem+this.headline+"</a>"+
                            "<div class='contents' style='display:none;'>"+this.contents+"</div></li>";*/
                    });
                   /* $("#"+$mainPage).find(".list_crisisplans").html($html);
                    $("#"+$mainPage).find(".list_crisisplans").listview('refresh');
                   
                    changepage($mainPage);
                    
                    enableIScroll();
                    refreshScroll($mainPage);*/

                }
            } else {
                msgBox(MESSAGE.NO_INTERNET);
            }
        });
    },
    showCrisisplanDetails: function(obj){
        $mainPage = "MyCrisisplan_Contents";
        var userdetails = $.jStorage.get('userdetails');
       /* var plan_id = obj.attr("data-planid");
        obj.next(".contents").find("p").removeClass("ui-li-desc");
        var contents = obj.next(".contents").html();
        var headline = obj.attr("data-headline");
        var already_viewed = obj.attr("data-viewed");*/
         var plan_id = obj.planid;
      //  obj.next(".contents").find("p").removeClass("ui-li-desc");
        var contents = obj.contents;
        var headline = obj.headline;
        var already_viewed = obj.viewed;

        if(already_viewed==0)
        {
            /*$counter = $("#v2-my-crisisplan").find(".red-counter");
            $newcount = parseInt($counter.html())-1;
            obj.attr("data-viewed","1");
            obj.find(".red-dot").remove();

            if($newcount<=0){
                $newcount = 0;
                $counter.html($newcount).hide();
            }else{
                $counter.html($newcount);
            }*/

            
            var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","planId":"' + plan_id + '"}';
            callWebService('markCrisisplanRead', json, function(response) {
                if (response.status == "ok") {
                   
                        
                        $("#"+$mainPage).find(".cp-heading").html(headline);
                        $("#"+$mainPage).find(".cp-contents").html(contents);
                       
                        changepage($mainPage);
                        
                        enableIScroll();
                        refreshScroll($mainPage);

                } else {
                    msgBox(MESSAGE.NO_INTERNET);
                }
            });
        }else{
            $("#"+$mainPage).find(".cp-heading").html(headline);
            $("#"+$mainPage).find(".cp-contents").html(contents);
            changepage($mainPage);
            enableIScroll();
            refreshScroll($mainPage);
        }
    }
};


var BipAppVersion2 = {
	 renderStartPage: function(res){
        res.homeworks=$.parseJSON(res.homeworks);
        res.crisisplans=$.parseJSON(res.crisisplans);
        if(typeof res.homeworks.total_homeworks!="undefined" && parseInt(res.homeworks.total_homeworks)>0){
            $("#v2-my-homework").removeClass("desaturate");
            $("#v2-my-homework").attr("onclick","Homeworks.fetchHomeworks()");
        }else{
            $("#v2-my-homework").addClass("desaturate");
            $("#v2-my-homework").removeAttr("onclick");
        }

        if(typeof res.crisisplans.total_crisis_plans!="undefined" && parseInt(res.crisisplans.total_crisis_plans)>0){
            $("#v2-my-crisisplan").removeClass("desaturate");
            $("#v2-my-crisisplan").attr("onclick","Crisisplans.fetchCrisisplans()");
        }else{
            $("#v2-my-crisisplan").addClass("desaturate");
            $("#v2-my-crisisplan").removeAttr("onclick");
        }

        //show notifications
        if(typeof res.homeworks.new_homeworks!="undefined" && res.homeworks.new_homeworks>0){
            $("#v2-my-homework").find(".red-counter").html(res.homeworks.new_homeworks).show();
        }else{
            $("#v2-my-homework").find(".red-counter").html(0).hide();
        }

        if(res.hasRegistration=="false"){
            $(".regtaskicon").addClass("desaturate");
            $(".regtaskicon").attr("onclick","return false;");
        }else{
            $(".regtaskicon").removeClass("desaturate");
            $(".regtaskicon").attr("onclick","Registration.fetchRegistrations();");
        }

        if(typeof res.crisisplans.new_crisis_plans!="undefined" && res.crisisplans.new_crisis_plans>0){
            $("#v2-my-crisisplan").find(".red-counter").html(res.crisisplans.new_crisis_plans).show();
        }else{
            $("#v2-my-crisisplan").find(".red-counter").html(0).hide();
        }
    },

    ShowHideModules: function(){

        //SHOW HIDE REGISTRATION BUTTON
        if(offlinehelper.ShowHideModules("registration")==1 || offlinehelper.ShowHideModules("registration")=="all"){
            $("#RegistrationTask").find(".registrera-btn").removeClass("hide");
            $("#RegistrationTask").find(".registrera-btn").parent("div.scroller").css("margin-top","");
        }else{
            $("#RegistrationTask").find(".registrera-btn").addClass("hide");
            $("#RegistrationTask").find(".registrera-btn").parent("div.scroller").css("margin-top","54px");
        }

        //SHOW HIDE HOMEWORKS
        if(offlinehelper.ShowHideModules("homework_module")==1 || offlinehelper.ShowHideModules("homework_module")=="all"){
            $("#li-v2-homeworks").removeClass("hide");
            $array_hw = offlinehelper.ShowHideModules("homework_id");
            if($array_hw.length==0 && offlinehelper.ShowHideModules("homework_module")!="all"){
                $("#li-v2-homeworks").addClass("hide");
            }
        }else{
            $("#li-v2-homeworks").addClass("hide");
        }

        //SHOW HIDE CRISIS PLANS
        if(offlinehelper.ShowHideModules("crisis_plan")==1 || offlinehelper.ShowHideModules("crisis_plan")=="all"){
             $("#li-v2-crisisplan").removeClass("hide");
        }else{
            $("#li-v2-crisisplan").addClass("hide");
        }

        //SHOW HIDE MY SKILL MENU
        if(offlinehelper.ShowHideModules("my_skills")==1 || offlinehelper.ShowHideModules("my_skills")=="all"){
             $("#li-v2-skills").removeClass("hide");
        }else{
            $("#li-v2-skills").addClass("hide");
        }

    //if all modules are disabled just give the message
       /* if(offlinehelper.ShowHideModules("registration")==0 && (offlinehelper.ShowHideModules("homework_module")==0 || (offlinehelper.ShowHideModules("homework_module")==1 && offlinehelper.ShowHideModules("homework_id").length==0)) && offlinehelper.ShowHideModules("crisis_plan")==0 && offlinehelper.ShowHideModules("my_skills")==0){
            msgBox("No modules are enabled for you. Please contact your psychologist");
            return false;
        }*/

    }
}


var MySkills = {
    MyAudio: new Audio(),
    isPlaying: 0,
    isSeeking:false,
    audioDuration: 0,
    feelingModVersion: 1,
    feelingsSaved:0,
    exposureSteps:"",
    intervalID:0,
    modulesSaved:0,
    init: function(){
       

        $('#audio-seeker').rangeslider({

            // Feature detection the default is `true`.
            // Set this to `false` if you want to use
            // the polyfill also in Browsers which support
            // the native <input type="range"> element.
            polyfill: false,

            // Default CSS classes
            rangeClass: 'rangeslider',
            fillClass: 'rangeslider__fill',
            handleClass: 'rangeslider__handle',

            // Callback function
            onInit: function() {
                $(".rangeslider__handle").on("touchstart",function(){
                    MySkills.isSeeking = true;
                    console.log("Mouse Press");
                });

                $(".rangeslider__handle").on("touchend",function(){
                    MySkills.isSeeking = false;
                    console.log("Mouse Released");
                });
            },

            // Callback function
            onSlide: function(position, value) {},
           
            // Callback function
            onSlideEnd: function(position, value) {
                MySkills.MyAudio.currentTime = value;
                MySkills.isSeeking = false;
            }
        });
    },
    listModules: function(){
        var userdetails = $.jStorage.get("userdetails");
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '"}';
        callWebService('listModules', json, function(response) {

                if(response.status=="ok"){
                    ;
                    var totalModules = response.data.length;
                    var cssClass = "";
                    var html = "";
                    var  module_image="";
                    
                    if(totalModules>=4 && totalModules<=6){ // 2 items in each row
                       cssClass = "two-items-row";
                    }else{ //3 items in each row
                       cssClass = "three-items-row";
                    }


              

                    $(response.data).each(function(i,e){
                            var emptyModuleClass = "";
                            if(e.total_thoughts==0 && e.total_skills==0 && e.total_exposures==0 && e.module_icon!="my_feelings.png"){
                                emptyModuleClass = "desaturate";
                            }

                            if(e.module_icon=="my_feelings.png"){
                                module_image = "images/my_feelings.png";
                            }else{
                                if(isWebVersion==false){
                                    if(window.cordova){
                                        if($.trim(e.module_icon)!=""){
                                            if(filehelper.checkFileExist(cordova.file.dataDirectory + e.module_icon)){
                                                module_image = cordova.file.dataDirectory + e.module_icon;
                                            }else{
                                                module_image = "images/module_default.png";
                                            }
                                        }else{
                                            module_image = "images/module_default.png";    
                                        }
                                    }else{
                                        module_image = "images/module_default.png";
                                    }
                                }else{
                                    console.clear();
                                    console.info("URL")
                                    module_image = filehelper.getRemotePath()+"images/uploads/module_icons/"+e.module_icon;
                                }
                                
                            }

                            if(emptyModuleClass!=""){
                                html +="<div class='module-icon-holder "+emptyModuleClass+" "+cssClass+"' data-moduleid='"+e.module_id+"' data-modulename='"+e.module_name+"'>"
                            }else{
                                html +="<div class='module-icon-holder "+cssClass+"' data-activeclass='full' id='module-content-"+e.module_id+"' data-moduleid='"+e.module_id+"' data-modulename='"+e.module_name+"' onClick='MySkills.listModuleSkillTypes($(this))'>"
                            }

                            html += "<div class='module-icon'><img src='"+module_image+"' width='79'/></div>"+
                                        "<div class='module-name'>"+e.module_name+"</div>"+
                                    "</div>";
                            
                    });
                    

                    $("#MySkills_Module").find(".module-icons-stuffs").html(html);
                    
                    changepage("MySkills_Module");
                    enableIScroll();
                    //refreshScroll("MySkills_Module");

                   var b= setTimeout(function(){
                        scrolls["MySkills_Module"].refresh();
                        clearTimeout(b);
                   },200);

                }
        });
    },

    listModuleSkillTypes: function(obj){
        var moduleID    = obj.attr("data-moduleid"),
            moduleName  = obj.attr("data-modulename"),
            userdetails = $.jStorage.get("userdetails"),
            html = "", 
            itms = 0;
       
        $("#MyModule_AvailSkills").find(".page-title-v2").html(moduleName);

        if(moduleID>0){
            var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '", "moduleId":"'+moduleID+'"}';

            callWebService('checkIfModuleHasSkills', json, function(response) {
                    
                    if(response.status == "ok"){
                            $total_thoughts = response.data.total_thoughts;
                            $total_skills = response.data.total_skills;
                            $total_exposures = response.data.total_exposures;
                            var directSkills = 0;

                            if($total_thoughts>0 && $total_skills==0 && $total_exposures==0){
                                $data = {
                                    "module_name": moduleName,
                                    "module_id": moduleID,
                                    "skills_type": "thoughts"
                                }
                                directSkills = 1;
                            }else if($total_thoughts==0 && $total_skills>0 && $total_exposures==0){
                                $data = {
                                    "module_name": moduleName,
                                    "module_id": moduleID,
                                    "skills_type": "skills"
                                }
                                directSkills = 1;
                            }else if($total_thoughts==0 && $total_skills==0 && $total_exposures>0){
                                $data = {
                                    "module_name": moduleName,
                                    "module_id": moduleID,
                                    "skills_type": "exposure"
                                }
                                directSkills = 1;
                            }

                            if(directSkills==1){
                                MySkills.listSkills($data,1);
                            }else{
                                if($total_thoughts>0){
                                    html += "<li class=''><a href='javascript:void(0);' onclick='MySkills.listSkills($(this))' data-modulename='"+moduleName+"' data-moduleid='"+moduleID+"' data-type='thoughts'  class='my-new-list thought-type v2-sub-links'>Thoughts</a></li>";
                                }

                                if($total_skills>0){
                                    html += "<li class=''><a id='skills-module' href='javascript:void(0);' onclick='MySkills.listSkills($(this))' data-modulename='"+moduleName+"' data-moduleid='"+moduleID+"' data-type='skills'  class='my-new-list skill-type v2-sub-links'>Skills</a></li>";
                                }

                                if($total_exposures>0){
                                    html += "<li class=''><a id='exposure-module' href='javascript:void(0);' onclick='MySkills.listSkills($(this))' data-modulename='"+moduleName+"' data-moduleid='"+moduleID+"' data-type='exposure'  class='my-new-list exposure-type v2-sub-links'>Exponera</a></li>";
                                }
                                $("#MyModule_AvailSkills").find(".list-module-available-skills").html(html).show();
                                $("#MyModule_AvailSkills").find(".skills-container-feelings").hide();
                                $("#MyModule_AvailSkills").find(".list-module-available-skills").listview('refresh');
                                changepage("MyModule_AvailSkills");
                                enableIScroll();
                                refreshScroll("MyModule_AvailSkills");
                            }
                            
                    }
            });
        }else{
            callWebService('feelingStatistics', json, function(response) {

                if(response.status == "ok"){
                    
                    MySkills.feelingModVersion = offlinehelper.ShowHideModules("my_feelings");

                    if(MySkills.feelingModVersion==1){
                        html +="<div class='text-step-button feelings-btn-holder'><a href='javascript:void(0)' onclick='MySkills.showFeelingDetails()' class='proceed-to-feelings inline-blocked border-radius ui-btn ui-btn-up-b'  data-role='button'>Lägg till ny känsla</a></div>";
                        html +="<div class='counter-holder v1'>";
                        html +="<div class='feeling-circle times-count'><div class='counter-content c1'><div class='counter'>"+response.data.total_counts_v1+"</div><div class='text'>KÄNSLOR</div></div></div>";
                        html +="<div class='feeling-circle days-count'><div class='counter-content c1'><div class='counter'>"+response.data.total_days_v1+"</div><div class='text'>DAGAR</div></div></div>";
                        html +="</div>";
                    }else if(MySkills.feelingModVersion==2){
                        html +="<div class='text-step-button feelings-btn-holder'><a href='javascript:void(0)' onclick='MySkills.showFeelingDetails()' class='proceed-to-feelings inline-blocked border-radius ui-btn ui-btn-up-b'  data-role='button'>Lägg till ny känsla</a></div>";
                        html +="<div class='counter-holder v2'>";
                        html +="<div class='feeling-circle times-count'><div class='counter-content c1'><div class='counter'>"+response.data.total_counts_v2+"</div><div class='text'>KÄNSLOR</div></div></div>";
                        html +="<div class='feeling-circle days-count'><div class='counter-content c1'><div class='counter'>"+response.data.total_days_v2+"</div><div class='text'>DAGAR</div></div></div>";
                        html +="<div class='feeling-circle times-count'><div class='counter-content c2'><div class='counter'>"+response.data.total_primary_feelings+"</div><div class='text'>PRIMÄRA</div></div></div>";
                        html +="<div class='feeling-circle times-count'><div class='counter-content c2'><div class='counter'>"+response.data.total_secondary_feelings+"</div><div class='text'>SEKUNDÄRA</div></div></div>";
                        html +="</div>";
                    }
                    $("#MyModule_AvailSkills").find(".skills-container-feelings").html(html).show();
                    $("#MyModule_AvailSkills").find(".list-module-available-skills").hide();
                    changepage("MyModule_AvailSkills");
                    enableIScroll();
                    refreshScroll("MyModule_AvailSkills");
                }
            });
           
        }
    },
    
    showFeelingDetails: function(){
        var  userdetails = $.jStorage.get("userdetails");
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '"}';
        var getCounters;
        callWebService('feelingLists', json, function(response){
            $mainPage = "MyModule_FeelingsDetails";

            var step = 1;

            if(response.status == "ok"){
                var html = "";

              
                html +='<div class="step-one-holder my-feelings first">';
                if(MySkills.feelingModVersion==1){
                    html +='<div class="mini-links"><div class="steps-counter">Steg 1 av 2</div></div>';
                }else if(MySkills.feelingModVersion==2){
                    html +='<div class="mini-links"><div class="steps-counter">Steg 1 av 3</div></div>';
                }
                html += '<div class="registrera-btn page-title-v2">Vilken beskrivning stämmer bäst med din känsla?</div>';
                html += '<div class="options-holder">';
                html += '<div data-role="collapsibleset" data-theme="c" data-content-theme="c" data-corners="false">';
                $(response.data).each(function(i,e){
                    var feelingName = e.feeling_name;
                    feelingName = feelingName.replace("\\","");
                    html += '<div id="feelling-collapse-'+e.feeling_id+'" class="feeling-collapsible"  data-role="collapsible">'+
                            '<h3>'+feelingName+'</h3>'+
                            '<div class="feeling-description-holder"><div>'+e.description+'</div>'+
                            '<div><div class=""><label><input class="feelings-radio" type="radio" name="chk-feelings" data-parent="MyModule_FeelingsDetails" onClick="MySkills.controlExpandCollapse($(this))" data-feeling="'+e.feeling_name+'" data-mini="true" value="'+e.feeling_id+'">Välj</label></div></div>'+
                            '</div>'+
                            '</div>';
                    //html +="<div data-role='collapsible'><h3>Hello</h3><div class='contents'>This is test descriptino</div></div>";
                });
                html += "</div>";
                html += "</div>";
                html += "</div>";

                callWebService('feelingStatistics', json, function(response) {
                    if(response.status == "ok"){
                        getCounters = response.data;
                        //step 2
                        if(MySkills.feelingModVersion==1){ //Normal version of feelings
                            // var newCount = parseInt(getCounters.total_counts_v1)+1;
                             var html2="";
                             html2 +='<div class="step-two-holder  my-feelings hide last">';
                             html2 +='<div class="mini-links"><div class="steps-counter">Steg 2 av 2</div></div>';
                             html2 += '<div class="registrera-btn page-title-v2">Du har lagt till en känsla</div>';
                             html2 += '<div class="options-holder bg-white">';
                             html2 += "<div class='selected-feelings'>Jag kande ilska</div>";
                            /* html2 +="<div class='counter-holder'>";
                             html2 +="<div class='feeling-circle-add times-count'><div class='counter-content'><div class='counter'>"+newCount+"</div><div class='text'>KÄNSLOR</div></div></div>";
                             html2 +="</div>";*/
                             html2 += "</div>";
                             html2 += "</div>";
                             
                             $("#"+$mainPage).find(".feelings-save-btn").attr("data-modversion",1);
                             $("#"+$mainPage).find(".feelings-save-btn").attr("data-feelingtype",0);
                             $("#"+$mainPage).find(".feeling-steps-holder").append(html2);
                        }else if(MySkills.feelingModVersion==2){ //Primary/Secondary Version of feelings
                             
                          //  var newCount = parseInt(getCounters.total_counts_v2)+1;
                         //   var primaryCount = parseInt(getCounters.total_primary_feelings)+1;
                           // var secondaryCount = parseInt(getCounters.total_secondary_feelings)+1;
                             //step 2
                             var html2 = "";
                             html2 +='<div class="step-two-holder  my-feelings second hide">';
                             html2 +='<div class="mini-links"><div class="steps-counter">Steg 2 av 3</div></div>';
                             html2 += '<div class="registrera-btn page-title-v2">Vad tror du utlöste den här känslan?</div>';
                             html2 += '<div class="options-holder">';
                             html2 += "<div class='select-feeling-type feeling-v2-radio'>";
                             html2 += '<label><input type="radio" data-iconpos="left" name="chk-feelings-v2" data-mini="true" value="1">Min känsla stämmer med situationen som utlöste den.<br/><strong>En primär känsla</strong></label>';
                             html2 += '<label><input type="radio" data-iconpos="left" name="chk-feelings-v2" data-mini="true" value="2">Min känsla utlöstes av dömande av en primär känsla.<br/><strong>En sekundär känsla</strong></label>';
                             html2 += "</div>";
                             html2 +="<div class='definition-btn-holder white-btn'>";
                             html2 +="<a href='javascript:void(0)' onclick='MySkills.showFeelingDefinitions()' class='border-radius ui-btn ui-btn-up-b'  data-role='button'>Läs mer om primära och sekundära känslor</a>";
                             html2 +="</div>";
                             html2 += "</div>";
                             html2 += "</div>";

                             //step 3
                             var html3="";
                             html3 +='<div class="step-three-holder  my-feelings last hide">';
                             html3 +='<div class="mini-links"><div class="steps-counter">Steg 3 av 3</div></div>';
                             html3 += '<div class="registrera-btn page-title-v2">Du har lagt till en känsla</div>';
                             html3 += '<div class="options-holder bg-white">';
                             html3 += "<div class='selected-feelings'></div>";
                             html3 += "<br><div class='selected-feeling-type'></div>";
                             /*html3 +="<div class='counter-holder'>";
                             html3 +="<div class='feeling-circle-add times-count'><div class='counter-content'><div class='counter'>"+newCount+"</div><div class='text'>KÄNSLOR</div></div></div>";
                             html3 +="<div class='feeling-circle-add times-count primary-count'><div class='counter-content'><div class='counter'>"+primaryCount+"</div><div class='text'>PRIMÄRA</div></div></div>";
                             html3 +="<div class='feeling-circle-add times-count secondary-count'><div class='counter-content'><div class='counter'>"+secondaryCount+"</div><div class='text'>SEKUNDÄRA</div></div></div>";
                             html3 +="</div>";*/
                             html3 += "</div>";
                             html3 += "</div>";

                             //definition popup for primary and secondary feelings
                             var def = "";
                             def += '<div id="popupFeelingsDefinition" data-role="popup"  data-overlay-theme="a" class="ui-corner-all" data-position-to="window">'+
                                    '<div class="close-popup-holder"><a href="#" data-rel="back" data-role="button" data-theme="a" data-icon="delete" data-iconpos="notext" class="ui-btn-right close-popup"></a></div>'+
                                    '<div class="def-contents"></div>'+
                                    '</div>';

                            $("#"+$mainPage).find(".feeling-steps-holder").append(html2);
                            $("#"+$mainPage).find(".feeling-steps-holder").append(html3);
                            $("#"+$mainPage).find(".feeling-steps-holder").append(def);
                            $("#popupFeelingsDefinition").popup({
                                                                beforeposition: function() {
                                                                    $(this).css({
                                                                        width: window.innerWidth - 20
                                                                    });
                                                                },
                                                                positionTo:"window",
                                                                theme: "d",
                                                                transition: "pop",
                                                                shadow: false,
                                                                tolerance: "2,2"
                                                        });

                            $("#"+$mainPage).find(".feelings-save-btn").attr("data-modversion",2);
                            $("#"+$mainPage).find(".feelings-save-btn").attr("data-feelingtype",0);

                            Registration.refreshControls();
                        }
                    }
                });
                

                $("#"+$mainPage).find(".feeling-steps-holder").html(html);
                $("#"+$mainPage).find(".feelings-navigation-holder").removeClass("hide");
                $("#"+$mainPage).find(".feelings-save-nav-holder").addClass("hide");


                Registration.refreshControls();
                changepage("MyModule_FeelingsDetails");
                enableIScroll();
                refreshScroll("MyModule_FeelingsDetails");
                scrolls["MyModule_FeelingsDetails"].refresh();



                $(document).on( "collapse", ".ui-collapsible", function( event, ui ){
                    scrolls["MyModule_FeelingsDetails"].refresh();
                }).on( "expand", ".ui-collapsible", function( event, ui ){
                    scrolls["MyModule_FeelingsDetails"].refresh();
                }); 
            }
        });
    },
    showFeelingDefinitions: function(){
        var  userdetails = $.jStorage.get("userdetails");
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '"}';
        callWebService('showFeelingDefinitions', json, function(response){
            if(response.status=="ok"){
                $html = "<div class='def-heading'><h2>Primära och sekundära känslor</h2></div><div class='def-primary'>";
                $html += "<p>"+response.data.primary+"</p>";
                $html += "</div>"
                $html += "<div class='def-secondary'>";
                $html += "<p>"+response.data.secondary+"</p>";
                $html += "</div>";
                $html +="<div class='white-btn' style='margin-top:20px;'>";
                $html +="<a href='javascript:void(0)' onclick='$(\"#popupFeelingsDefinition\").popup(\"close\");' class='border-radius ui-btn ui-btn-up-b'  data-role='button'>Stäng</a>";
                $html +="</div>";
                $("#popupFeelingsDefinition").find(".def-contents").html($html);
                $("#popupFeelingsDefinition").popup("open");
            }
        });
    },
    saveFeelingAssignment: function(obj){
        MySkills.feelingsSaved = 0;
        $selectedFeeling = $("input[name='chk-feelings']:checked").val();
        var userdetails = $.jStorage.get("userdetails");
        var data = {
                        'feeling_id': $selectedFeeling,
                        'assignment_id':0,
                        'patient_id': userdetails.user_id,
                        'answered_date': moment().format("YYYY-MM-DD HH:mm:ss"),
                        'module_version':obj.attr("data-modversion"),
                        'feeling_type':obj.attr("data-feelingtype")
                    }
        sqlhelper.insertJSONData("tbl_v2_feelings_assignments",data,function(){
                msgBox("Känslospaning sparades.");
              //  $("[data-modulename='Känslospaning']").trigger("click");
                MySkills.listModules();
                offlinehelper.prepareForSync(false);
               
        });
    },
    navigateFeelingSteps: function(direction){
        var idCount = $(".my-feelings").length;
        var curItemIdx = $(".my-feelings").not(".hide").index();
        var lastBound = idCount-1;
        
        if(direction=="next"){

            $selected_feelings = $("input[name='chk-feelings']:checked").attr("data-feeling");
            if(typeof $selected_feelings!="undefined"){
                $selected_feelings = $selected_feelings.replace("\\","'");
                $selected_feelings = $selected_feelings.replace("''","'");
            }

            $(".my-feelings").find(".selected-feelings").html($selected_feelings);

            if($(".selected-feeling-type").length>0){
                  $ftv = $("input[name='chk-feelings-v2']:checked").val();
                  $selected_feelings_type = "";
                  if($ftv==1){
                    $selected_feelings_type = "En primär känsla";
                    $(".my-feelings").find(".secondary-count").hide();
                  }else if($ftv==2){
                    $selected_feelings_type = "En sekundär känsla";
                    $(".my-feelings").find(".primary-count").hide();
                  }
                $(".my-feelings").find(".selected-feeling-type").html($selected_feelings_type);

            }

            if($("input[name='chk-feelings']:checked").length==0){
                    msgBox("Vänligen välj en känsla.");
                    return false;
            }

            if(MySkills.feelingModVersion==2 && curItemIdx==1){
                if($("input[name='chk-feelings-v2']:checked").length==0)
                {
                    msgBox("Vänligen välj typ av känsla.");
                    return false;
                }

                $("#MyModule_FeelingsDetails").find(".feelings-save-btn").attr("data-feelingtype",$("input[name='chk-feelings-v2']:checked").val());
            }

            if(curItemIdx>=0 && curItemIdx<lastBound){
                $(".my-feelings").addClass("hide");
                $(".my-feelings").eq(curItemIdx+1).removeClass("hide");

                if($(".my-feelings").eq(curItemIdx+1).hasClass("last") && $(".my-feelings").eq(curItemIdx+1).attr("data-template")!="step_countdown"){
                    $("#"+$mainPage).find(".feelings-navigation-holder").addClass("hide");
                    $("#"+$mainPage).find(".feelings-save-nav-holder").removeClass("hide");
                }else{
                    $("#"+$mainPage).find(".feelings-navigation-holder").removeClass("hide");
                    $("#"+$mainPage).find(".feelings-save-nav-holder").addClass("hide");   
                }

            }



        }else{
           
            if(curItemIdx==lastBound || curItemIdx>0){
                $(".my-feelings").addClass("hide");
                $(".my-feelings").eq(curItemIdx-1).removeClass("hide");
            }else if(curItemIdx==0){
                //return  backpage('MyModule_AvailSkills',event,'slide');
                  backpage('MyModule_AvailSkills', event);
                  return;
            }
        }

       
         refreshScroll("MyModule_FeelingsDetails");

    },
    listSkills: function(){
       
        var obj = arguments[0];
        var fnArguments = arguments.length;

        if(arguments.length==2)
        {
            var skillType   = obj.skills_type,
            moduleID    = obj.module_id,
            moduleName  = obj.module_name;
            
        }else{
            var skillType   = obj.attr("data-type"),
            moduleID    = obj.attr("data-moduleid"),
            moduleName  = obj.attr("data-modulename");
        }


        var userdetails = $.jStorage.get("userdetails"),
            totalSlot = 5,
            json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '", "moduleId":"'+moduleID+'","skillType":"'+skillType+'"}'
            html = "";

        if(skillType=="exposure"){
            $mainPage = "MyModule_ExposureList";
        }else if(skillType=="skills"){
            $mainPage = "MyModule_SkillList";
        }else if(skillType=="thoughts"){
            $mainPage = "MyModule_ThoughtList";
        }

        callWebService('listSkillsItems', json, function(response) {
            if(response.status == "ok"){
                   
                   var dataLength = response.data.length;
                   
                    $(response.data).each(function(i,e){
                        if(skillType=="thoughts"){
                            if(dataLength==1){
                                    var dt = {
                                        modulename: moduleName,
                                        skillid: e.skill_id,
                                        moduleid: moduleID,
                                        type: skillType,
                                        thoughttype: e.thought_type
                                    }

                                    MySkills.skillsDetails(dt,1);
                                    return false;
                            }
                            html += "<li class=''><a href='javascript:void(0);' onclick='MySkills.skillsDetails($(this))' data-modulename='"+moduleName+"' data-skillid='"+e.skill_id+"' data-moduleid='"+moduleID+"' data-type='"+skillType+"' data-thoughttype='"+e.thought_type+"'  class='my-new-list "+e.thought_type+" v2-sub-links'>"+e.skill_name+"</a></li>";
                        }else if(skillType=="exposure"){
                            moduleName = e.skill_name;
                            html +="";
                        }
                    });

                    
                    var exposureDataLength = response.patientExposure.length;
                    if(exposureDataLength>0){
                      
                        $(response.patientExposure).each(function(idx,exp){
                            if(exposureDataLength==1){
                                var dtx = {
                                                type: "exposure",
                                                skillid: exp.skill_id,
                                                moduleid: exp.moduleID,
                                                exposureid: exp.exposure_id,
                                                itemname: exp.exposure_name
                                            };

                                MySkills.ShowExposurePreSteps(dtx,1);
                                return false;
                            }

                            totalSlot = MySkills.getNoOfSlotsForGreenGraph(exp.total_assignments);

                            html += "<li data-role='' data-type='exposure' data-skillid='"+exp.skill_id+"' data-moduleid='"+exp.moduleID+"' data-exposureid='"+exp.exposure_id+"' data-itemname='"+exp.exposure_name+"' onclick=''>"+
                                    "<a href='javascript:void(0)' data-type='exposure' data-skillid='"+exp.skill_id+"' data-moduleid='"+exp.moduleID+"' data-exposureid='"+exp.exposure_id+"' data-itemname='"+exp.exposure_name+"' onclick='MySkills.ShowExposurePreSteps($(this))'>"+exp.exposure_name+"</a>"+
                                    "<span class='sectioned box-size-border'>";
                            for (var i = 1; i <= totalSlot; i++) {
                                if (i <= exp.total_assignments) {
                                    html += "<span class='section green'>&nbsp;</span>";
                                } else {
                                    html += "<span class='section'>&nbsp;</span>";
                                }
                            }
                          
                            html += "</span>"+
                                "</li>";
                        });
                    }


                    var skillDataLength = response.skillStats.length;
                    if(skillDataLength>0){
                        $(response.skillStats).each(function(idx,sk){

                            if(skillDataLength==1){

                                var dts = {
                                            type: "skills",
                                            skillid: sk.skill_id,
                                            moduleid: sk.module_id,
                                            itemname:sk.skill_name
                                        };  

                                MySkills.ShowExposurePreSteps(dts,1);
                                return false;
                            }

                            totalSlot = MySkills.getNoOfSlotsForGreenGraph(sk.total_assignments);

                            html += "<li data-role='' data-type='skills' data-skillid='"+sk.skill_id+"' data-moduleid='"+sk.module_id+"'  data-itemname='"+sk.skill_name+"' onclick='MySkills.ShowExposurePreSteps($(this))'>"+
                                    "<a href='javascript:void(0)' data-type='skills' data-skillid='"+sk.skill_id+"' data-moduleid='"+sk.module_id+"' data-itemname='"+sk.skill_name+"' onclick='MySkills.ShowExposurePreSteps($(this))'>"+sk.skill_name+"</a>"+
                                    "<span class='sectioned box-size-border'>";
                            for (var i = 1; i <= totalSlot; i++) {
                                if (i <= sk.total_assignments) {
                                    html += "<span class='section green'>&nbsp;</span>";
                                } else {
                                    html += "<span class='section'>&nbsp;</span>";
                                }
                            }
                          
                            html += "</span>"+
                                "</li>";
                        });
                    }


                    $("#"+$mainPage).find(".page-title-v2").html(moduleName);
                    $("#"+$mainPage).find(".list-module-available-skills").html(html);
                    $("#"+$mainPage).find(".list-module-available-skills").listview('refresh');
                    changepage($mainPage);
                    enableIScroll();
                    refreshScroll($mainPage);
                    if(fnArguments==2){
                        $(".my-all-skills:visible").find("[data-rel='goback']").attr("onclick","return backpage('MySkills_Module', event);");
                    }else{
                        $(".my-all-skills:visible").find("[data-rel='goback']").attr("onclick","return backpage('MyModule_AvailSkills', event);");
                    }

            }


        });

         if(fnArguments==2){
            console.log("needed this if there is only one skill list. If there is thoughts only, we should directly go to thoughts listing page when module icon is clicked");
            return false;
        }
    },
    ShowExposurePreSteps: function(obj){

        userdetails = $.jStorage.get("userdetails"),
        $(".ui-loader").show();
        var goDirect = false;

        if(arguments.length==2){
            var moduleID = obj.moduleid,
                taskType = obj.type,
                skillID = obj.skillid;
            goDirect = true; 
        }else{
            var moduleID = obj.attr("data-moduleid"),
                taskType = obj.attr("data-type"),
                skillID = obj.attr("data-skillid");
            goDirect = false;
        }
       
 
        json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '", "moduleId":"'+moduleID+'","skillType":"'+taskType+'","skillId":"'+skillID+'"}'
      
        if(taskType=="skills"){
            callWebService("fetchSkillsSteps", json, function(response){
                MySkills.exposureSkillsSteps =  response;
                MySkills.ShowExposureSteps(obj, goDirect);
                $(".ui-loader").hide();
            });
        }else{
            callWebService("fetchExposureSteps", json, function(response){
                MySkills.exposureSkillsSteps =  response;
                MySkills.ShowExposureSteps(obj, goDirect);
                $(".ui-loader").hide();
            });
        }
        
    },
    ShowExposureSteps: function(obj, goDirect){
        console.clear();
        console.warn("RENDER STEPS");
        if(goDirect==true){ //normal object
            var moduleID = obj.moduleid,
                taskType = obj.type,
                skillID = obj.skillid,
                exposureID = obj.exposureid || "",
                itemName = obj.itemname || "";

        }else{ //html element object
            var moduleID = obj.attr("data-moduleid"),
                taskType = obj.attr("data-type"),
                skillID = obj.attr("data-skillid"),
                exposureID = obj.attr("data-exposureid"),
                itemName = obj.attr("data-itemname");
        }
        
        if(taskType=="exposure"){
            $mainPage = "MyModule_ExposureSteps";
            var formID= "frmExposureTask";
        }else{
            $mainPage = "MyModule_SkillsSteps";
            var formID= "frmSkillTask";
        }
        
        var html="";

        $("#"+$mainPage).find(".feelings-navigation-holder").removeClass("hide");
        $("#"+$mainPage).find(".feelings-save-nav-holder").addClass("hide"); 

       // return false;

        if(typeof MySkills.exposureSkillsSteps.data.steps!="undefined"){
            var steps  = MySkills.exposureSkillsSteps.data.steps;
          
            if(taskType=="exposure"){
                html += "<input type='hidden' id='exposure_id' name='exposure_id' value='"+exposureID+"'/>";
            }else{
                html += "<input type='hidden' id='skill_id' name='skill_id' value='"+skillID+"'/>";
            }
            html += "<input type='hidden' id='module_id' name='module_id' value='"+moduleID+"'/>";
            html += "<input type='hidden' id='item_name' name='item_name' value='"+itemName+"'/>";

            html +="<div class='exposure-steps-holder'>";
            var cnt = 1;
           
            $(steps).each(function(i,e){
                if(cnt==steps.length){
                    var lastclass = "last";
                }else{
                    var lastclass = "";
                }
               
                html += "<div data-hascountdown='"+e.enable_countdown+"' id='step_"+e.step_id+"' class='steps-holder "+lastclass+" hide' data-sortorder='"+e.sort_order+"' data-template='"+e.template+"'>";
                html +='<div class="mini-links"><div class="steps-counter">Steg '+cnt+' av '+steps.length+'</div></div>';
                if(e.template!="step_confirmation" && e.template!="step_checking_task"){
                    html += "<div class='regular-title-holder'>";
                    html += "<div class='step-title'>"+e.step_name+"</div>";
                        if($.trim(e.alternate_text)!=""){
                            html += "<div class='step-sub-title' style='text-align:center'>"+e.alternate_text+"</div>";   
                        }
                    html +="</div>";
                }

                html += "<div class='countdown-step2-title-holder hide'>";
                    html += "<div class='step-title'>"+e.countdown_title+"</div>";
                    if($.trim(e.countdown_desc)!=""){
                        html += "<div class='step-sub-title' style='text-align:center'>"+e.countdown_desc+"</div>";   
                    }
                html +="</div>";



                if(e.template=="step_graph"){
                    html +="<div class='graph-text-holder'>"
                    html +="<div class='graph-text'>10 = "+e.step_label_10+"</div>";
                    html +="<div class='graph-text'>0 = "+e.step_label_0+"</div>";
                    html +="</div>";
                    html +="<div class='rangeslider' id='rangeslider-exposure'>"+
                            "<input type='range' name='graph-rating' id='slider-fill-exp' value='0' min='0' max='10' data-highlight='true' sliderorientation='verticalInverted' step='1' />"+
                            "<span class='slider-fill-span' id='slider-fill-exp-span'></span>"+
                            "</div>";
                }else if(e.template=="step_text"){
                    html +="<div class='html-contents text-contents'>";
                    html += e.answer_text;
                    html +="</div>";
                }else if(e.template=="step_ec_words" || e.template=="step_ec_sentences"){
                    $is_multiple_choice = e.is_multiple_choice;
                    $max_selection_allowed = e.max_selection_allowed;
                    $dataopt = $is_multiple_choice + "-" + $max_selection_allowed;

                     if(e.enable_countdown==1 && e.is_multiple_choice==0){
                        html +="<div id='countdown-step-"+e.step_id+"' data-refid='step_"+e.step_id+"' class='countdown-step-show hide'>";
                            html += "<div class='countdown-start'>";
                                    html += "<div class='step-title' style='text-align:center'>"
                                    html += e.cntdown_start_title;
                                    html += "</div>";
                                    html += "<div class='step-sub-title' style='text-align:center'>";
                                    html += e.cntdown_start_desc;
                                    html += "</div>";
                            html += "</div>";
                                
                            html += "<div class='countdown-running hide'>";
                                html += "<div class='step-title' style='text-align:center'></div>";
                                html += "<div class='step-sub-title' style='text-align:center'>";
                                html += e.cntdown_countdown_desc;
                                html += "</div>";
                            html += "</div>";
                            html += "<div class='time-picker-holder'>";
                                 html += "<div class='time-picker'>";
                                    html += "<div class='time-picker-minus set-time' data-minminute='"+e.cntdown_min_minutes+"' data-maxminute='"+e.cntdown_max_minutes+"' data-stepid='"+e.step_id+"' data-dowhat='minus'></div>";
                                    html += "<div class='input-holder'>0</div>";
                                    html += "<div class='input-holder-timer hide'>00:00</div>";
                                    html += "<input type='hidden' class='countdown_time' name='countdown_time[]' value='0' /><input type='hidden' class='selected_minute' name='selected_minute[]' value='0' />";
                                    html += "<input type='hidden' class='current_time_position' name='current_time_position[]' value='00:00' />";
                                    html += "<div class='time-picker-plus set-time' data-minminute='"+e.cntdown_min_minutes+"' data-maxminute='"+e.cntdown_max_minutes+"'  data-stepid='"+e.step_id+"' data-dowhat='plus'></div>";
                                html += "</div>";
                            html += "</div>";
                            //now navigation
                            html += "<div class='countdown-navigations'>";
                            html +='<div class="fl text-step-button"><a href="javascript:void(0)" data-tasktype="'+taskType+'" data-stepid="'+e.step_id+'" data-direction="previous" class="reg-prev-step countdown-nav border-radius ui-btn ui-icon-previous" data-role="button">Tillbaka</a></div>';
                            html +='<div class="fr text-step-button"><a href="javascript:void(0)" data-tasktype="'+taskType+'" data-stepid="'+e.step_id+'" data-direction="next"  class="reg-next-step countdown-nav border-radius ui-btn  ui-icon-next" data-role="button">Nästa</a></div>';
                            html +='<div class="clear"></div>';
                            html += "</div>";
                        html +="</div>";
                    }

                    if(typeof e.category!="undefined" && e.category.length>0){
                        html += "<div class='options-holder'>";
                            html += "<div data-role='collapsibleset' data-theme='c' data-content-theme='c' data-corners='false'>";
                                $(e.category).each(function(){
                                        html +="<div class='collapsible-"+this.answer_cat_id+" feeling-collapsible' data-role='collapsible'>";
                                            html += "<h3>"+this.answer_cat_name+"</h3>";
                                            html += "<div class='option-holder "+e.template+"'>";
                                            $answer_cat_id = this.answer_cat_id;
                                            if(typeof this.answers!="undefined"){
                                                if(this.answers.length>0){
                                                    $(this.answers).each(function(){
                                                        $type = ($is_multiple_choice == 1) ? "checkbox" : "radio";
                                                        $ans = {
                                                            "step_id": e.step_id,
                                                            "is_custom_answer": 0,
                                                            "is_answer_category": 0,
                                                            "answer_id": this.answer_id,
                                                            "app_answer_id": this.app_answer_id,
                                                            "app_answer_cat_id": this.app_answer_cat_id,
                                                            "answer_cat_id": $answer_cat_id
                                                        };

                                                        html += "<div class='ec-answers answer-for-cat-" + $answer_cat_id + "'><label><input data-options='" + $dataopt + "' data-mini='true' data-stepid='" + e.step_id + "' data-answercatid='" + $answer_cat_id+ "' data-appanswercatid='" + this.app_answer_cat_id + "' data-answerid='" + this.answer_id + "' data-answer='" + this.answer + "' value='" + JSON.stringify($ans) + "' type='" + $type + "' data-parent='"+formID+"' onclick='MySkills.controlExpandCollapse($(this))'  class='expand_collapse_answer' name='step_answers["+e.step_id+"]["+$answer_cat_id+"][]'>" + this.answer + "</label></div>";
                                                    });
                                                }
                                            }
                                            html += "</div>";
                                        html += "</div>";
                                });
                            html += "</div>";  
                               
                        html += "</div>";
                    }
                }else if(e.template=="step_ec_descriptions"){
                    if(typeof e.category!="undefined" && e.category.length>0){
                        html += "<div class='options-holder'>";
                            html += "<div data-role='collapsibleset' data-theme='c' data-content-theme='c' data-corners='false'>";
                                $(e.category).each(function(){
                                        html +="<div class='collapsible-"+this.answer_cat_id+" feeling-collapsible' data-role='collapsible'>";
                                            html += "<h3>"+this.answer_cat_name+"</h3>";
                                            html += "<div class='option-holder "+e.template+"'>";
                                            $answer_cat_id = this.answer_cat_id;
                                            if(typeof this.answers!="undefined"){
                                                if(this.answers.length>0){
                                                    $answers = this.answers[0];
                                                    html +="<p>"+$answers.answer+"</p>";
                                                    $ans = {
                                                            "step_id": e.step_id,
                                                            "is_custom_answer": 0,
                                                            "is_answer_category": 0,
                                                            "answer_id": $answers.answer_id,
                                                            "app_answer_id": $answers.app_answer_id,
                                                            "app_answer_cat_id": $answers.app_answer_cat_id,
                                                            "answer_cat_id": $answer_cat_id
                                                    };

                                                    html += "<div class='answer-for-cat-" + $answer_cat_id + "'><label><input data-mini='true' data-parent='"+formID+"' onclick='MySkills.controlExpandCollapse($(this))'  data-stepid='" + e.step_id + "' data-answercatid='" + $answer_cat_id+ "' data-appanswercatid='" + $answers.app_answer_cat_id + "' data-answerid='" + $answers.answer_id + "' value='" + JSON.stringify($ans) + "' type='radio' class='expand_collapse_description'  name='check-matched-description-"+e.step_id+"'>Markera som vald</label></div>";

                                                }
                                            }
                                            html += "</div>";
                                        html += "</div>";
                                });
                            html += "</div>";  
                               
                        html += "</div>";
                    }
                }else if(e.template=="step_keywords" || e.template=="step_sentences"){
                   
                    $name = e.template=="step_keywords" ? "keyword" : "sentence";
                    
                    if(e.enable_countdown==1 && e.is_multiple_choice==0){
                        html +="<div id='countdown-step-"+e.step_id+"' data-refid='step_"+e.step_id+"' class='countdown-step-show hide'>";
                            html += "<div class='countdown-start'>";
                                    html += "<div class='step-title'>"
                                    html += e.cntdown_start_title;
                                    html += "</div>";
                                    html += "<div class='step-sub-title'>";
                                    html += e.cntdown_start_desc;
                                    html += "</div>";
                            html += "</div>";
                                
                            html += "<div class='countdown-running hide'>";
                                html += "<div class='step-title'></div>";
                                html += "<div class='step-sub-title'>";
                                html += e.cntdown_countdown_desc;
                                html += "</div>";
                            html += "</div>";
                            html += "<div class='time-picker-holder'>";
                                 html += "<div class='time-picker'>";
                                    html += "<div class='time-picker-minus set-time' data-minminute='"+e.cntdown_min_minutes+"' data-maxminute='"+e.cntdown_max_minutes+"' data-stepid='"+e.step_id+"' data-dowhat='minus'></div>";
                                    html += "<div class='input-holder'>0</div>";
                                    html += "<div class='input-holder-timer hide'>00:00</div>";
                                    html += "<input type='hidden' class='countdown_time' name='countdown_time[]' value='0' /><input type='hidden' class='selected_minute' name='selected_minute[]' value='0' />";
                                    html += "<input type='hidden' class='current_time_position' name='current_time_position[]' value='00:00' />";
                                    html += "<div class='time-picker-plus set-time' data-minminute='"+e.cntdown_min_minutes+"' data-maxminute='"+e.cntdown_max_minutes+"'  data-stepid='"+e.step_id+"' data-dowhat='plus'></div>";
                                html += "</div>";
                            html += "</div>";
                            //now navigation
                            html += "<div class='countdown-navigations'>";
                            html +='<div class="fl text-step-button"><a href="javascript:void(0)" data-tasktype="'+taskType+'" data-stepid="'+e.step_id+'" data-direction="previous" class="reg-prev-step countdown-nav border-radius ui-btn ui-icon-previous" data-role="button">Tillbaka</a></div>';
                            html +='<div class="fr text-step-button"><a href="javascript:void(0)" data-tasktype="'+taskType+'" data-stepid="'+e.step_id+'" data-direction="next"  class="reg-next-step countdown-nav border-radius ui-btn  ui-icon-next" data-role="button">Nästa</a></div>';
                            html +='<div class="clear"></div>';
                            html += "</div>";
                        html +="</div>";
                    }

                    html +="<div class='step-btn-option-holder'>";
                    if(typeof e.answers!="undefined" && e.answers.length>0){
                        $step_id = e.step_id;
                        $is_multiple_choice = e.is_multiple_choice;
                        $max_selection_allowed = e.max_selection_allowed;
                        $dataopt = $is_multiple_choice + "-" + $max_selection_allowed;

                        html += "<div class='options-holder template-"+$name+"'>";
                         $(e.answers).each(function(){
                                $type = ($is_multiple_choice == 1) ? "checkbox" : "radio";
                                $ans = {
                                        "step_id": $step_id,
                                        "is_custom_answer": 0,
                                        "is_answer_category": 0,
                                        "answer_id": this.answer_id,
                                        "app_answer_id": this.app_answer_id
                                };
                                html += "<label><input data-options='" + $dataopt + "' data-mini='true' data-stepid='" + $step_id + "' data-answerid='" + this.answer_id + "' data-answer='" + this.answer + "' value='" + JSON.stringify($ans) + "' type='" + $type + "'  class='" + $name + "_answer' name='step_answers["+$step_id+"][]'>" + this.answer + "</label>";
                         });
                         html +="</div>";
                    }
                    html +="</div>";

                }else if(e.template=="step_countdown"){
                    html += "<div class='time-picker-holder'>";
                   
                        html += "<div class='time-picker'>";
                            html += "<div class='time-picker-minus set-time' data-dowhat='minus'></div>";
                            html += "<div class='input-holder'>0</div>";
                            html += "<div class='input-holder-timer hide'>00:00</div>";
                            html += "<input type='hidden' id='countdown_time' name='countdown_time' value='0' /><input type='hidden' id='selected_minute' name='selected_minute' value='0' />";
                            html += "<input type='hidden' id='current_time_position' name='current_time_position' value='00:00' />";
                            html += "<div class='time-picker-plus set-time' data-dowhat='plus'></div>";
                        html += "</div>";
                    html += "</div>";
                }else if(e.template=="step_confirmation"){
                    html +="<div class='check-done-holder'><div class='checked-done'></div></div>";
                     html += "<div class='regular-title-holder'>";
                    html += "<div class='step-title'>"+e.step_name+"</div>";
                    if($.trim(e.alternate_text)!=""){
                        html += "<div class='step-sub-title' style='text-align:center'>"+e.alternate_text+"</div>";   
                    }
                    html +="</div>";
                }else if(e.template=="step_checking_task"){
                    html += "<div class='regular-title-holder'>";
                    $step_name = "";
                    if(e.title_same_as_skill_ex_name==1 || e.step_name==""){
                        $step_name = itemName;
                    }else{
                        $step_name = e.step_name;
                    }

                    html += "<div class='step-title'>"+$step_name+"</div>";
                    if($.trim(e.alternate_text)!=""){
                        html += "<div class='step-sub-title' style='text-align:center'>"+e.alternate_text+"</div>";   
                    }
                    html +="</div>";
                    html +="<div class='check-task-holder'><div id='check-task-template-ele' class='check-task off' data-status='off' onclick='MySkills.checkTaskDoneUndone($(this))'></div></div>";
                }


                html += "</div>";
                cnt++;
            });

            html += "</div>";
        }

        $("#"+$mainPage).find("#"+formID).find(".skill-contents").html(html);

        if(goDirect==true){
             $("#"+$mainPage).find("[data-rel='goback']").attr("onclick","return backpage('MySkills_Module', event);");
        }

        $("#"+$mainPage).find("[data-template='step_graph']").find(".step-sub-title").css("margin-bottom","10px"); //incase of step_graph there is another text so maintain margin between them
        $("#"+$mainPage).find("[data-template='step_countdown']").find(".step-sub-title").css("text-align","center"); //incase of step_countdown align another text to center

        if($("#"+$mainPage).find("#rangeslider-exposure").length>0) $("#"+$mainPage).find("#rangeslider-exposure").trigger("create"); //just create the rangeslider

        $("#"+$mainPage).find(".skill-contents").find(".steps-holder:eq(0)").removeClass("hide"); // by default we want to show first step, so remove class hide from it
       
        changepage($mainPage); // change page to Steps detail
        enableIScroll(); // enable i-scroll
        $("#slider-fill-exp").hide();
        $('#slider-fill-exp').unbind("change");
        $('#slider-fill-exp').val('0').css('bottom', sliderFillpercentage[$('#slider-fill').val()] + '%');
         $('#slider-fill-exp').change(function() {
            $("div.rangeslider div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").attr("style", "display:block");
            $("div.rangeslider div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").height(sliderpercentage[$(this).val()] + "%");
            if($(this).val()==0){
                $("#slider-fill-exp-span").attr("style", "display:block").html($(this).val()).css('bottom', "-7.5%");
            }else{
                $("#slider-fill-exp-span").attr("style", "display:block").html($(this).val()).css('bottom', sliderpercentage[$(this).val()] - 20 + "%");
            }

           
        });
        Registration.refreshControls(); //refresh jquery mobile widgets

        //now handling checkbox/radio click event to make sure patient doesn't select more than allowed options
         $(".sentence_answer,.keyword_answer,.expand_collapse_answer").on("click", function() {
            $answerCatID = $(this).attr("data-answercatid");
            $rawoptions = $(this).attr("data-options");

            $id = "step_" + $(this).attr("data-stepid");
            $options = $rawoptions.split("-");
            $is_multiple_choice = $options[0];
            $max_selection_allowed = $options[1];

            if ($answerCatID > 0) {
                if ($is_multiple_choice == 1) {
                    $chkdlen = $("#" + $id).find(".collapsible-" + $answerCatID).find(".expand_collapse_answer:checked").size();
                    if ($chkdlen > $max_selection_allowed) {
                        $(this).prop("checked", false);
                        return false;
                    }
                }else{
                     obj = $(this);
                     $chkdlen = $("#" + $id).find(".expand_collapse_answer").not($(this)).prop("checked",false);
                     obj.prop("checked",true);
                     $("#" + $id).find(".expand_collapse_answer").checkboxradio().checkboxradio("refresh");
                }
            } else {
                $name = $(this).hasClass("sentence_answer") ? "sentence" : "keyword";
                if ($is_multiple_choice == 1) {
                    $chkdlen = $("#" + $id).find("." + $name + "_answer:checked").size();
                    if ($chkdlen > $max_selection_allowed) {
                        $(this).prop("checked", false);
                        return false;
                    }
                }
            }

            if($is_multiple_choice == 0){ //now set countdown running screen title if the step has countdown enabled
                $countdown_running = $("#" + $id).find(".countdown-running");
                if($countdown_running.length>0){
                    $cntrl_text = $(this).prev("label").find("span.ui-btn-inner").find("span.ui-btn-text").text();
                    $countdown_running.find(".step-title").html($cntrl_text);
                }
            }
        });

       // var value = $("#slider-fill").val() || 0;

        //ranger buddy >>
       /* $('#slider-fill').change(function() {
            var newValue = $(this).val();
            $("#rangeslider-exposure div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").height(sliderpercentage[newValue] + "%");
        });*/
       /*  $("#rangeslider-exposure div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").height(sliderpercentage[value] + "%");


            $('#slider-fill').unbind("change");

            //var slide_bottom,slide2_2_bottom;
            $('#slider-fill').change(function() {
                var newValue = $(this).val();
                $("#rangeslider-exposure div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").attr("style", "display:block");
                $("#rangeslider-exposure div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").height(sliderpercentage[newValue] + "%");
                $("#slider-fill-span").attr("style", "display:none").html(newValue).css('bottom', sliderpercentage[newValue] - 20 + "%");

            });

            $('#slider-fill').val(value).css('bottom', sliderFillpercentage[value] + '%');



            $('#slider-fill').change();*/
        //ranger buddy <<

        $(".time-picker-minus,.time-picker-plus").on("click",function(){
            $main_holder = $("#countdown-step-"+$(this).attr("data-stepid"));

            $dowhat = $(this).attr("data-dowhat");
           
            $seldiv = $main_holder.find(".input-holder");
            $selinput = $main_holder.find(".countdown_time");
            $selected_minute = $main_holder.find(".selected_minute");

            $minValue = $(this).attr("data-minminute") || 1;
            $maxValue = $(this).attr("data-maxminute") || 10;

            if($dowhat=="minus"){
                $newtime = parseInt($selinput.val())-1;
                if($newtime<$minValue) $newtime = $minValue;
            }else{
                $inputVal = $selinput.val()>=$minValue ? $selinput.val() : $minValue-1;

                $newtime = parseInt($inputVal)+1;
                if($newtime>$maxValue) $newtime = $maxValue;
            }

            $seldiv.html($newtime);
            $selinput.val($newtime);
            $selected_minute.val($newtime);

        });

        $(".countdown-nav").on("click", function(){
            $stepname = "#countdown-step-"+$(this).attr("data-stepid");
            $mainholder = $("#countdown-step-"+$(this).attr("data-stepid"));
            $direction = $(this).attr("data-direction");
            $task_type = $(this).attr("data-tasktype");
            $mainstepid = $(this).attr("data-stepid");

            if($direction=="previous"){
                
                confirmBox('Vill du avbryta?', function(button) 
                {
                    if (button == 1) {
                            $mainholder.find(".countdown-navigations").find(".reg-next-step").html("Nästa");
                            clearInterval(MySkills.intervalID);
                            MySkills.intervalID = 0;
                            MySkills.MyAudio.pause();
                            $mainholder.find(".countdown_time").val(0);

                            $("#step_"+$mainstepid).find(".expand_collapse_answer:checked").parents(".ui-collapsible").trigger("expand");

                            if($mainholder.find(".input-holder").hasClass("hide")===false){ //since the countdown is not running, hide coundown window if previous is clicked
                                
                                $mainholder.addClass("hide");
                                $mainholder.find(".input-holder").html("0").removeClass("hide");
                                $mainholder.find(".time-picker-minus").removeClass("hide");
                                $mainholder.find(".time-picker-plus").removeClass("hide");
                                $mainholder.find(".countdown-start").removeClass("hide");
                                $mainholder.find(".countdown-running").addClass("hide");
                                $mainholder.find(".input-holder-timer").addClass("hide");
                            }else{ //user is currently in countdown running screen so get user back to countdown start page
                                $mainholder.find(".input-holder").html("0").removeClass("hide");
                                $mainholder.find(".time-picker-minus").removeClass("hide");
                                $mainholder.find(".time-picker-plus").removeClass("hide");
                                $mainholder.find(".countdown-start").removeClass("hide");
                                $mainholder.find(".countdown-running").addClass("hide");
                                $mainholder.find(".input-holder-timer").addClass("hide");
                            }
                    }
                });
                 
                

            }else{
                 if($(this).html()!="Klar"){
                    $countdownVal = $mainholder.find(".countdown_time").val();
                    if($countdownVal>0){
                        var timer_sound;
                        if(isWebVersion==false){
                            if(window.cordova){
                                if(filehelper.checkFileExist(cordova.file.dataDirectory + "countdown_alert.mp3")){
                                    timer_sound = cordova.file.dataDirectory + "countdown_alert.mp3?rand="+Math.random();
                                }else{
                                    timer_sound = "audios/default_alert.mp3?rand="+Math.random();
                                }
                            }else{
                                timer_sound = "audios/default_alert.mp3?rand="+Math.random();
                            }
                        }else{//web version
                            timer_sound = filehelper.getRemotePath() + "assets/sound_files/misc/default_alert.mp3?rand="+Math.random();
                        }
                        
                        MySkills.MyAudio.src = timer_sound;
                        MySkills.intervalID = 0;

                        $minute = parseInt($mainholder.find(".countdown_time").val());
                        $timer = ($minute<10 ? "0" + $minute : $minute) + ":00";
                        var timer = $minute*60-1, minutes, seconds ;
                        $mainholder.find(".input-holder-timer").html($timer);
                        $mainholder.find(".current_time_position").val($timer);
                        MySkills.intervalID = setInterval(function () {
                                minutes = parseInt(timer / 60, 10);
                                seconds = parseInt(timer % 60, 10);

                                if(minutes==0 && seconds==0){ //if counter reaches 0, then clear the interval
                                    clearInterval(MySkills.intervalID);
                                    
                                    MySkills.MyAudio.addEventListener('ended', function() {
                                        this.play();
                                    }, false);
                                    MySkills.MyAudio.play();
                                }

                                minutes = minutes < 10 ? "0" + minutes : minutes;
                                seconds = seconds < 10 ? "0" + seconds : seconds;

                                $mainholder.find(".input-holder-timer").html(minutes + ":" + seconds);
                                $mainholder.find(".current_time_position").val(minutes + ":" + seconds);

                                if (--timer < 0) {
                                    timer = $minute*60;
                                }
                        }, 1000);
                    }else{
                        msgBox("Välj tid i minuter");
                        return false;
                    }

                    $(this).html("Klar");
                    $mainholder.find(".input-holder").addClass("hide");
                    $mainholder.find(".time-picker-minus").addClass("hide");
                    $mainholder.find(".time-picker-plus").addClass("hide");
                    $mainholder.find(".countdown-start").addClass("hide");
                    $mainholder.find(".countdown-running").removeClass("hide");
                    $mainholder.find(".input-holder-timer").removeClass("hide");
                    console.warn("Next IF");
                 }else{
                    clearInterval(MySkills.intervalID);
                    MySkills.intervalID = 0;
                    MySkills.MyAudio.pause();
                    $mainholder.find(".countdown_time").val(0);
                    $mainholder.find(".input-holder").html("0").removeClass("hide");
                    $mainholder.find(".time-picker-minus").removeClass("hide");
                    $mainholder.find(".time-picker-plus").removeClass("hide");
                    $mainholder.find(".countdown-start").removeClass("hide");
                    $mainholder.find(".countdown-running").addClass("hide");
                    $mainholder.find(".input-holder-timer").addClass("hide");
                    $mainholder.addClass("hide");
                    $(this).html("Nästa");
                    MySkills.exposureNavigation('next',$task_type,1); 
                    //adding 1 as third parameter just because calling this method here we now dont want to show countdown step because its already been shown
                 }

            }
        });
    },
    checkTaskDoneUndone: function(obj){
            $st = obj.attr("data-status");
            if($st=="off"){
                obj.attr("data-status","on");
                obj.removeClass("off").addClass("on");
            }else{
                obj.attr("data-status","off");
                obj.removeClass("on").addClass("off");
            }
    },
    floatExposureKeywords: function(mainContainer) {
        $container = $("#"+mainContainer);
        var template = $container.find(".steps-holder:not(.hide)").attr("data-template");
        

        if (template == "step_keywords") {
            $(".template-keyword").find(".ui-checkbox,.ui-radio").addClass("ui-keywords");
            $(".template-keyword").after("<div class='clear'></div>");
        } else if (template == "step_ec_words") {
            $("."+template).find(".ui-checkbox,.ui-radio").addClass("ui-keywords");
            $(".ui-collapsible-set").find("div.ui-collapsible-content").after("<div class='clear'></div>");
        }
    },
    exposureNavigation: function(direction,type){
        MySkills.MyAudio.pause();
       /* MySkills.MyAudio.currentTime = 0;*/

         if(type=="exposure"){
            $mainPage = "MyModule_ExposureSteps";
            $parentPage = "MyModule_ExposureList";
        }else{ //skills
            $mainPage = "MyModule_SkillsSteps";
            $parentPage = "MyModule_SkillList";
        }

        //find current step and check if current step has checkbox/radios and check if at least one of them are checked 
        var current_step = $("#"+$mainPage).find(".exposure-steps-holder").find(".steps-holder:not(.hide)");
        var current_step_id = $("#"+$mainPage).find(".exposure-steps-holder").find(".steps-holder:not(.hide)").attr("id");
        var template = current_step.attr("data-template");

        var has_countdown = current_step.attr("data-hascountdown");
        if(has_countdown==1 && direction=="next" && arguments.length!=3){
            $pid = current_step_id.replace("step_","");
            //$countdownmain = $("#countdown-step-"+$pid).find("input[type='radio'],input[type='checkbox']")
             if((template=="step_ec_words" || template=="step_ec_sentences") && direction!="prev"){
                if ($("#"+$mainPage).find("#" + current_step_id).find(".expand_collapse_answer:checked").length == 0) {
                    msgBox("Välj minst ett alternativ");
                    return false;
                }
            }else if((template=="step_keywords" || template=="step_sentences")  && direction!="prev"){
                $name = template=="step_keywords" ? "keyword_answer" : "sentence_answer";
                if ($("#"+$mainPage).find("#" + current_step_id).find("."+$name+":checked").length == 0) {
                    msgBox("Välj minst ett alternativ");
                    return false;
                }
            }
            $("#countdown-step-"+$pid).removeClass("hide");
            
            $collapsibleset = $("#countdown-step-"+$pid).parent(".steps-holder").find(".options-holder").find("[data-role='collapsibleset']"); 

            $collapsibleset.children().trigger("collapse"); //collapse all collapsibles to avoid unnecessary scrollbar on countdown page.

           
             scrolls[$mainPage].scrollTo(0,0);
            return false;
        }
        
        if(template=="step_checking_task" && direction=="next"){
                
                $ischecked = current_step.find("#check-task-template-ele").attr("data-status");
                if($ischecked=="off"){
                    msgBox("Du måste kryssa i knappen ovan för att fortsätta");
                    return false;
                }
        }



        if(template=="step_countdown" && direction=="next" && $.trim($("#"+$mainPage).find(".exposure-navigation").find(".reg-next-step").html())!="Klar"){
            
            

            var st = $("#"+$mainPage).find("[data-template='step_countdown']").find("#countdown_time").val();

            if(st>0){ //Patient has chosen more than 0 minute so activate countdown
                var timer_sound;
                if(isWebVersion==false){
                    if(window.cordova){
                        if(filehelper.checkFileExist(cordova.file.dataDirectory + "countdown_alert.mp3")){
                            timer_sound = cordova.file.dataDirectory + "countdown_alert.mp3";
                        }else{
                            timer_sound = "audios/default_alert.mp3";
                        }
                    }else{
                        timer_sound = "audios/default_alert.mp3";
                    }
                }else{//web version
                    timer_sound = filehelper.getRemotePath() + "assets/sound_files/misc/default_alert.mp3?rand="+Math.random();
                }
                
                MySkills.MyAudio.src = timer_sound;

                $("#"+$mainPage).find(".regular-title-holder").addClass("hide");
                $("#"+$mainPage).find(".time-picker-holder").find(".set-time").addClass("hide");
                $("#"+$mainPage).find(".time-picker-holder").find(".input-holder").addClass("hide");
                
                $("#"+$mainPage).find(".countdown-step2-title-holder").removeClass("hide");
                $("#"+$mainPage).find(".time-picker-holder").find(".input-holder-timer").removeClass("hide");

                $("#"+$mainPage).find(".exposure-navigation").find(".reg-next-step").html("Klar").addClass("ui-icon-klar");

                MySkills.intervalID = 0;

                $minute = parseInt($("#"+$mainPage).find(".time-picker-holder").find("#countdown_time").val());
                $timer = ($minute<10 ? "0" + $minute : $minute) + ":00";

                var timer = $minute*60, minutes, seconds ;

                $("#"+$mainPage).find(".time-picker-holder").find(".input-holder-timer").html($timer);
                $("#"+$mainPage).find(".time-picker-holder").find("#current_time_position").val($timer);

                //begin countdown timer
                MySkills.intervalID = setInterval(function () {
                    minutes = parseInt(timer / 60, 10);
                    seconds = parseInt(timer % 60, 10);

                    if(minutes==0 && seconds==0){ //if counter reaches 0, then clear the interval
                        clearInterval(MySkills.intervalID);
                        
                        MySkills.MyAudio.addEventListener('ended', function() {
                            this.currentTime = 0;
                            this.play();
                        }, false);
                        MySkills.MyAudio.play();
                    }

                    minutes = minutes < 10 ? "0" + minutes : minutes;
                    seconds = seconds < 10 ? "0" + seconds : seconds;

                    $("#"+$mainPage).find(".time-picker-holder").find(".input-holder-timer").html(minutes + ":" + seconds);
                    $("#"+$mainPage).find(".time-picker-holder").find("#current_time_position").val(minutes + ":" + seconds);

                    if (--timer < 0) {
                        timer = $minute*60;
                    }
                }, 1000);

                return false;
            }else{
                $c = $("#"+$mainPage).find(".exposure-steps-holder").find(".steps-holder:not(.hide)");
               
                if($c.hasClass("last")){
                    MySkills.saveExposureTask();
                    return false;
                }
            }
            
        }else if(template=="step_countdown" && direction=="next" && $.trim($("#"+$mainPage).find(".exposure-navigation").find(".reg-next-step").html())=="Klar"){
            
            $c = $("#"+$mainPage).find(".exposure-steps-holder").find(".steps-holder:not(.hide)");
               
            if($c.hasClass("last")){
                MySkills.saveExposureTask();
                return false;
            }
        }else if(template!="step_countdown" && direction=="next"){
            
            $c = $("#"+$mainPage).find(".exposure-steps-holder").find(".steps-holder:not(.hide)");
               
            if($c.hasClass("last")){
                MySkills.saveExposureTask();
                return false;
            }
        }

        if($.trim($("#"+$mainPage).find(".exposure-navigation").find(".reg-next-step").html())=="Klar"){
            
            clearInterval(MySkills.intervalID);
            MySkills.intervalID = 0;

            $("#"+$mainPage).find(".regular-title-holder").removeClass("hide");
            $("#"+$mainPage).find(".time-picker-holder").find(".set-time").removeClass("hide");
            $("#"+$mainPage).find(".time-picker-holder").find(".input-holder").html("0").removeClass("hide");
            $("#"+$mainPage).find(".time-picker-holder").find("#countdown_time").val(0);
            
            $("#"+$mainPage).find(".countdown-step2-title-holder").addClass("hide");
            $("#"+$mainPage).find(".time-picker-holder").find(".input-holder-timer").addClass("hide");

            $("#"+$mainPage).find(".exposure-navigation").find(".reg-next-step").html("Nästa").removeClass("ui-icon-klar");
            if(direction=="prev") return false;
        }


        if((template=="step_ec_words" || template=="step_ec_sentences") && direction!="prev"){
            if ($("#"+$mainPage).find("#" + current_step_id).find(".expand_collapse_answer:checked").length == 0) {
                msgBox("Välj minst ett alternativ");
                return false;
            }
        }else if(template=="step_ec_descriptions"  && direction!="prev"){
            if ($("#"+$mainPage).find("#" + current_step_id).find(".expand_collapse_description:checked").length == 0) {
                msgBox("Välj minst ett alternativ");
                return false;
            }
        }else if((template=="step_keywords" || template=="step_sentences")  && direction!="prev"){
            $name = template=="step_keywords" ? "keyword_answer" : "sentence_answer";
            if ($("#"+$mainPage).find("#" + current_step_id).find("."+$name+":checked").length == 0) {
                msgBox("Välj minst ett alternativ");
                return false;
            }
        }
        
        var selector = $("#"+$mainPage).find(".exposure-steps-holder").find(".steps-holder");

        var idCount = selector.length;
        var curItemIdx = selector.not(".hide").index();
        var lastBound = idCount-1;
        
        if(direction=="next"){
            console.warn("curItemIdx = "+curItemIdx+", lastBound = "+lastBound);
            if(curItemIdx>=0 && curItemIdx<lastBound){
                
                selector.addClass("hide");
                selector.eq(curItemIdx+1).removeClass("hide");

                if(selector.eq(curItemIdx+1).hasClass("last") && selector.eq(curItemIdx+1).attr("data-template")!="step_countdown"){
                    
                    $("#"+$mainPage).find(".feelings-navigation-holder").addClass("hide");
                    $("#"+$mainPage).find(".feelings-save-nav-holder").removeClass("hide");
                }else if(selector.eq(curItemIdx+1).hasClass("last") && selector.eq(curItemIdx+1).attr("data-template")=="step_countdown"){
                    
                    $("#"+$mainPage).find(".feelings-navigation-holder").removeClass("hide");
                    $("#"+$mainPage).find(".feelings-save-nav-holder").addClass("hide");  

                }else{
                    
                    $("#"+$mainPage).find(".feelings-navigation-holder").removeClass("hide");
                    $("#"+$mainPage).find(".feelings-save-nav-holder").addClass("hide");   
                }
            }

        }else{
            if(curItemIdx==lastBound || curItemIdx>0){
                
                selector.addClass("hide");
                selector.eq(curItemIdx-1).removeClass("hide");
            }else if(curItemIdx==0){
                
                //backpage($parentPage,event,'slide');
                $chkIfempty = $("#"+$parentPage).find("ul[data-role='listview']").find("li").length;
                if($chkIfempty==0){ //if there are no other skills then show main skill start page
                    $parentPage = "MyModule_AvailSkills";

                    $chkagainIfEmpty = $("#"+$parentPage).find("ul[data-role='listview']").find("li").length;
                    if($chkagainIfEmpty==0){
                        $parentPage = "MySkills_Module";
                    }
                }
                backpage($parentPage , event);
            }
        }

        MySkills.floatExposureKeywords($mainPage);
        $(document).on( "collapse", ".ui-collapsible", function( event, ui ){ //Refresh the scroll when collapsible set is expanded or collapsed
           if(typeof scrolls[$mainPage]!="undefined") scrolls[$mainPage].refresh();
        }).on( "expand", ".ui-collapsible", function( event, ui ){
           if(typeof scrolls[$mainPage]!="undefined") scrolls[$mainPage].refresh();
        }); 
        
         var b= setTimeout(function(){ //dirty fix for i-scroll bug that the scroll was not refreshed
            scrolls[$mainPage].refresh();
            $(".ui-loader").hide();
            clearTimeout(b);
       },200);
    },
    getNoOfSlotsForGreenGraph: function(totalAssignments) {
        var totalSlot = 5;
        if (totalAssignments >= 5) {
            if (totalAssignments < 20) {
                totalSlot = (parseInt(totalAssignments / 10, 10) + 1) * 10;
            } else if (totalAssignments >= 20 && totalAssignments < 40) {
                totalSlot = 40;
            } else if (totalAssignments >= 40 && totalAssignments < 100) {
                totalSlot = 100;
            } else if (totalAssignments >= 100) {
                totalSlot = 145;
            }
        }
        return totalSlot;
    },
    saveThoughtAssignments: function(data){
         //get previous count
        data["times_used"] = 1;
        sqlhelper.insertJSONData("tbl_v2_sk_thoughts_assignments",data, function(){
                offlinehelper.prepareForSync(false);
        });
         
    },

    skillsDetails:function(obj){
        MySkills.MyAudio = new Audio();
        var argLength = arguments.length;
        if(arguments.length==2){
            var skillId         = obj.skillid,
                moduleId        = obj.moduleid,
                moduleName      = obj.modulename,
                skillType       = obj.type,
                thought_type    = obj.thoughttype;
        }else{
            var skillId         = obj.attr("data-skillid"),
                moduleId        = obj.attr("data-moduleid"),
                moduleName      = obj.attr("data-modulename"),
                skillType       = obj.attr("data-type"),
                thought_type    = obj.attr("data-thoughttype");
        }
        
        var userdetails = $.jStorage.get("userdetails"),
            json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '", "moduleId":"'+moduleId+'","skillType":"'+skillType+'","skillId":"'+skillId+'"}'
            html = "";

        $mainPage = "MyModule_SkillDetails";
         callWebService('getSKillDetails', json, function(response) {
                if(skillType=="thoughts"){
                        
                        if(response.status == "ok"){
                                $("#"+$mainPage).find(".page-title-v2").html(response.data.headline);
                                
                                if(response.data.thought_type == "text"){
                                       html +="<div class='html-contents thought-contents'>"+response.data.thought_text+"</div>";
                                       html +='<div class="text-step-button thoughts-btn-holder"><a href="javascript:void(0)" onclick="filehelper.killAllSound(); MySkills.listModules(); " class="proceed-to-feelings border-radius ui-btn ui-btn-up-b" data-role="button">Klar</a></div>';
                                       $("#"+$mainPage).find(".skill-contents").html(html);


                                       MySkills.saveThoughtAssignments({
                                            'assignment_id': 0,
                                            'thought_id': response.data.thought_id,
                                            'skill_id': skillId,
                                            'patient_id': userdetails.user_id
                                       });

                                }else{ //audio
                                       console.error("AUDIO URL = "+response.data.sound_url);
                                       if(isWebVersion==false){
                                            if(window.cordova){
                                                if($.trim(response.data.thought_sound_file)!=""){
                                                    if(filehelper.checkFileExist(cordova.file.dataDirectory + response.data.thought_sound_file)){
                                                        audioURL = cordova.file.dataDirectory + response.data.thought_sound_file;
                                                    }else{
                                                        audioURL = response.data.sound_url;
                                                    }
                                                }else{
                                                    audioURL = response.data.sound_url;
                                                }
                                           }else{
                                                audioURL = response.data.sound_url;
                                           }
                                       }else{//web version
                                            audioURL = filehelper.getRemotePath()+"assets/sound_files/thoughts/"+response.data.thought_sound_file;
                                       }
                                       
                                       //var audioURL = response.data.sound_url;
                                       MySkills.MyAudio.src = audioURL;
                                       MySkills.getAudioDuration();
                                       html += "<div class='audio-background' style='background-color:#"+response.data.sound_background_color+"'>";
                                       html += "<div class='play-pause-holder'>";
                                      /* html += "<a href='javascript:void(0)' data-audiourl='"+audioURL+"' data-dowhat='1' class='audio-playback-play' onclick='MySkills.audioPlayback($(this));'><img src='images/play_button_up.png' width='117'></a>";
                                       html += "<a href='javascript:void(0)' data-audiourl='"+audioURL+"' data-dowhat='0' class='audio-playback-pause' onclick='MySkills.audioPlayback($(this));' style='display:none'><img src='images/pause_button_up.png' width='117'></a>";
*/                                     html += "<div class='pb-ctrl-wrapper'>";
                                       html += "<div class='audio-playback-play' data-thoughtid='"+response.data.thought_id+"' data-skillid='"+skillId+"' data-patientid='"+userdetails.user_id+"' onclick='MySkills.audioPlayback($(this));'></div>";
                                       html += "<div class='audio-playback-pause'  data-thoughtid='"+response.data.thought_id+"' data-skillid='"+skillId+"' data-patientid='"+userdetails.user_id+"' onclick='MySkills.audioPlayback($(this));' style='display:none'></div>";
                                       html += "</div>";

                                       
                                       html += "</div><div class='slider-holder'>";
                                       html += '<div class="fl current-position">00:00:00</div><div class="fr audio-length">00:00:00</div>';
                                       html += '<div class="clear"></div><div class="slider"><input type="range" id="audio-seeker" value="0" min="0" max="1000" step="1" data-rangeslider></div>';
                                       html += "</div>";
                                       html += "</div>";
                                       html +='<div class="text-step-button thoughts-btn-holder"><a href="javascript:void(0)" onclick="filehelper.killAllSound(); MySkills.listModules()" class="proceed-to-feelings border-radius ui-btn ui-btn-up-b" data-role="button">Klar</a></div>';
                                       $("#"+$mainPage).find(".skill-contents").html(html);
                                }

                                if(argLength==2){
                                    $("#"+$mainPage).find("[data-rel='goback']").attr("onclick","return backpage('MySkills_Module', event);");
                                }

                                MySkills.init();
                                changepage($mainPage);
                                enableIScroll();
                                refreshScroll($mainPage);
                        }

                }
         });
    },
    audioPlayback: function(obj){
        if(navigator.onLine==false){
            /*msgBox("Offline läge");
            return false;*/
        }
        if(MySkills.isPlaying==0){
            MySkills.isPlaying =1;
            $("div.audio-playback-pause").show();
            $("div.audio-playback-play").hide();
            MySkills.MyAudio.play();
        }else{
            MySkills.isPlaying = 0;
            $("div.audio-playback-pause").hide();
            $("div.audio-playback-play").show();
            MySkills.MyAudio.pause();
        }

        MySkills.MyAudio.addEventListener('ended',function(){
            MySkills.isPlaying = 0;
            $("#audio-seeker").val(0).change();
            $("div.audio-playback-pause").hide();
            $("div.audio-playback-play").show();
            MySkills.saveThoughtAssignments({
                'assignment_id': 0,
                'thought_id': obj.attr("data-thoughtid"),
                'skill_id': obj.attr("data-skillid"),
                'patient_id': obj.attr("data-patientid")
            });
        });

        MySkills.MyAudio.addEventListener('timeupdate', function() {
            var currentTimeSecs = MySkills.MyAudio.currentTime;
            $currentTime=secondToTimeformat(currentTimeSecs);
            $(".slider-holder").find(".current-position").html($currentTime);
            if(MySkills.isSeeking==false){
                $("#audio-seeker").val(Math.floor(currentTimeSecs)).change();
            }

        });

       
         
    }, 
    getAudioDuration: function(){
        MySkills.MyAudio.addEventListener('loadedmetadata', function(_event) {
            MySkills.audioDuration = Math.floor(MySkills.MyAudio.duration);
            $("#audio-seeker").attr("max",MySkills.audioDuration);
            $('#audio-seeker').rangeslider('update', true);
            $totalTime=secondToTimeformat(MySkills.MyAudio.duration)
            $(".slider-holder").find(".audio-length").html($totalTime);

        });
    },
    saveExposureTask: function(obj){
        MySkills.validateUserSelection($("#frmExposureTask").find(".exposure-steps-holder"));
        MySkills.modulesSaved = 0;
        var container = $("#frmExposureTask");

        offlinehelper.syncIntervalOnRegistration=setInterval(function(){
             console.log("Total count is "+MySkills.modulesSaved);
            if(MySkills.modulesSaved==1){
                        msgBox("Exponeringen sparades");
                        clearInterval(offlinehelper.syncIntervalOnRegistration);
                        
                        /*if($("#exposure-module[data-moduleid='"+container.find("#module_id").val()+"']").length>0){
                            $("#exposure-module[data-moduleid='"+container.find("#module_id").val()+"']").trigger("click");
                        }else{
                            $("#module-content-"+container.find("#module_id").val()).trigger("click");
                        }*/
                        MySkills.listModules();
                       // $("#module-content-"+container.find("#module_id").val()).trigger("click");
                        offlinehelper.prepareForSync(false);

            }
                
        },100);


       
        var userdetails = $.jStorage.get('userdetails');

        var data = {
            "assignment_id": 0,
            "exposure_id": container.find("#exposure_id").val(),
            "date_answered": moment().format("YYYY-MM-DD HH:mm:ss"),
            "patient_id": userdetails.user_id,
            "rating": container.find("input[name='graph-rating']").val(),
            "countdown_timer": container.find("#selected_minute").val(),
            "countdown_completed": container.find("#current_time_position").val()
        };

       /* console.clear();
        console.warn("SAVING DATA... "+JSON.stringify(data));
        return false;*/

        sqlhelper.insertJSONData('tbl_v2_sk_exposure_patients_assignments', data, function(){
            sqlhelper.db.transaction(function(tx){
                    tx.executeSql("SELECT MAX(app_assignment_id) as app_assignment_id FROM tbl_v2_sk_exposure_patients_assignments;", [], function(txs, results){
                            if(results.rows.length>0){
                                var new_app_assignment_id = results.rows.item(0).app_assignment_id;
                                MySkills.saveExposureDetails(new_app_assignment_id, 0);
                            }else{
                                msgBox("Error in saving Exposure");
                            }
                    });

            });
        });
    },
    saveExposureDetails: function(new_app_assignment_id,assignment_id){
        var container = $("#frmExposureTask");
        var userdetails = $.jStorage.get('userdetails');
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","form_data":"' + $("#frmExposureTask").serialize() + '"}';
        var exposure_id = container.find("#exposure_id").val();

        var assignment_id= 0; //$('#reg_assignment_id').val();
        var app_exp_assignment_id= 0; //$('#app_reg_assignment_id').val();
        var holder = container.find(".exposure-steps-holder");

        if(holder.find("input").length>0){
            var anslengthcount=1;
            var anslength = holder.find("input").length;

            $(holder.find("input")).each(function(i,e){
                var obj = $(this);
                if(obj.attr("type")=="radio" || obj.attr("type")=="checkbox"){
                    if(obj.is(":checked")){
                        if(obj.val()!=""){
                            var tosave = $.parseJSON(obj.val());
                            var data={
                                  'assignment_details_id':0,
                                  'app_assignment_id':new_app_assignment_id,
                                  'assignment_id':assignment_id,
                                  'exposure_id':exposure_id,
                                  'step_id':tosave.step_id,
                                  'answer_id':tosave.answer_id,
                                  'app_answer_id':tosave.app_answer_id
                            };

                            sqlhelper.insertJSONData("tbl_v2_sk_exposure_patients_assignments_details", data);
                            if(anslengthcount==anslength){
                                console.log("Reeturned from tbl_v2_sk_exposure_patients_assignments_details");
                                MySkills.modulesSaved++;
                            }
                            anslengthcount++;
                        }else{
                            if(anslengthcount==anslength){
                                console.log("Reeturned from tbl_v2_sk_exposure_patients_assignments_details");
                                MySkills.modulesSaved++;
                            }
                            anslengthcount++;
                        }
                    }else{
                        if(anslengthcount==anslength){
                            console.log("Reeturned from tbl_v2_sk_exposure_patients_assignments_details");
                            MySkills.modulesSaved++;
                        }
                        anslengthcount++;
                    }
                }else{
                    if(anslengthcount==anslength){
                        console.log("Reeturned from tbl_v2_sk_exposure_patients_assignments_details");
                        MySkills.modulesSaved++;
                    }
                    anslengthcount++;
                }
            });
        }


    },
    saveSkillTask: function(obj){
        MySkills.validateUserSelection($("#frmSkillTask").find(".exposure-steps-holder"));
        MySkills.modulesSaved = 0;
        var container = $("#frmSkillTask");

        offlinehelper.syncIntervalOnRegistration=setInterval(function(){
             console.log("Total count is "+MySkills.modulesSaved);
            if(MySkills.modulesSaved==1){
                        clearInterval(offlinehelper.syncIntervalOnRegistration);
                        msgBox("Färdigheter sparades");
                       // changepage("MyModule_SkillList");
                        
                        /*if($("#skills-module[data-moduleid='"+container.find("#module_id").val()+"']").length>0){
                            $("#skills-module[data-moduleid='"+container.find("#module_id").val()+"']").trigger("click");
                        }else{
                            $("#module-content-"+container.find("#module_id").val()).trigger("click");
                        }*/
                        MySkills.listModules();

                         //$("#module-content-"+container.find("#module_id").val()).trigger("click");

                        offlinehelper.prepareForSync(false);
            }
                
        },100);


      
        var userdetails = $.jStorage.get('userdetails');

        var data = {
            "assignment_id": 0,
            "skill_id": container.find("#skill_id").val(),
            "date_answered": moment().format("YYYY-MM-DD HH:mm:ss"),
            "patient_id": userdetails.user_id,
            "rating": container.find("input[name='graph-rating']").val(),
            "countdown_timer": container.find("#selected_minute").val(),
            "countdown_completed": container.find("#current_time_position").val()
        };

        sqlhelper.insertJSONData('tbl_v2_sk_skills_assignments', data, function(){
            sqlhelper.db.transaction(function(tx){
                    tx.executeSql("SELECT MAX(app_assignment_id) as app_assignment_id FROM tbl_v2_sk_skills_assignments;", [], function(txs, results){
                            if(results.rows.length>0){
                                var new_app_assignment_id = results.rows.item(0).app_assignment_id;
                                MySkills.saveSkillDetails(new_app_assignment_id, 0);
                            }else{
                                msgBox("Error in saving Skill task");
                            }
                    });

            });
        });
    },
    saveSkillDetails: function(new_app_assignment_id,assignment_id){
        var container = $("#frmSkillTask");
        var userdetails = $.jStorage.get('userdetails');
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","form_data":"' + $("#frmSkillTask").serialize() + '"}';
        var skill_id = container.find("#skill_id").val();

        var assignment_id= 0; //$('#reg_assignment_id').val();
        var app_exp_assignment_id= 0; //$('#app_reg_assignment_id').val();
        var holder = container.find(".exposure-steps-holder");

        if(holder.find("input").length>0){
            var anslengthcount=1;
            var anslength = holder.find("input").length;

            $(holder.find("input")).each(function(i,e){
                var obj = $(this);
                if(obj.attr("type")=="radio" || obj.attr("type")=="checkbox"){
                    if(obj.is(":checked")){
                        if(obj.val()!=""){
                            var tosave = $.parseJSON(obj.val());
                            var data={
                                  'assignment_details_id':0,
                                  'app_assignment_id':new_app_assignment_id,
                                  'assignment_id':assignment_id,
                                  'skill_id':skill_id,
                                  'step_id':tosave.step_id,
                                  'answer_id':tosave.answer_id,
                                  'app_answer_id':tosave.app_answer_id
                            };

                            sqlhelper.insertJSONData("tbl_v2_sk_skills_assignments_details", data);
                            if(anslengthcount==anslength){
                                console.log("Reeturned from tbl_v2_sk_skills_assignments_details");
                                MySkills.modulesSaved++;
                            }
                            anslengthcount++;
                        }else{
                            if(anslengthcount==anslength){
                                console.log("Reeturned from tbl_v2_sk_skills_assignments_details");
                                MySkills.modulesSaved++;
                            }
                            anslengthcount++;
                        }
                    }else{
                        if(anslengthcount==anslength){
                            console.log("Reeturned from tbl_v2_sk_skills_assignments_details");
                            MySkills.modulesSaved++;
                        }
                        anslengthcount++;
                    }
                }else{
                    if(anslengthcount==anslength){
                        console.log("Reeturned from tbl_v2_sk_skills_assignments_details");
                        MySkills.modulesSaved++;
                    }
                    anslengthcount++;
                }
            });
        }


    },
     validateUserSelection: function(container){
        var error = 0;
        var errorChk = 0;


        container.find(".steps-holder").each(function(){
            if($(this).hasClass("last") && $(this).attr("data-template")=="step_checking_task"){
                 $ischecked = $(this).find("#check-task-template-ele").attr("data-status");
                if($ischecked=="off"){
                     errorChk=1;
                }
            }

            $radio_length = $(this).find("input[type='radio']").length;
            $check_length = $(this).find("input[type='checkbox']").length;
            if($radio_length>0){
                $checked_radio = $(this).find("input[type='radio']:checked").length;
                if($checked_radio==0){
                    error++;
                }
            }
            if($check_length>0){
                $checked_chkbox = $(this).find("input[type='checkbox']:checked").length;
                if($checked_chkbox==0){
                    error++;
                }
            }
        });

        if(error>0 || errorChk==1){
            if(errorChk==1){
                 $emptyLength = "Du måste kryssa i knappen ovan för att fortsätta.";
            }else{
                 $emptyLength = "Välj minst ett alternativ för varje steg.";
            }
            msgBox($emptyLength);
            throw $emptyLength;
        }
    },
    controlExpandCollapse: function(obj){
        $parent = obj.attr("data-parent");
        if(typeof obj.attr("data-stepid")!="undefined"){
            $main = $("#"+$parent).find("#step_"+obj.attr("data-stepid")).find("div[data-role='collapsibleset']");
        }else{
            $main = $("#"+$parent).find("div[data-role='collapsibleset']");
        }
        $main.find("div[data-role='collapsible']").each(function(){
            $size = $(this).find("input[type='radio']:checked, input[type='checkbox']:checked").size();
            console.warn("CHECKED SIZE = "+$size);
            if($size>0){
                $(this).attr("data-isdisabled","yes");
            }else{
                $(this).attr("data-isdisabled","no");
            }
        });

        $main.find("div[data-role='collapsible']").find("h3").find("a.ui-collapsible-heading-toggle").click(function(){
            var c =   $(this).parent("h3").parent(".ui-collapsible").attr("data-isdisabled");
           
            if(c=="yes"){
                return false;
            }else{
                return true;
            }
            
        });
    }
};;var TOPCONSTANT = 168;
var WEEKDATASHOWTHRESHOLD = 14; //upto how many 23

var Graph = {
    showActivityGraphperday: function() {
        // var jobAlreadyStarted = Graph.showActivityGraphperday_doing || false;
        // if (jobAlreadyStarted) {
        //     //console.log('fired twice');
        //     //lock for multiple
        //     return false;
        // }
        Graph.showActivityGraphperday_doing = true;
        var userdetails = $.jStorage.get('userdetails');
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","lastupdatedate":""}';
        console.log(json);
        callWebService('GetActivityperday', json, function(response) {
            if (response.status === "ok") {
                if (response.data.TotalNoPractice === "0") {
                    msgBox('Du har inte övat ännu'); //No practice yet.
                      $.mobile.hidePageLoadingMsg();   
                      
                } else {
                    changepage('Trainingstatperday');
                    enableIScroll();
                    //response.data.NoOfWeek = Math.floor(Math.random() * 30) + 1;
                    //for (var i = 0; i < response.data.NoOfWeek; i++) {
                    //    response.data.weeksData[i] = Math.floor(Math.random() * 66) + 1;
                    //}

                    var TOPCONSTANT = 168;
                    var graphhtml = new Array();
                    var marginGreenbox = "2px 3px;";

                    var totalWidth = $(window).width();


                    if (response.data.NoOfWeek > 23 && response.data.NoOfWeek <= 28) {
                        marginGreenbox = "2px 1px;";
                    } else if (response.data.NoOfWeek > 28 && response.data.NoOfWeek <= 35) {
                        marginGreenbox = "2px 1px;";
                    } else if (response.data.NoOfWeek > 35) {
                        marginGreenbox = "2px auto;width:4px;";
                    }
                    var top = TOPCONSTANT - (response.data.weeksData[i] + 1) * 10;
                    if (response.data.weeksData[i] == 0) {
                        top = TOPCONSTANT - 20;
                    } else if (response.data.weeksData[i] > 26 && response.data.weeksData[i] <= 43) {
                        top = TOPCONSTANT - (response.data.weeksData[i] + 1) * 6;
                    } else if (response.data.weeksData[i] > 43 && response.data.weeksData[i] <= 65) {
                        top = TOPCONSTANT - (response.data.weeksData[i] + 1) * 4;
                    } else if (response.data.weeksData[i] > 65) {
                        top = TOPCONSTANT - (response.data.weeksData[i] + 1) * 3;
                    }
                    var chartWidth = totalWidth / response.data.NoOfWeek;
                    var greenboxHeight = 8;
                    var maxWeekData;

                    var numberExtraCss = '';
                    if (response.data.weeksData.length > 15) {
                        // numberExtraCss = 'transform:rotate(270deg);';
                        //numberExtraCss = 'font-size:10px;-webkit-transform:rotate(270deg) translateY(-3px);transform:rotate(270deg) translateY(-3px);';
                    }
                    for (var i = 0; i < response.data.weeksData.length; i++) {

                        graphhtml.push('<div class="chartbox" style="position:relative">');
                        chartWidth = chartWidth * i


                        if (response.data.weeksData[i] == 0) {
                            //no data but keep the column
                            graphhtml.push('<span style="visibility:hidden;margin:' + marginGreenbox + '"  class="greenblock">&nbsp;</span>');
                        }
                        maxWeekData = Math.max.apply(Math, response.data.weeksData);
                        if (maxWeekData <= 15) {
                            greenboxHeight = 8;
                        } else if (maxWeekData <= 30) {
                            greenboxHeight = 4;
                        } else if (maxWeekData < 50) {
                            greenboxHeight = 2;
                        } else {
                            greenboxHeight = 1;
                        }

                        for (var j = 0; j < response.data.weeksData[i]; j++) {

                            graphhtml.push('<span style="height:' + greenboxHeight + 'px;margin:' + marginGreenbox + '" class="greenblock">&nbsp;</span>');
                        }

                        /*if( maxWeekData < 50 ) {
                            graphhtml.push('<div class="numbered" style="width:5px;margin:0 auto;top:-160px">' + response.data.weeksData[i] + '</div>');
                        }else {
                            graphhtml.push('<div class="numbered" style="width:5px;margin:0 auto;top:-'+(15+maxWeekData*greenboxHeight*3)+'px">' + response.data.weeksData[i] + '</div>');
                        }*/
                        if (response.data.weeksData.length < WEEKDATASHOWTHRESHOLD) {
                            if (parseInt(response.data.weeksData[i]) > 9) {
                                graphhtml.push('<div class="numbered" style="margin:0 auto;' + numberExtraCss + '">' + response.data.weeksData[i] + '</div>');

                            } else {
                                graphhtml.push('<div class="numbered" style="margin:0 auto;-webkit-transform:translateX(-4px);transform:translateX(-4px);' + numberExtraCss + '"><span style="visibility:hidden;">0</span>' + response.data.weeksData[i] + '</div>');
                            }

                        }


                        if (response.data.weeksData.length <= 10) {
                            graphhtml.push('<div class="bottomnumbered">' + (i + 1) + '</div>');
                        }
                        graphhtml.push('</div>');
                    }
                    var $theGraphDiv = $("#divTrainingStatPerday");
                    $theGraphDiv.html(graphhtml.join(""));

                    if (response.data.weeksData.length < WEEKDATASHOWTHRESHOLD) {
                        var theGraphHeight = $theGraphDiv.innerHeight();

                        $('#divTrainingStatPerday .numbered').css('top', '-' + (5 + theGraphHeight) + 'px');
                    }



                    //Other Details
                    $("#ActivityAntalVectorperday").html('<span class="text fleft">Antal<br />Veckor</span> ' + response.data.NoOfWeek);
                    $("#AntalDagarPerday").html('<span class="text fleft">Antal<br />Dagar</span> ' + response.data.TodayDays);
                    $("#AktivitetsedanstartPerday").html('<span class="text fleft">Aktivitet<br />sedan start</span> ' + response.data.TotalNoPractice);
                    $("#datestartperday").html("Startdatum " + response.data.startdate);
                    $("#dateendPerday").html("Dagens datum " + response.data.todaydate);

                    refreshScroll('Trainingstatperday');
                    setTimeout(function() {
                        refreshScroll('Trainingstatperday');
                    }, 10);
                    //Training.buildTrainingList(response.data);
                }
            } else {
                msgBox('Ett fel har inträffat, vänligen försök igen.');
            }
        }, function() {
            Graph.showActivityGraphperday_doing = false;
        });
    },
    showActivityGraphperweek: function() {
        // var jobAlreadyStarted = Graph.showActivityGraphperweek_doing || false;
        // if (jobAlreadyStarted) {
        //     //console.log('fired twice');
        //     //lock for multiple
        //     return false;
        // }
        Graph.showActivityGraphperweek_doing = true;
        console.log("1");
        setTimeout(function() {

            var userdetails = $.jStorage.get('userdetails');
            var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","taskid":"' + Training.editedTaskid + '","lastupdatedate":""}';
            console.log(json);
            callWebService('GetActivityperweek', json, function(response) {
                console.log("2");
                if (response.status === "ok") {
                    if (response.data.TotalNoPractice === "0") {
                        console.log("3");
                        msgBox('Du har inte övat ännu'); //No practice yet.
                          $.mobile.hidePageLoadingMsg();   
                    } else {
                        console.log("4");
                        changepage('TrainingStats');
                        enableIScroll();

                        /****** random test data *****************/

                        //response.data.NoOfWeek = Math.floor(Math.random() * 30) + 1; //random week 1 to 30
                        //for (var i = 0; i < response.data.NoOfWeek; i++) {
                        //    response.data.weeksData[i] = Math.floor(Math.random() * 66) + 1; //random weekdata 1 to 66
                        //}

                        /****** end of random test data *****************/

                        var graphhtml = new Array();
                        var TOPCONSTANT = 168;
                        var marginGreenbox = "2px 3px;";
                        if (response.data.NoOfWeek > 23 && response.data.NoOfWeek <= 28) {
                            marginGreenbox = "2px 1px;";
                        } else if (response.data.NoOfWeek > 28 && response.data.NoOfWeek <= 35) {
                            marginGreenbox = "2px 1px;";
                        } else if (response.data.NoOfWeek > 35) {
                            marginGreenbox = "2px auto;width:4px;";
                        }


                        var top = TOPCONSTANT - (response.data.weeksData[i] + 1) * 10;
                        if (response.data.weeksData[i] == 0) {
                            top = TOPCONSTANT - 20;
                        } else if (response.data.weeksData[i] > 26 && response.data.weeksData[i] <= 43) {
                            top = TOPCONSTANT - (response.data.weeksData[i] + 1) * 6;
                        } else if (response.data.weeksData[i] > 43 && response.data.weeksData[i] <= 65) {
                            top = TOPCONSTANT - (response.data.weeksData[i] + 1) * 4;
                        } else if (response.data.weeksData[i] > 65) {
                            top = TOPCONSTANT - (response.data.weeksData[i] + 1) * 3;
                        }

                        var greenboxHeight = 8;
                        var maxWeekData;

                        var numberExtraCss = '';
                        if (response.data.weeksData.length > 15) {
                            // numberExtraCss = 'transform:rotate(270deg);';
                            //numberExtraCss = 'font-size:10px;-webkit-transform:rotate(270deg) translateY(-3px);transform:rotate(270deg) translateY(-3px);';
                        }



                        for (var i = 0; i < response.data.weeksData.length; i++) {

                            graphhtml.push('<div class="chartbox" style="position:relative">');

                            if (response.data.weeksData[i] == 0) {
                                //no data but keep the column
                                graphhtml.push('<span style="visibility:hidden;margin:' + marginGreenbox + '"  class="greenblock">&nbsp;</span>');
                            }
                            maxWeekData = Math.max.apply(Math, response.data.weeksData);
                            if (maxWeekData <= 15) {
                                greenboxHeight = 8;
                            } else if (maxWeekData <= 30) {
                                greenboxHeight = 4;
                            } else if (maxWeekData < 50) {
                                greenboxHeight = 2;
                            } else {
                                greenboxHeight = 1;
                            }

                            for (var j = 0; j < response.data.weeksData[i]; j++) {

                                graphhtml.push('<span style="height:' + greenboxHeight + 'px;margin:' + marginGreenbox + '" class="greenblock">&nbsp;</span>');
                            }


                            //show weekdata at top if less than x
                            if (response.data.weeksData.length < WEEKDATASHOWTHRESHOLD) {
                                if (parseInt(response.data.weeksData[i]) > 9) {
                                    graphhtml.push('<div class="numbered" style="margin:0 auto;' + numberExtraCss + '">' + response.data.weeksData[i] + '</div>');

                                } else {
                                    graphhtml.push('<div class="numbered" style="margin:0 auto;-webkit-transform:translateX(-4px);transform:translateX(-4px);' + numberExtraCss + '"><span style="visibility:hidden;">0</span>' + response.data.weeksData[i] + '</div>');
                                }

                            }


                            if (response.data.weeksData.length <= 10) {
                                graphhtml.push('<div class="bottomnumbered">' + (i + 1) + '</div>');
                            }
                            graphhtml.push('</div>');

                        }
                        var $theWeekGraphDiv = $("#divActivityperweekgraphs");
                        $theWeekGraphDiv.html(graphhtml.join(""));

                        //calculate weekdata  css top if less than x
                        if (response.data.weeksData.length < WEEKDATASHOWTHRESHOLD) {
                            var theWeekGraphHeight = $theWeekGraphDiv.innerHeight();

                            $('#divActivityperweekgraphs .numbered').css('top', '-' + (5 + theWeekGraphHeight) + 'px');
                        }


                        //Other Details
                        $("#ActivityAntalVector").html('<span class="text fleft">Antal<br />Veckor</span> ' + response.data.NoOfWeek);
                        $("#ActivityAntalDagar").html('<span class="text fleft">Antal<br />Dagar</span> ' + response.data.TodayDays);
                        $("#Activitysedanstart").html('<span class="text fleft">Aktivitet<br />sedan start</span> ' + response.data.TotalNoPractice);
                        $("#divStartdatum").html("Startdatum " + response.data.startdate);
                        $("#divDegensdatum").html("Dagens datum " + response.data.todaydate);

                        refreshScroll('TrainingStats');
                        setTimeout(function() {
                            refreshScroll('TrainingStats');
                        }, 10);
                        //Training.buildTrainingList(response.data);
                    }
                } else {
                    msgBox('Ett fel har inträffat, vänligen försök igen.');
                }
            }, function() {
                Graph.showActivityGraphperweek_doing = false;
            });

        }, 100);
    },
    showEstimatesGraphfromstart: function() {
        // var jobAlreadyStarted = Graph.showEstimatesGraphfromstart_doing || false;
        // if (jobAlreadyStarted) {
        //     //console.log('fired twice');
        //     //lock for multiple
        //     return false;
        // }
        Graph.showEstimatesGraphfromstart_doing = true;
        var userdetails = $.jStorage.get('userdetails');
        var json = '{"userid":"' + userdetails.user_id + '","tokenkey":"' + userdetails.tokenkey + '","deviceId":"' + DeviceID + '","taskid":"' + Training.editedTaskid + '","lastupdatedate":""}';
        console.log(json);
        callWebService('Getestimatesfromstart', json, function(response) {
            if (response.status === "ok") {
                if (response.data.Estimates.length === 0) {
                    msgBox('Du har inte övat ännu'); //No estimate yet.
                } else {
                    var error=0;
                    $(Training.TaskLists).each(function(index) {
                        if (parseInt(this.taskid, 10) == Training.editedTaskid ) {
                            
                            if(this.TodayDays!=response.data.TodayDays){
                                gotoLoginPage();
                                error=1;
                                return false;
                            }


                        }
                    })
                    if(error==1)
                        return false;

                    changepage('TrainingRating');
                    enableIScroll();

                    //random data for testing
                    //
                    //response.data.TodayDays = Math.floor(Math.random() * 60) + 1;

                    //for (var i = 0; i < response.data.TodayDays; i++) {
                    //    response.data.Estimates[i] = Math.floor(Math.random() * 10) + 1;
                    //}



                    var graphhtml = new Array();
                    for (var i = 0; i < response.data.Estimates.length; i++) {
                        graphhtml.push('<div class="barline">');
                        if (response.data.Estimates[i] == 0) {
                            graphhtml.push('<span class="whitebox" style="visibility:hidden;">&nbsp;</span>');
                        } else {
                            for (var j = 0; j < response.data.Estimates[i]; j++) {
                                graphhtml.push('<span class="whitebox">&nbsp;</span>');
                            }
                        }
                        graphhtml.push('</div>');
                    }
                    $("#divRatingLines").html(graphhtml.join(""));
                    //Other Details
                    if (response.data.Estimates.length < 30) {
                        $("#TrainingRating .barline").css({
                            "padding": "0 1px"
                        });
                        $("#TrainingRating .whitebox").css({
                            "width": "94%"
                        });
                    } else if (response.data.Estimates.length < 50) {
                        $("#TrainingRating .barline").css({
                            "padding": "0 1px"
                        });
                        $("#TrainingRating .whitebox").css({
                            "width": "2px"
                        });
                    } else {
                        $("#TrainingRating .barline").css({
                            "padding": "0 0"
                        });
                        $("#TrainingRating .whitebox").css({
                            "width": "1px"
                        });
                    }

                    $("#EstimateAntalskattningar").html('<span class="text fleft">Antal<br />skattningar</span> ' + response.data.Estimates.length);
                    $("#EstimateAntaldagar").html('<span class="text fleft">Antal<br />dagar</span> ' + response.data.TodayDays);
                    $("#EstimateStartdatum").html("Startdatum " + response.data.startdate);
                    $("#EstimateDegansdatum").html("Dagens datum " + response.data.todaydate);
                    refreshScroll('TrainingRating');
                    setTimeout(function() {
                        refreshScroll('TrainingRating');
                    }, 10);
                }
            } else {
                msgBox('Ett fel har inträffat, vänligen försök igen.');
            }
        }, function() {

            Graph.showEstimatesGraphfromstart_doing = false;
        });
    }

};;/*!
 * jQuery Mobile v1.0b2
 * http://jquerymobile.com/
 *
 * Copyright 2010, jQuery Project
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 */
/*!
 * jQuery UI Widget @VERSION
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Widget
 */


/*
* jQuery Mobile Framework : "slider" plugin
* Copyright (c) jQuery Project
* Dual licensed under the MIT or GPL Version 2 licenses.
* Forked by Elmundio87 to add vertical orientation
* http://jquery.org/license
*/

( function( $, undefined ) {

$.widget( "mobile.slider", $.mobile.widget, {
	options: {
		theme: null,
		trackTheme: null,
		disabled: false,
		initSelector: "input[type='range'], :jqmData(type='range'), :jqmData(role='slider')",
		mini: false
	},

	_create: function() {

		// TODO: Each of these should have comments explain what they're for
		var self = this,

			control = this.element,

			parentTheme = $.mobile.getInheritedTheme( control, "c" ),

			theme = this.options.theme || parentTheme,

			trackTheme = this.options.trackTheme || parentTheme,

			cType = control[ 0 ].nodeName.toLowerCase(),

			selectClass = ( cType == "select" ) ? "ui-slider-switch" : "",

			controlID = control.attr( "id" ),

			labelID = controlID + "-label",

			label = $( "[for='"+ controlID +"']" ).attr( "id", labelID ),

			val = function() {
				return  cType == "input"  ? parseFloat( control.val() ) : control[0].selectedIndex;
			},

			min =  cType == "input" ? parseFloat( control.attr( "min" ) ) : 0,

			max =  cType == "input" ? parseFloat( control.attr( "max" ) ) : control.find( "option" ).length-1,

			sliderOrientation = control.attr( "sliderOrientation") || "horizontal",
			
			step = window.parseFloat( control.attr( "step" ) || 1 ),

			inlineClass = ( this.options.inline || control.jqmData("inline") == true ) ? " ui-slider-inline" : "",

			miniClass = ( this.options.mini || control.jqmData("mini") ) ? " ui-slider-mini" : "",


			domHandle = document.createElement('a'),
			handle = $( domHandle ),
			domSlider = document.createElement('div'),
			slider = $( domSlider ),

			valuebg = control.jqmData("highlight") && cType != "select" ? (function() {
				var bg = document.createElement('div');
				bg.className = 'ui-slider-bg ui-btn-active ui-btn-corner-all';
				return $( bg ).prependTo( slider );
			})() : false,

			options;

        domHandle.setAttribute( 'href', "#" );
		domSlider.setAttribute('role','application');
		domSlider.className = ['ui-slider-'  + sliderOrientation ,selectClass," ui-btn-down-",trackTheme,' ui-btn-corner-all', inlineClass, miniClass].join("");
		domHandle.className = 'ui-slider-handle-' + sliderOrientation ;
		domSlider.appendChild(domHandle);

		handle.buttonMarkup({ corners: true, theme: theme, shadow: true })
				.attr({
					"role": "slider",
					"aria-valuemin": min,
					"aria-valuemax": max,
					"aria-valuenow": val(),
					"aria-valuetext": val(),
					"title": val(),
					"aria-labelledby": labelID
				});

		$.extend( this, {
			slider: slider,
			handle: handle,
			valuebg: valuebg,
			dragging: false,
			beforeStart: null,
			userModified: false,
			mouseMoved: false
		});

		if ( cType == "select" ) {
			var wrapper = document.createElement('div');
			wrapper.className = 'ui-slider-inneroffset';

			for(var j = 0,length = domSlider.childNodes.length;j < length;j++){
				wrapper.appendChild(domSlider.childNodes[j]);
			}

			domSlider.appendChild(wrapper);

			// slider.wrapInner( "<div class='ui-slider-inneroffset'></div>" );

			// make the handle move with a smooth transition
			handle.addClass( "ui-slider-handle-snapping" );

			options = control.find( "option" );

			for(var i = 0, optionsCount = options.length; i < optionsCount; i++){
				var side = !i ? "b":"a",
					sliderTheme = !i ? " ui-btn-down-" + trackTheme :( " " + $.mobile.activeBtnClass ),
					sliderLabel = document.createElement('div'),
					sliderImg = document.createElement('span');

				sliderImg.className = ['ui-slider-label ui-slider-label-',side,sliderTheme," ui-btn-corner-all"].join("");
				sliderImg.setAttribute('role','img');
				sliderImg.appendChild(document.createTextNode(options[i].innerHTML));
				$(sliderImg).prependTo( slider );
			}

			self._labels = $( ".ui-slider-label", slider );

		}

		label.addClass( "ui-slider" );

		// monitor the input for updated values
		control.addClass( cType === "input" ? "ui-slider-input" : "ui-slider-switch" )
			.change( function() {
				// if the user dragged the handle, the "change" event was triggered from inside refresh(); don't call refresh() again
				if (!self.mouseMoved) {
					self.refresh( val(), true );
				}
			})
			.keyup( function() { // necessary?
				self.refresh( val(), true, true );
			})
			.blur( function() {
				self.refresh( val(), true );
			});

		// prevent screen drag when slider activated
		$( document ).bind( "vmousemove", function( event ) {
			if ( self.dragging ) {
				// self.mouseMoved must be updated before refresh() because it will be used in the control "change" event
				self.mouseMoved = true;

				if ( cType === "select" ) {
					// make the handle move in sync with the mouse
					handle.removeClass( "ui-slider-handle-snapping" );
				}

				self.refresh( event );

				// only after refresh() you can calculate self.userModified
				self.userModified = self.beforeStart !== control[0].selectedIndex;
				return false;
			}
		});

		slider.bind( "vmousedown", function( event ) {
			self.dragging = true;
			self.userModified = false;
			self.mouseMoved = false;

			if ( cType === "select" ) {
				self.beforeStart = control[0].selectedIndex;
			}

			self.refresh( event );
			return false;
		})
		.bind( "vclick", false );

		slider.add( document )
			.bind( "vmouseup", function() {
				if ( self.dragging ) {

					self.dragging = false;

					if ( cType === "select") {

						// make the handle move with a smooth transition
						handle.addClass( "ui-slider-handle-snapping" );

						if ( self.mouseMoved ) {

							// this is a drag, change the value only if user dragged enough
							if ( self.userModified ) {
								self.refresh( self.beforeStart == 0 ? 1 : 0 );
							}
							else {
								self.refresh( self.beforeStart );
							}

						}
						else {
							// this is just a click, change the value
							self.refresh( self.beforeStart == 0 ? 1 : 0 );
						}

					}

					self.mouseMoved = false;

					return false;
				}
			});

		slider.insertAfter( control );

		// Only add focus class to toggle switch, sliders get it automatically from ui-btn
		if( cType == 'select' ) {
			this.handle.bind({
				focus: function() {
					slider.addClass( $.mobile.focusClass );
				},

				blur: function() {
					slider.removeClass( $.mobile.focusClass );
				}
			});
		}

		this.handle.bind({
			// NOTE force focus on handle
			vmousedown: function() {
				$( this ).focus();
			},

			vclick: false,

			keydown: function( event ) {
				var index = val();

				if ( self.options.disabled ) {
					return;
				}

				// In all cases prevent the default and mark the handle as active
				switch ( event.keyCode ) {
					case $.mobile.keyCode.HOME:
					case $.mobile.keyCode.END:
					case $.mobile.keyCode.PAGE_UP:
					case $.mobile.keyCode.PAGE_DOWN:
					case $.mobile.keyCode.UP:
					case $.mobile.keyCode.RIGHT:
					case $.mobile.keyCode.DOWN:
					case $.mobile.keyCode.LEFT:
						event.preventDefault();

						if ( !self._keySliding ) {
							self._keySliding = true;
							$( this ).addClass( "ui-state-active" );
						}
						break;
				}

				// move the slider according to the keypress
				switch ( event.keyCode ) {
					case $.mobile.keyCode.HOME:
						self.refresh( min );
						break;
					case $.mobile.keyCode.END:
						self.refresh( max );
						break;
					case $.mobile.keyCode.PAGE_UP:
					case $.mobile.keyCode.UP:
					case $.mobile.keyCode.RIGHT:
						self.refresh( index + step );
						break;
					case $.mobile.keyCode.PAGE_DOWN:
					case $.mobile.keyCode.DOWN:
					case $.mobile.keyCode.LEFT:
						self.refresh( index - step );
						break;
				}
			}, // remove active mark

			keyup: function( event ) {
				if ( self._keySliding ) {
					self._keySliding = false;
					$( this ).removeClass( "ui-state-active" );
				}
			}
			});

		this.refresh(undefined, undefined, true);
	},

	refresh: function( val, isfromControl, preventInputUpdate ) {

		if ( this.options.disabled || this.element.attr('disabled')) {
			this.disable();
		}

		var control = this.element, percent,
			cType = control[0].nodeName.toLowerCase(),
			min = cType === "input" ? parseFloat( control.attr( "min" ) ) : 0,
			max = cType === "input" ? parseFloat( control.attr( "max" ) ) : control.find( "option" ).length - 1,
			step = (cType === "input" && parseFloat( control.attr( "step" ) ) > 0) ? parseFloat(control.attr("step")) : 1;
			sliderOrientation = control.attr( "sliderOrientation") || "horizontal";
			
		if ( typeof val === "object" ) {
			var data = val,
				// a slight tolerance helped get to the ends of the slider
				tol = 8;
			if ( !this.dragging ||
					data.pageX < this.slider.offset().left - tol ||
					data.pageX > this.slider.offset().left + this.slider.width() + tol ) {
				return;
			}
			
			
				
			if(sliderOrientation == "horizontal")
			{
			percent = Math.round( ( ( data.pageX - this.slider.offset().left ) / this.slider.width() ) * 100 );
			}
			else if(sliderOrientation == "vertical")
			{
			percent = Math.round( ( ( data.pageY - this.slider.offset().top ) / this.slider.height() ) * 100 );
			}			
			else if(sliderOrientation == "verticalInverted")
			{
			percent = 100 - Math.round( ( (  data.pageY - this.slider.offset().top  ) / this.slider.height() ) * 100 );
			}	
			
			
		} else {
			if ( val == null ) {
				val = cType === "input" ? parseFloat( control.val() || 0 ) : control[0].selectedIndex;
			}
			percent = ( parseFloat( val ) - min ) / ( max - min ) * 100;
		}

		if ( isNaN( percent ) ) {
			return;
		}

		if ( percent < 0 ) {
			percent = 0;
		}

		if ( percent > 100 ) {
			percent = 100;
		}

		var newval = ( percent / 100 ) * ( max - min ) + min;

		//from jQuery UI slider, the following source will round to the nearest step
		var valModStep = ( newval - min ) % step;
		var alignValue = newval - valModStep;

		if ( Math.abs( valModStep ) * 2 >= step ) {
			alignValue += ( valModStep > 0 ) ? step : ( -step );
		}
		// Since JavaScript has problems with large floats, round
		// the final value to 5 digits after the decimal point (see jQueryUI: #4124)
		newval = parseFloat( alignValue.toFixed(5) );

		if ( newval < min ) {
			newval = min;
		}

		if ( newval > max ) {
			newval = max;
		}


		if(sliderOrientation == "horizontal")
		{
			this.handle.css( "left", percent + "%" );
		}
		else if(sliderOrientation == "vertical")
		{
			this.handle.css( "top", percent + "%" );
		}		
		else if(sliderOrientation == "verticalInverted")
		{
			this.handle.css( "top",  100 - percent + "%" );
		}
		
		
		this.handle.attr( {
				"aria-valuenow": cType === "input" ? newval : control.find( "option" ).eq( newval ).attr( "value" ),
				"aria-valuetext": cType === "input" ? newval : control.find( "option" ).eq( newval ).getEncodedText(),
				title: cType === "input" ? newval : control.find( "option" ).eq( newval ).getEncodedText()
			});
		this.valuebg && this.valuebg.css( "height", 5.5 + percent + "%" );

		$("#slider-fill").css('bottom', percent - 14 +'%');

		// drag the label widths
		if ( this._labels ) {
			var handlePercent = this.handle.width() / this.slider.width() * 100,
				aPercent = percent && handlePercent + ( 100 - handlePercent ) * percent / 100,
				bPercent = percent === 100 ? 0 : Math.min( handlePercent + 100 - aPercent, 100 );

			this._labels.each(function(){
				var ab = $(this).is( ".ui-slider-label-a" );
				$( this ).width( ( ab ? aPercent : bPercent  ) + "%" );
			});
		}

		if ( !preventInputUpdate ) {
			var valueChanged = false;

			// update control"s value
			if ( cType === "input" ) {
				valueChanged = control.val() !== newval;
				control.val( newval );
			} else {
				valueChanged = control[ 0 ].selectedIndex !== newval;
				control[ 0 ].selectedIndex = newval;
			}
			if ( !isfromControl && valueChanged ) {
				control.trigger( "change" );
			}
		}
	},

	enable: function() {
		this.element.attr( "disabled", false );
		this.slider.removeClass( "ui-disabled" ).attr( "aria-disabled", false );
		return this._setOption( "disabled", false );
	},

	disable: function() {
		this.element.attr( "disabled", true );
		this.slider.addClass( "ui-disabled" ).attr( "aria-disabled", true );
		return this._setOption( "disabled", true );
	}

});

//auto self-init widgets
$( document ).bind( "pagecreate create", function( e ){
	$.mobile.slider.prototype.enhanceWithin( e.target, true );
});

})( jQuery );;$(document).ready(function() {
    $("input[type=text],input[type=password],textarea").blur(function() {
        if (this.id != "tidigareTimeEdit")
            window.scroll(0, 0);

        console.log('hehrdoing j');
    });
    $('.checkicon.unchecked').click(function() {
        trainingInfo = $.jStorage.get('userdetails');
        // $(this).removeClass('unchecked');
        // $('#Register .checkicon').addClass('full')

        setTimeout(function() {

            setTimeout(function() {
                //bring back the button to the fresh green state as soon as possible
                // $('#Register .checkicon').removeClass('full');
                // $('#Register .checkicon').removeClass('full');
                //  $('#Register .checkicon').addClass('unchecked');
                //  if(trainingInfo.training.type == 1)
                //      $('#Register .checkicon').addClass('full');

            }, 4000);





            $("#txtComments").val("");
            $("#practicedate").val(new Date().format("yyyy-mm-dd HH:MM"));
            $("#practicedate").change();


            $("#slider-fill,#slider-fill_2_2,#slider-fill_2_4").hide();

            $("div.rangeslider div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").height(sliderpercentage[$("#slider-fill").val()] + "%");
            $("#rangeslider_2_2 div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").height(sliderpercentage[$("#slider-fill_2_2").val()] + "%");
            $("#rangeslider_2_4 div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").height(sliderpercentage[$("#slider-fill_2_4").val()] + "%");


            $('#slider-fill, #slider-fill_2_2, #slider-fill_2_4').unbind("change");

            $('#slider-fill').val('0').css('bottom', sliderFillpercentage[$('#slider-fill').val()] + '%');
            $('#slider-fill_2_2').val('0').css('bottom', sliderFillpercentage[$('#slider-fill_2_2').val()] + '%');
            $('#slider-fill_2_4').val('0').css('bottom', sliderFillpercentage[$('#slider-fill_2_4').val()] + '%');

            //var slide_bottom,slide2_2_bottom;
            $('#slider-fill').change(function() {
                $("div.rangeslider div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").attr("style", "display:block");
                $("div.rangeslider div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").height(sliderpercentage[$(this).val()] + "%");
                $("#slider-fill-span").attr("style", "display:block").html($(this).val()).css('bottom', sliderpercentage[$(this).val()] - 20 + "%");
                $("#sliderVal").html($(this).val() + " av 10");
            });



            $('#slider-fill_2_2').change(function() {
                $("#rangeslider_2_2 div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").attr("style", "display:block");
                //slide2_2_bottom = sliderpercentage[$(this).val()];
                $("#rangeslider_2_2 div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").height(sliderpercentage[$(this).val()] + "%");
                $("#slider-fill-span_2_2").attr("style", "display:block").html($(this).val()).css('bottom', sliderpercentage[$(this).val()] - 20 + "%");
                // $("#sliderVal_2_2").html($(this).val() + " av 10");
            });

            $('#slider-fill_2_4').change(function() {
                $("#rangeslider_2_4 div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").attr("style", "display:bolck");
                //slide2_2_bottom = sliderpercentage[$(this).val()];
                $("#rangeslider_2_4 div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").height(sliderpercentage[$(this).val()] + "%");
                $("#slider-fill-span_2_4").attr("style", "display:block").html($(this).val()).css('bottom', sliderpercentage[$(this).val()] - 20 + "%");
                // $("#sliderVal_2_2").html($(this).val() + " av 10");
            });

            $('#slider-fill,#slider-fill_2_2,#slider-fill_2_4').change();

            $("#rangeslider_2_4 div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").attr("style", "display:none");
            $("#rangeslider_2_2 div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").attr("style", "display:none");
            $("div.rangeslider div.ui-slider-bg.ui-btn-active.ui-btn-corner-all").attr("style", "display:none");
            $(".slider-fill-span").attr("style", "display:none");

            Training.process.init();

            Training.editedTrainingID = 0;
            if (Training.editedTrainingID !== 0) {
                var trainings = $.grep(Training.TrainingLists, function(e) {
                    return parseInt(e.trainingId) === parseInt(Training.editedTrainingID);
                });
                if (trainings.length > 0) {
                    console.log(trainings);
                    console.log('ever reached here??? wait which case is this one?')
                    var training = trainings[0];
                    $('#slider-fill').val(training.estimatedvalue).css('bottom', sliderFillpercentage[$("#slider-fill").val()] + "%");
                    $('#slider-fill_2_2').val(training.estimatedvalue).css('bottom', sliderFillpercentage[$("#slider-fill_2_2").val()] + "%");
                    if (training.estimatedvalue_end) {
                        $('#slider-fill_2_4').val(training.estimatedvalue_end).css('bottom', sliderFillpercentage[$("#slider-fill_2_4").val()] + "%");
                    }
                    $('#slider-fill').change();
                    $("#txtComments").val(training.comment);
                    $("#practicedate").val(training.trainingdatetime);
                    $("#practicedate").change();

                    $('#slider-fill_2_2').change();
                    $('#slider-fill_2_4').change();
                }
            }
        }, 100);
});
    // initialize datepickers
    var pickerTheme = 'ios7';
    if (IsIDevice) {
        var deviceIosVersion = iOSversion();
        if (deviceIosVersion != undefined && deviceIosVersion[0] === 7) {
            //$.loadCss("mobiscroll/css/mobiscroll.ios7.css");
            //$.getScriptSync("mobiscroll/js/mobiscroll.ios7.js");
            pickerTheme = 'ios7';
        } else {
            //$.loadCss('mobiscroll/css/mobiscroll.ios.css');
            //$.getScriptSync("mobiscroll/js/mobiscroll.ios.js");
            pickerTheme = 'ios';
        }

    } else {
        //$.loadCss('mobiscroll/css/mobiscroll.android.css');
        //$.getScriptSync("mobiscroll/js/mobiscroll.android.js");
        pickerTheme = 'andriod';

    }
    //pickerTheme = 'ios7';
    pickerTheme = 'android';
    var dateNow = new Date();

    // $(".bipDate").mobiscroll().datetime({
    //     preset: 'datetime',
    //     theme: pickerTheme,
    //     display: 'bottom',
    //     mode: 'mixed',
    //     startYear: dateNow.getFullYear(),
    //     endYear: dateNow.getFullYear(),
    //     maxDate: dateNow,
    //     lang: 'sv'
    // });
var mobiopt = {
    preset: 'datetime',
        //minDate: new Date(2012, 3, 10, 9, 22),
        //maxDate: new Date(2014, 7, 30, 15, 44),
        //stepMinute: 5,
        startYear: dateNow.getFullYear(),
        endYear: dateNow.getFullYear(),
        maxDate: dateNow,
        theme: pickerTheme,
        mode: 'mixed',
        setText: "Lägg till",
        cancelText: "Avbryt",
        secText: 'sec',
        lang: 'sv',
        display: 'bottom',
        animate: 'none',
        onShow: function() {
            //setTimeout(function() {
            // alert('shown');
            adjustDateTimePickerTopPosition();

            //}, 1500);
}
};


var mobiscrollTimeOptions = window.mobiscrollTimeOptions = {
    preset: 'time',
    theme: pickerTheme,
    timeWheels: 'iiss',
    timeFormat: 'ii:ss',
    mode: 'mixed',
    lang: 'sv',
    setText: "Lägg till",
    cancelText: "Avbryt",
    display: 'bottom',
    animate: 'none',
    minuteText: 'Minuter',
    secText: 'Sekunder',
    onShow: function() {
            //setTimeout(function() {
            // alert('shown');
            adjustDateTimePickerTopPosition();

            //}, 1500);
}
};

$(".bipDate").scroller('destroy').scroller(mobiopt);
$("#btnpracticedate").click(function() {
        //$('#practicedate').mobiscroll('show');
        $('#practicedate').scroller('show');
        //adjustDateTimePickerTopPosition();
        return false;
    });

    //shortcut
    $("#edit_practiced_date_single").click(function(e) {
        $('#practicedate').scroller('show');
        //adjustDateTimePickerTopPosition();
        e.preventDefault();
        return false;
    });


    $(".bip_edit_date").click(function(e) {
        //var tDate = new Date($("#tidigare_date_1_2").attr("value"));
        var tDate = parseDateTime($("#tidigare_date_1_2").attr("value"));
        var mobiScrollOptions = {
            preset: 'datetime',
            startYear: tDate.getFullYear(),
            endYear: tDate.getFullYear(),
            maxDate: tDate,
            theme: pickerTheme,
            mode: 'mixed',
            secText: 'sec',
            lang: 'sv',
            display: 'bottom',
            animate: 'none',
            onShow: function() {
                //setTimeout(function() {
                // alert('shown');
                adjustDateTimePickerTopPosition();

                //}, 1500);
}
};
$("#tidigare_date_1_2").scroller('destroy').scroller(mobiScrollOptions).scroller('setDate', tDate, true);

        //$("#tidigare_date_1_2").scroller('setDate', tDate, true);

        $("#tidigare_date_1_2").scroller('show');

        //adjustDateTimePickerTopPosition();

        e.preventDefault();
        return false;
    });

    // $(".bip_edit").click(function(e) {
    //     $("#tidigareTimeEdit").scroller(mobiscrollTimeOptions);
    //     $("#editminute").removeClass('bip_hidden');
    //     $(".bip_edit").addClass('bip_hidden');
    // });

$("#editminute").click(function(e) {
    $("#tidigareTimeEdit").scroller(mobiscrollTimeOptions);

    $("#tidigareTimeEdit").scroller('show');
    e.preventDefault();
    return false;
        //$("#editminute").removeClass('bip_hidden');
        //$(".bip_edit").addClass('bip_hidden');
    });

    // $("#editminute").click(function(e) {
    //     $("#tidigareTimeEdit").scroller('show');
    //     //adjustDateTimePickerTopPosition();
    //     e.preventDefault();
    //     return false;
    // })





$("#defaultTimeSpent").click(function(e) {
    updateUserTrainingTime();
});

$('#editTimeSpent').click(function(e) {
    $('#training_span').scroller('show');
        //adjustDateTimePickerTopPosition();
        e.preventDefault();
        return false;
    });

$("#training_span").change(function() {
    var times = $(this).val().split(":");;
    var totalSeconds = parseInt(times[0], 10) * 60 + parseInt(times[1], 10);
    Training.process.sec = totalSeconds;
    $("#dintid").addClass("bip_hidden");
});

$("#practicedate").change(function() {
    console.log('practice date changed');
    $(".popupTime span").html($(this).val().replace(' ', '<br/>'));
    var arr = $(this).val().split(" ");
    if (arr.length > 0) {
        $("#TrainingZone_1_2 .datestrong,#popUp3 .datestrong").html(arr[0]);
        $("#TrainingZone_1_2 .timestrong,#popUp3 .timestrong").html(arr[1]);
    }
});

$("#tidigare_date_1_2").change(function() {
    var arr = $(this).val().split(" ");
    console.log(arr);
    if (arr.length > 0) {
        $("#tidigare_review #training_review_datetime").html(arr[0] + ", " + arr[1]);
        $("#tidigare_review #training_review_datetime").attr("data-value", arr);
        $("#tidigare_date_1_2").attr("value", arr[0] + " " + arr[1]);
    }
});

$('#showWeeklyActivityOnGraph').off('click').on('click', Graph.showActivityGraphperweek);

function adjustDateTimePickerTopPosition() {
    console.log('top (1)=' + $(".dw.dwbg.dw-slideup.dw-in.dw-ltr").css("top"));

    var top1 = $(".dw.dwbg.dw-slideup.dw-in.dw-ltr").css("top").replace("px", "") - 22 + 'px';
    console.log('top (2)=' + $(".dw.dwbg.dw-slideup.dw-in.dw-ltr").css("top"));

    $(".dw.dwbg.dw-slideup.dw-in.dw-ltr").css("top", top1);
    console.log('top (3)=' + $(".dw.dwbg.dw-slideup.dw-in.dw-ltr").css("top"));


}

});

$(document).bind("mobileinit", function() {
    $.mobile.defaultPageTransition = "none";


});;/*
 * ----------------------------- JSTORAGE -------------------------------------
 * Simple local storage wrapper to save data on the browser side, supporting
 * all major browsers - IE6+, Firefox2+, Safari4+, Chrome4+ and Opera 10.5+
 *
 * Copyright (c) 2010 Andris Reinman, andris.reinman@gmail.com
 * Project homepage: www.jstorage.info
 *
 * Licensed under MIT-style license:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * $.jStorage
 *
 * USAGE:
 *
 * jStorage requires Prototype, MooTools or jQuery! If jQuery is used, then
 * jQuery-JSON (http://code.google.com/p/jquery-json/) is also needed.
 * (jQuery-JSON needs to be loaded BEFORE jStorage!)
 *
 * Methods:
 *
 * -set(key, value)
 * $.jStorage.set(key, value) -> saves a value
 *
 * -get(key[, default])
 * value = $.jStorage.get(key [, default]) ->
 *    retrieves value if key exists, or default if it doesn't
 *
 * -deleteKey(key)
 * $.jStorage.deleteKey(key) -> removes a key from the storage
 *
 * -flush()
 * $.jStorage.flush() -> clears the cache
 *
 * -storageObj()
 * $.jStorage.storageObj() -> returns a read-ony copy of the actual storage
 *
 * -storageSize()
 * $.jStorage.storageSize() -> returns the size of the storage in bytes
 *
 * -index()
 * $.jStorage.index() -> returns the used keys as an array
 *
 * -storageAvailable()
 * $.jStorage.storageAvailable() -> returns true if storage is available
 *
 * -reInit()
 * $.jStorage.reInit() -> reloads the data from browser storage
 *
 * <value> can be any JSON-able value, including objects and arrays.
 *
 **/

(function($){
    if(!$ || !($.toJSON || Object.toJSON || window.JSON)){
        throw new Error("jQuery, MooTools or Prototype needs to be loaded before jStorage!");
    }

    var
        /* This is the object, that holds the cached values */
        _storage = {},

        /* Actual browser storage (localStorage or globalStorage['domain']) */
        _storage_service = {jStorage:"{}"},

        /* DOM element for older IE versions, holds userData behavior */
        _storage_elm = null,

        /* How much space does the storage take */
        _storage_size = 0,

        /* function to encode objects to JSON strings */
        json_encode = $.toJSON || Object.toJSON || (window.JSON && (JSON.encode || JSON.stringify)),

        /* function to decode objects from JSON strings */
        json_decode = $.evalJSON || (window.JSON && (JSON.decode || JSON.parse)) || function(str){
            return String(str).evalJSON();
        },

        /* which backend is currently used */
        _backend = false,

        /* Next check for TTL */
        _ttl_timeout,

        /**
         * XML encoding and decoding as XML nodes can't be JSON'ized
         * XML nodes are encoded and decoded if the node is the value to be saved
         * but not if it's as a property of another object
         * Eg. -
         *   $.jStorage.set("key", xmlNode);        // IS OK
         *   $.jStorage.set("key", {xml: xmlNode}); // NOT OK
         */
        _XMLService = {

            /**
             * Validates a XML node to be XML
             * based on jQuery.isXML function
             */
            isXML: function(elm){
                var documentElement = (elm ? elm.ownerDocument || elm : 0).documentElement;
                return documentElement ? documentElement.nodeName !== "HTML" : false;
            },

            /**
             * Encodes a XML node to string
             * based on http://www.mercurytide.co.uk/news/article/issues-when-working-ajax/
             */
            encode: function(xmlNode) {
                if(!this.isXML(xmlNode)){
                    return false;
                }
                try{ // Mozilla, Webkit, Opera
                    return new XMLSerializer().serializeToString(xmlNode);
                }catch(E1) {
                    try {  // IE
                        return xmlNode.xml;
                    }catch(E2){}
                }
                return false;
            },

            /**
             * Decodes a XML node from string
             * loosely based on http://outwestmedia.com/jquery-plugins/xmldom/
             */
            decode: function(xmlString){
                var dom_parser = ("DOMParser" in window && (new DOMParser()).parseFromString) ||
                        (window.ActiveXObject && function(_xmlString) {
                    var xml_doc = new ActiveXObject('Microsoft.XMLDOM');
                    xml_doc.async = 'false';
                    xml_doc.loadXML(_xmlString);
                    return xml_doc;
                }),
                resultXML;
                if(!dom_parser){
                    return false;
                }
                resultXML = dom_parser.call("DOMParser" in window && (new DOMParser()) || window, xmlString, 'text/xml');
                return this.isXML(resultXML)?resultXML:false;
            }
        };

    ////////////////////////// PRIVATE METHODS ////////////////////////

    /**
     * Initialization function. Detects if the browser supports DOM Storage
     * or userData behavior and behaves accordingly.
     * @returns undefined
     */
    function _init(){
        /* Check if browser supports localStorage */
        var localStorageReallyWorks = false;
        if("localStorage" in window){
            try {
                window.localStorage.setItem('_tmptest', 'tmpval');
                localStorageReallyWorks = true;
                window.localStorage.removeItem('_tmptest');
            } catch(BogusQuotaExceededErrorOnIos5) {
                // Thanks be to iOS5 Private Browsing mode which throws
                // QUOTA_EXCEEDED_ERRROR DOM Exception 22.
            }
        }
        if(localStorageReallyWorks){
            try {
                if(window.localStorage) {
                    _storage_service = window.localStorage;
                    _backend = "localStorage";
                }
            } catch(E3) {/* Firefox fails when touching localStorage and cookies are disabled */}
        }
        /* Check if browser supports globalStorage */
        else if("globalStorage" in window){
            try {
                if(window.globalStorage) {
                    _storage_service = window.globalStorage[window.location.hostname];
                    _backend = "globalStorage";
                }
            } catch(E4) {/* Firefox fails when touching localStorage and cookies are disabled */}
        }
        /* Check if browser supports userData behavior */
        else {
            _storage_elm = document.createElement('link');
            if(_storage_elm.addBehavior){

                /* Use a DOM element to act as userData storage */
                _storage_elm.style.behavior = 'url(#default#userData)';

                /* userData element needs to be inserted into the DOM! */
                document.getElementsByTagName('head')[0].appendChild(_storage_elm);

                _storage_elm.load("jStorage");
                var data = "{}";
                try{
                    data = _storage_elm.getAttribute("jStorage");
                }catch(E5){}
                _storage_service.jStorage = data;
                _backend = "userDataBehavior";
            }else{
                _storage_elm = null;
                return;
            }
        }

        _load_storage();

        // remove dead keys
        _handleTTL();
    }

    /**
     * Loads the data from the storage based on the supported mechanism
     * @returns undefined
     */
    function _load_storage(){
        /* if jStorage string is retrieved, then decode it */
        if(_storage_service.jStorage){
            try{
                _storage = json_decode(String(_storage_service.jStorage));
            }catch(E6){_storage_service.jStorage = "{}";}
        }else{
            _storage_service.jStorage = "{}";
        }
        _storage_size = _storage_service.jStorage?String(_storage_service.jStorage).length:0;
    }

    /**
     * This functions provides the "save" mechanism to store the jStorage object
     * @returns undefined
     */
    function _save(){
        try{
            _storage_service.jStorage = json_encode(_storage);
            // If userData is used as the storage engine, additional
            if(_storage_elm) {
                _storage_elm.setAttribute("jStorage",_storage_service.jStorage);
                _storage_elm.save("jStorage");
            }
            _storage_size = _storage_service.jStorage?String(_storage_service.jStorage).length:0;
        }catch(E7){/* probably cache is full, nothing is saved this way*/}
    }

    /**
     * Function checks if a key is set and is string or numberic
     */
    function _checkKey(key){
        if(!key || (typeof key != "string" && typeof key != "number")){
            throw new TypeError('Key name must be string or numeric');
        }
        if(key == "__jstorage_meta"){
            throw new TypeError('Reserved key name');
        }
        return true;
    }

    /**
     * Removes expired keys
     */
    function _handleTTL(){
        var curtime, i, TTL, nextExpire = Infinity, changed = false;

        clearTimeout(_ttl_timeout);

        if(!_storage.__jstorage_meta || typeof _storage.__jstorage_meta.TTL != "object"){
            // nothing to do here
            return;
        }

        curtime = +new Date();
        TTL = _storage.__jstorage_meta.TTL;
        for(i in TTL){
            if(TTL.hasOwnProperty(i)){
                if(TTL[i] <= curtime){
                    delete TTL[i];
                    delete _storage[i];
                    changed = true;
                }else if(TTL[i] < nextExpire){
                    nextExpire = TTL[i];
                }
            }
        }

        // set next check
        if(nextExpire != Infinity){
            _ttl_timeout = setTimeout(_handleTTL, nextExpire - curtime);
        }

        // save changes
        if(changed){
            _save();
        }
    }

    ////////////////////////// PUBLIC INTERFACE /////////////////////////

    $.jStorage = {
        /* Version number */
        version: "0.1.6.1",

        /**
         * Sets a key's value.
         *
         * @param {String} key - Key to set. If this value is not set or not
         *              a string an exception is raised.
         * @param value - Value to set. This can be any value that is JSON
         *              compatible (Numbers, Strings, Objects etc.).
         * @returns the used value
         */
        set: function(key, value){
            _checkKey(key);
            if(_XMLService.isXML(value)){
                value = {_is_xml:true,xml:_XMLService.encode(value)};
            }else if(typeof value == "function"){
                value = null; // functions can't be saved!
            }else if(value && typeof value == "object"){
                // clone the object before saving to _storage tree
                value = json_decode(json_encode(value));
            }
            _storage[key] = value;
            _save();
            return value;
        },

        /**
         * Looks up a key in cache
         *
         * @param {String} key - Key to look up.
         * @param {mixed} def - Default value to return, if key didn't exist.
         * @returns the key value, default value or <null>
         */
        get: function(key, def){
            _checkKey(key);
            if(key in _storage){
                if(_storage[key] && typeof _storage[key] == "object" &&
                        _storage[key]._is_xml &&
                            _storage[key]._is_xml){
                    return _XMLService.decode(_storage[key].xml);
                }else{
                    return _storage[key];
                }
            }
            return typeof(def) == 'undefined' ? null : def;
        },

        /**
         * Deletes a key from cache.
         *
         * @param {String} key - Key to delete.
         * @returns true if key existed or false if it didn't
         */
        deleteKey: function(key){
            _checkKey(key);
            if(key in _storage){
                delete _storage[key];
                // remove from TTL list
                if(_storage.__jstorage_meta &&
                  typeof _storage.__jstorage_meta.TTL == "object" &&
                  key in _storage.__jstorage_meta.TTL){
                    delete _storage.__jstorage_meta.TTL[key];
                }
                _save();
                return true;
            }
            return false;
        },

        /**
         * Sets a TTL for a key, or remove it if ttl value is 0 or below
         *
         * @param {String} key - key to set the TTL for
         * @param {Number} ttl - TTL timeout in milliseconds
         * @returns true if key existed or false if it didn't
         */
        setTTL: function(key, ttl){
            var curtime = +new Date();
            _checkKey(key);
            ttl = Number(ttl) || 0;
            if(key in _storage){

                if(!_storage.__jstorage_meta){
                    _storage.__jstorage_meta = {};
                }
                if(!_storage.__jstorage_meta.TTL){
                    _storage.__jstorage_meta.TTL = {};
                }

                // Set TTL value for the key
                if(ttl>0){
                    _storage.__jstorage_meta.TTL[key] = curtime + ttl;
                }else{
                    delete _storage.__jstorage_meta.TTL[key];
                }

                _save();

                _handleTTL();
                return true;
            }
            return false;
        },

        /**
         * Deletes everything in cache.
         *
         * @return true
         */
        flush: function(){
            _storage = {};
            _save();
            return true;
        },

        /**
         * Returns a read-only copy of _storage
         *
         * @returns Object
        */
        storageObj: function(){
            function F() {}
            F.prototype = _storage;
            return new F();
        },

        /**
         * Returns an index of all used keys as an array
         * ['key1', 'key2',..'keyN']
         *
         * @returns Array
        */
        index: function(){
            var index = [], i;
            for(i in _storage){
                if(_storage.hasOwnProperty(i) && i != "__jstorage_meta"){
                    index.push(i);
                }
            }
            return index;
        },

        /**
         * How much space in bytes does the storage take?
         *
         * @returns Number
         */
        storageSize: function(){
            return _storage_size;
        },

        /**
         * Which backend is currently in use?
         *
         * @returns String
         */
        currentBackend: function(){
            return _backend;
        },

        /**
         * Test if storage is available
         *
         * @returns Boolean
         */
        storageAvailable: function(){
            return !!_backend;
        },

        /**
         * Reloads the data from browser storage
         *
         * @returns undefined
         */
        reInit: function(){
            var new_storage_elm, data;
            if(_storage_elm && _storage_elm.addBehavior){
                new_storage_elm = document.createElement('link');

                _storage_elm.parentNode.replaceChild(new_storage_elm, _storage_elm);
                _storage_elm = new_storage_elm;

                /* Use a DOM element to act as userData storage */
                _storage_elm.style.behavior = 'url(#default#userData)';

                /* userData element needs to be inserted into the DOM! */
                document.getElementsByTagName('head')[0].appendChild(_storage_elm);

                _storage_elm.load("jStorage");
                data = "{}";
                try{
                    data = _storage_elm.getAttribute("jStorage");
                }catch(E5){}
                _storage_service.jStorage = data;
                _backend = "userDataBehavior";
            }

            _load_storage();
        }
    };

    // Initialize jStorage
    _init();

})(window.jQuery || window.$);